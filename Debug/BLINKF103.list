
BLINKF103.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d0f4  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000fd4  0800d208  0800d208  0001d208  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e1dc  0800e1dc  00020204  2**0
                  CONTENTS
  4 .ARM          00000000  0800e1dc  0800e1dc  00020204  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800e1dc  0800e1dc  00020204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e1dc  0800e1dc  0001e1dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e1e0  0800e1e0  0001e1e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000204  20000000  0800e1e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000017d8  20000204  0800e3e8  00020204  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200019dc  0800e3e8  000219dc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001bf7e  00000000  00000000  0002022d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003c14  00000000  00000000  0003c1ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001678  00000000  00000000  0003fdc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001510  00000000  00000000  00041438  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001be2e  00000000  00000000  00042948  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ba10  00000000  00000000  0005e776  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000928b6  00000000  00000000  0007a186  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0010ca3c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007084  00000000  00000000  0010ca90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000204 	.word	0x20000204
 800012c:	00000000 	.word	0x00000000
 8000130:	0800d1ec 	.word	0x0800d1ec

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000208 	.word	0x20000208
 800014c:	0800d1ec 	.word	0x0800d1ec

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <__aeabi_drsub>:
 8000174:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000178:	e002      	b.n	8000180 <__adddf3>
 800017a:	bf00      	nop

0800017c <__aeabi_dsub>:
 800017c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000180 <__adddf3>:
 8000180:	b530      	push	{r4, r5, lr}
 8000182:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000186:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800018a:	ea94 0f05 	teq	r4, r5
 800018e:	bf08      	it	eq
 8000190:	ea90 0f02 	teqeq	r0, r2
 8000194:	bf1f      	itttt	ne
 8000196:	ea54 0c00 	orrsne.w	ip, r4, r0
 800019a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a6:	f000 80e2 	beq.w	800036e <__adddf3+0x1ee>
 80001aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001b2:	bfb8      	it	lt
 80001b4:	426d      	neglt	r5, r5
 80001b6:	dd0c      	ble.n	80001d2 <__adddf3+0x52>
 80001b8:	442c      	add	r4, r5
 80001ba:	ea80 0202 	eor.w	r2, r0, r2
 80001be:	ea81 0303 	eor.w	r3, r1, r3
 80001c2:	ea82 0000 	eor.w	r0, r2, r0
 80001c6:	ea83 0101 	eor.w	r1, r3, r1
 80001ca:	ea80 0202 	eor.w	r2, r0, r2
 80001ce:	ea81 0303 	eor.w	r3, r1, r3
 80001d2:	2d36      	cmp	r5, #54	; 0x36
 80001d4:	bf88      	it	hi
 80001d6:	bd30      	pophi	{r4, r5, pc}
 80001d8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x70>
 80001ea:	4240      	negs	r0, r0
 80001ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x84>
 80001fe:	4252      	negs	r2, r2
 8000200:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000204:	ea94 0f05 	teq	r4, r5
 8000208:	f000 80a7 	beq.w	800035a <__adddf3+0x1da>
 800020c:	f1a4 0401 	sub.w	r4, r4, #1
 8000210:	f1d5 0e20 	rsbs	lr, r5, #32
 8000214:	db0d      	blt.n	8000232 <__adddf3+0xb2>
 8000216:	fa02 fc0e 	lsl.w	ip, r2, lr
 800021a:	fa22 f205 	lsr.w	r2, r2, r5
 800021e:	1880      	adds	r0, r0, r2
 8000220:	f141 0100 	adc.w	r1, r1, #0
 8000224:	fa03 f20e 	lsl.w	r2, r3, lr
 8000228:	1880      	adds	r0, r0, r2
 800022a:	fa43 f305 	asr.w	r3, r3, r5
 800022e:	4159      	adcs	r1, r3
 8000230:	e00e      	b.n	8000250 <__adddf3+0xd0>
 8000232:	f1a5 0520 	sub.w	r5, r5, #32
 8000236:	f10e 0e20 	add.w	lr, lr, #32
 800023a:	2a01      	cmp	r2, #1
 800023c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000240:	bf28      	it	cs
 8000242:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	18c0      	adds	r0, r0, r3
 800024c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000250:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000254:	d507      	bpl.n	8000266 <__adddf3+0xe6>
 8000256:	f04f 0e00 	mov.w	lr, #0
 800025a:	f1dc 0c00 	rsbs	ip, ip, #0
 800025e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000262:	eb6e 0101 	sbc.w	r1, lr, r1
 8000266:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800026a:	d31b      	bcc.n	80002a4 <__adddf3+0x124>
 800026c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000270:	d30c      	bcc.n	800028c <__adddf3+0x10c>
 8000272:	0849      	lsrs	r1, r1, #1
 8000274:	ea5f 0030 	movs.w	r0, r0, rrx
 8000278:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800027c:	f104 0401 	add.w	r4, r4, #1
 8000280:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000284:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000288:	f080 809a 	bcs.w	80003c0 <__adddf3+0x240>
 800028c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000290:	bf08      	it	eq
 8000292:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000296:	f150 0000 	adcs.w	r0, r0, #0
 800029a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029e:	ea41 0105 	orr.w	r1, r1, r5
 80002a2:	bd30      	pop	{r4, r5, pc}
 80002a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a8:	4140      	adcs	r0, r0
 80002aa:	eb41 0101 	adc.w	r1, r1, r1
 80002ae:	3c01      	subs	r4, #1
 80002b0:	bf28      	it	cs
 80002b2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002b6:	d2e9      	bcs.n	800028c <__adddf3+0x10c>
 80002b8:	f091 0f00 	teq	r1, #0
 80002bc:	bf04      	itt	eq
 80002be:	4601      	moveq	r1, r0
 80002c0:	2000      	moveq	r0, #0
 80002c2:	fab1 f381 	clz	r3, r1
 80002c6:	bf08      	it	eq
 80002c8:	3320      	addeq	r3, #32
 80002ca:	f1a3 030b 	sub.w	r3, r3, #11
 80002ce:	f1b3 0220 	subs.w	r2, r3, #32
 80002d2:	da0c      	bge.n	80002ee <__adddf3+0x16e>
 80002d4:	320c      	adds	r2, #12
 80002d6:	dd08      	ble.n	80002ea <__adddf3+0x16a>
 80002d8:	f102 0c14 	add.w	ip, r2, #20
 80002dc:	f1c2 020c 	rsb	r2, r2, #12
 80002e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e4:	fa21 f102 	lsr.w	r1, r1, r2
 80002e8:	e00c      	b.n	8000304 <__adddf3+0x184>
 80002ea:	f102 0214 	add.w	r2, r2, #20
 80002ee:	bfd8      	it	le
 80002f0:	f1c2 0c20 	rsble	ip, r2, #32
 80002f4:	fa01 f102 	lsl.w	r1, r1, r2
 80002f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002fc:	bfdc      	itt	le
 80002fe:	ea41 010c 	orrle.w	r1, r1, ip
 8000302:	4090      	lslle	r0, r2
 8000304:	1ae4      	subs	r4, r4, r3
 8000306:	bfa2      	ittt	ge
 8000308:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800030c:	4329      	orrge	r1, r5
 800030e:	bd30      	popge	{r4, r5, pc}
 8000310:	ea6f 0404 	mvn.w	r4, r4
 8000314:	3c1f      	subs	r4, #31
 8000316:	da1c      	bge.n	8000352 <__adddf3+0x1d2>
 8000318:	340c      	adds	r4, #12
 800031a:	dc0e      	bgt.n	800033a <__adddf3+0x1ba>
 800031c:	f104 0414 	add.w	r4, r4, #20
 8000320:	f1c4 0220 	rsb	r2, r4, #32
 8000324:	fa20 f004 	lsr.w	r0, r0, r4
 8000328:	fa01 f302 	lsl.w	r3, r1, r2
 800032c:	ea40 0003 	orr.w	r0, r0, r3
 8000330:	fa21 f304 	lsr.w	r3, r1, r4
 8000334:	ea45 0103 	orr.w	r1, r5, r3
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	f1c4 040c 	rsb	r4, r4, #12
 800033e:	f1c4 0220 	rsb	r2, r4, #32
 8000342:	fa20 f002 	lsr.w	r0, r0, r2
 8000346:	fa01 f304 	lsl.w	r3, r1, r4
 800034a:	ea40 0003 	orr.w	r0, r0, r3
 800034e:	4629      	mov	r1, r5
 8000350:	bd30      	pop	{r4, r5, pc}
 8000352:	fa21 f004 	lsr.w	r0, r1, r4
 8000356:	4629      	mov	r1, r5
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f094 0f00 	teq	r4, #0
 800035e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000362:	bf06      	itte	eq
 8000364:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000368:	3401      	addeq	r4, #1
 800036a:	3d01      	subne	r5, #1
 800036c:	e74e      	b.n	800020c <__adddf3+0x8c>
 800036e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000372:	bf18      	it	ne
 8000374:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000378:	d029      	beq.n	80003ce <__adddf3+0x24e>
 800037a:	ea94 0f05 	teq	r4, r5
 800037e:	bf08      	it	eq
 8000380:	ea90 0f02 	teqeq	r0, r2
 8000384:	d005      	beq.n	8000392 <__adddf3+0x212>
 8000386:	ea54 0c00 	orrs.w	ip, r4, r0
 800038a:	bf04      	itt	eq
 800038c:	4619      	moveq	r1, r3
 800038e:	4610      	moveq	r0, r2
 8000390:	bd30      	pop	{r4, r5, pc}
 8000392:	ea91 0f03 	teq	r1, r3
 8000396:	bf1e      	ittt	ne
 8000398:	2100      	movne	r1, #0
 800039a:	2000      	movne	r0, #0
 800039c:	bd30      	popne	{r4, r5, pc}
 800039e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003a2:	d105      	bne.n	80003b0 <__adddf3+0x230>
 80003a4:	0040      	lsls	r0, r0, #1
 80003a6:	4149      	adcs	r1, r1
 80003a8:	bf28      	it	cs
 80003aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003b4:	bf3c      	itt	cc
 80003b6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ba:	bd30      	popcc	{r4, r5, pc}
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003c4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf1a      	itte	ne
 80003d4:	4619      	movne	r1, r3
 80003d6:	4610      	movne	r0, r2
 80003d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003dc:	bf1c      	itt	ne
 80003de:	460b      	movne	r3, r1
 80003e0:	4602      	movne	r2, r0
 80003e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e6:	bf06      	itte	eq
 80003e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003ec:	ea91 0f03 	teqeq	r1, r3
 80003f0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	bf00      	nop

080003f8 <__aeabi_ui2d>:
 80003f8:	f090 0f00 	teq	r0, #0
 80003fc:	bf04      	itt	eq
 80003fe:	2100      	moveq	r1, #0
 8000400:	4770      	bxeq	lr
 8000402:	b530      	push	{r4, r5, lr}
 8000404:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000408:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800040c:	f04f 0500 	mov.w	r5, #0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e750      	b.n	80002b8 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_i2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800042c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000430:	bf48      	it	mi
 8000432:	4240      	negmi	r0, r0
 8000434:	f04f 0100 	mov.w	r1, #0
 8000438:	e73e      	b.n	80002b8 <__adddf3+0x138>
 800043a:	bf00      	nop

0800043c <__aeabi_f2d>:
 800043c:	0042      	lsls	r2, r0, #1
 800043e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000442:	ea4f 0131 	mov.w	r1, r1, rrx
 8000446:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800044a:	bf1f      	itttt	ne
 800044c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000450:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000454:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000458:	4770      	bxne	lr
 800045a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800045e:	bf08      	it	eq
 8000460:	4770      	bxeq	lr
 8000462:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000466:	bf04      	itt	eq
 8000468:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000474:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000478:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800047c:	e71c      	b.n	80002b8 <__adddf3+0x138>
 800047e:	bf00      	nop

08000480 <__aeabi_ul2d>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	f04f 0500 	mov.w	r5, #0
 800048e:	e00a      	b.n	80004a6 <__aeabi_l2d+0x16>

08000490 <__aeabi_l2d>:
 8000490:	ea50 0201 	orrs.w	r2, r0, r1
 8000494:	bf08      	it	eq
 8000496:	4770      	bxeq	lr
 8000498:	b530      	push	{r4, r5, lr}
 800049a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800049e:	d502      	bpl.n	80004a6 <__aeabi_l2d+0x16>
 80004a0:	4240      	negs	r0, r0
 80004a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004aa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004b2:	f43f aed8 	beq.w	8000266 <__adddf3+0xe6>
 80004b6:	f04f 0203 	mov.w	r2, #3
 80004ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004be:	bf18      	it	ne
 80004c0:	3203      	addne	r2, #3
 80004c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c6:	bf18      	it	ne
 80004c8:	3203      	addne	r2, #3
 80004ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ce:	f1c2 0320 	rsb	r3, r2, #32
 80004d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d6:	fa20 f002 	lsr.w	r0, r0, r2
 80004da:	fa01 fe03 	lsl.w	lr, r1, r3
 80004de:	ea40 000e 	orr.w	r0, r0, lr
 80004e2:	fa21 f102 	lsr.w	r1, r1, r2
 80004e6:	4414      	add	r4, r2
 80004e8:	e6bd      	b.n	8000266 <__adddf3+0xe6>
 80004ea:	bf00      	nop

080004ec <__aeabi_dmul>:
 80004ec:	b570      	push	{r4, r5, r6, lr}
 80004ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004fa:	bf1d      	ittte	ne
 80004fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000500:	ea94 0f0c 	teqne	r4, ip
 8000504:	ea95 0f0c 	teqne	r5, ip
 8000508:	f000 f8de 	bleq	80006c8 <__aeabi_dmul+0x1dc>
 800050c:	442c      	add	r4, r5
 800050e:	ea81 0603 	eor.w	r6, r1, r3
 8000512:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000516:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800051a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051e:	bf18      	it	ne
 8000520:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000524:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000528:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800052c:	d038      	beq.n	80005a0 <__aeabi_dmul+0xb4>
 800052e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000532:	f04f 0500 	mov.w	r5, #0
 8000536:	fbe1 e502 	umlal	lr, r5, r1, r2
 800053a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800053e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000542:	f04f 0600 	mov.w	r6, #0
 8000546:	fbe1 5603 	umlal	r5, r6, r1, r3
 800054a:	f09c 0f00 	teq	ip, #0
 800054e:	bf18      	it	ne
 8000550:	f04e 0e01 	orrne.w	lr, lr, #1
 8000554:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000558:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800055c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000560:	d204      	bcs.n	800056c <__aeabi_dmul+0x80>
 8000562:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000566:	416d      	adcs	r5, r5
 8000568:	eb46 0606 	adc.w	r6, r6, r6
 800056c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000570:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000574:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000578:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800057c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000580:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000584:	bf88      	it	hi
 8000586:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800058a:	d81e      	bhi.n	80005ca <__aeabi_dmul+0xde>
 800058c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000590:	bf08      	it	eq
 8000592:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000596:	f150 0000 	adcs.w	r0, r0, #0
 800059a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059e:	bd70      	pop	{r4, r5, r6, pc}
 80005a0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005a4:	ea46 0101 	orr.w	r1, r6, r1
 80005a8:	ea40 0002 	orr.w	r0, r0, r2
 80005ac:	ea81 0103 	eor.w	r1, r1, r3
 80005b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b4:	bfc2      	ittt	gt
 80005b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005be:	bd70      	popgt	{r4, r5, r6, pc}
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c4:	f04f 0e00 	mov.w	lr, #0
 80005c8:	3c01      	subs	r4, #1
 80005ca:	f300 80ab 	bgt.w	8000724 <__aeabi_dmul+0x238>
 80005ce:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005d2:	bfde      	ittt	le
 80005d4:	2000      	movle	r0, #0
 80005d6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005da:	bd70      	pople	{r4, r5, r6, pc}
 80005dc:	f1c4 0400 	rsb	r4, r4, #0
 80005e0:	3c20      	subs	r4, #32
 80005e2:	da35      	bge.n	8000650 <__aeabi_dmul+0x164>
 80005e4:	340c      	adds	r4, #12
 80005e6:	dc1b      	bgt.n	8000620 <__aeabi_dmul+0x134>
 80005e8:	f104 0414 	add.w	r4, r4, #20
 80005ec:	f1c4 0520 	rsb	r5, r4, #32
 80005f0:	fa00 f305 	lsl.w	r3, r0, r5
 80005f4:	fa20 f004 	lsr.w	r0, r0, r4
 80005f8:	fa01 f205 	lsl.w	r2, r1, r5
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000608:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800060c:	fa21 f604 	lsr.w	r6, r1, r4
 8000610:	eb42 0106 	adc.w	r1, r2, r6
 8000614:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000618:	bf08      	it	eq
 800061a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	f1c4 040c 	rsb	r4, r4, #12
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f304 	lsl.w	r3, r0, r4
 800062c:	fa20 f005 	lsr.w	r0, r0, r5
 8000630:	fa01 f204 	lsl.w	r2, r1, r4
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800063c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000640:	f141 0100 	adc.w	r1, r1, #0
 8000644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000648:	bf08      	it	eq
 800064a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f205 	lsl.w	r2, r0, r5
 8000658:	ea4e 0e02 	orr.w	lr, lr, r2
 800065c:	fa20 f304 	lsr.w	r3, r0, r4
 8000660:	fa01 f205 	lsl.w	r2, r1, r5
 8000664:	ea43 0302 	orr.w	r3, r3, r2
 8000668:	fa21 f004 	lsr.w	r0, r1, r4
 800066c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000670:	fa21 f204 	lsr.w	r2, r1, r4
 8000674:	ea20 0002 	bic.w	r0, r0, r2
 8000678:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800067c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000680:	bf08      	it	eq
 8000682:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000686:	bd70      	pop	{r4, r5, r6, pc}
 8000688:	f094 0f00 	teq	r4, #0
 800068c:	d10f      	bne.n	80006ae <__aeabi_dmul+0x1c2>
 800068e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000692:	0040      	lsls	r0, r0, #1
 8000694:	eb41 0101 	adc.w	r1, r1, r1
 8000698:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800069c:	bf08      	it	eq
 800069e:	3c01      	subeq	r4, #1
 80006a0:	d0f7      	beq.n	8000692 <__aeabi_dmul+0x1a6>
 80006a2:	ea41 0106 	orr.w	r1, r1, r6
 80006a6:	f095 0f00 	teq	r5, #0
 80006aa:	bf18      	it	ne
 80006ac:	4770      	bxne	lr
 80006ae:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006b2:	0052      	lsls	r2, r2, #1
 80006b4:	eb43 0303 	adc.w	r3, r3, r3
 80006b8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3d01      	subeq	r5, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1c6>
 80006c2:	ea43 0306 	orr.w	r3, r3, r6
 80006c6:	4770      	bx	lr
 80006c8:	ea94 0f0c 	teq	r4, ip
 80006cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d0:	bf18      	it	ne
 80006d2:	ea95 0f0c 	teqne	r5, ip
 80006d6:	d00c      	beq.n	80006f2 <__aeabi_dmul+0x206>
 80006d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006dc:	bf18      	it	ne
 80006de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e2:	d1d1      	bne.n	8000688 <__aeabi_dmul+0x19c>
 80006e4:	ea81 0103 	eor.w	r1, r1, r3
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	f04f 0000 	mov.w	r0, #0
 80006f0:	bd70      	pop	{r4, r5, r6, pc}
 80006f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f6:	bf06      	itte	eq
 80006f8:	4610      	moveq	r0, r2
 80006fa:	4619      	moveq	r1, r3
 80006fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000700:	d019      	beq.n	8000736 <__aeabi_dmul+0x24a>
 8000702:	ea94 0f0c 	teq	r4, ip
 8000706:	d102      	bne.n	800070e <__aeabi_dmul+0x222>
 8000708:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800070c:	d113      	bne.n	8000736 <__aeabi_dmul+0x24a>
 800070e:	ea95 0f0c 	teq	r5, ip
 8000712:	d105      	bne.n	8000720 <__aeabi_dmul+0x234>
 8000714:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000718:	bf1c      	itt	ne
 800071a:	4610      	movne	r0, r2
 800071c:	4619      	movne	r1, r3
 800071e:	d10a      	bne.n	8000736 <__aeabi_dmul+0x24a>
 8000720:	ea81 0103 	eor.w	r1, r1, r3
 8000724:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000728:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800072c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000730:	f04f 0000 	mov.w	r0, #0
 8000734:	bd70      	pop	{r4, r5, r6, pc}
 8000736:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800073a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800073e:	bd70      	pop	{r4, r5, r6, pc}

08000740 <__aeabi_ddiv>:
 8000740:	b570      	push	{r4, r5, r6, lr}
 8000742:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000746:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800074a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074e:	bf1d      	ittte	ne
 8000750:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000754:	ea94 0f0c 	teqne	r4, ip
 8000758:	ea95 0f0c 	teqne	r5, ip
 800075c:	f000 f8a7 	bleq	80008ae <__aeabi_ddiv+0x16e>
 8000760:	eba4 0405 	sub.w	r4, r4, r5
 8000764:	ea81 0e03 	eor.w	lr, r1, r3
 8000768:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800076c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000770:	f000 8088 	beq.w	8000884 <__aeabi_ddiv+0x144>
 8000774:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000778:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800077c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000780:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000784:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000788:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800078c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000790:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000794:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000798:	429d      	cmp	r5, r3
 800079a:	bf08      	it	eq
 800079c:	4296      	cmpeq	r6, r2
 800079e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007a2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007a6:	d202      	bcs.n	80007ae <__aeabi_ddiv+0x6e>
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	1ab6      	subs	r6, r6, r2
 80007b0:	eb65 0503 	sbc.w	r5, r5, r3
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007be:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	ebb6 0e02 	subs.w	lr, r6, r2
 800080e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000812:	bf22      	ittt	cs
 8000814:	1ab6      	subcs	r6, r6, r2
 8000816:	4675      	movcs	r5, lr
 8000818:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800081c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000820:	d018      	beq.n	8000854 <__aeabi_ddiv+0x114>
 8000822:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000826:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800082a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000832:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000836:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800083a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083e:	d1c0      	bne.n	80007c2 <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	d10b      	bne.n	800085e <__aeabi_ddiv+0x11e>
 8000846:	ea41 0100 	orr.w	r1, r1, r0
 800084a:	f04f 0000 	mov.w	r0, #0
 800084e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000852:	e7b6      	b.n	80007c2 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000858:	bf04      	itt	eq
 800085a:	4301      	orreq	r1, r0
 800085c:	2000      	moveq	r0, #0
 800085e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000862:	bf88      	it	hi
 8000864:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000868:	f63f aeaf 	bhi.w	80005ca <__aeabi_dmul+0xde>
 800086c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000870:	bf04      	itt	eq
 8000872:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000876:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800087a:	f150 0000 	adcs.w	r0, r0, #0
 800087e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000888:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800088c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000890:	bfc2      	ittt	gt
 8000892:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000896:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800089a:	bd70      	popgt	{r4, r5, r6, pc}
 800089c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008a0:	f04f 0e00 	mov.w	lr, #0
 80008a4:	3c01      	subs	r4, #1
 80008a6:	e690      	b.n	80005ca <__aeabi_dmul+0xde>
 80008a8:	ea45 0e06 	orr.w	lr, r5, r6
 80008ac:	e68d      	b.n	80005ca <__aeabi_dmul+0xde>
 80008ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008b2:	ea94 0f0c 	teq	r4, ip
 80008b6:	bf08      	it	eq
 80008b8:	ea95 0f0c 	teqeq	r5, ip
 80008bc:	f43f af3b 	beq.w	8000736 <__aeabi_dmul+0x24a>
 80008c0:	ea94 0f0c 	teq	r4, ip
 80008c4:	d10a      	bne.n	80008dc <__aeabi_ddiv+0x19c>
 80008c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ca:	f47f af34 	bne.w	8000736 <__aeabi_dmul+0x24a>
 80008ce:	ea95 0f0c 	teq	r5, ip
 80008d2:	f47f af25 	bne.w	8000720 <__aeabi_dmul+0x234>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e72c      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008dc:	ea95 0f0c 	teq	r5, ip
 80008e0:	d106      	bne.n	80008f0 <__aeabi_ddiv+0x1b0>
 80008e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e6:	f43f aefd 	beq.w	80006e4 <__aeabi_dmul+0x1f8>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e722      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f4:	bf18      	it	ne
 80008f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fa:	f47f aec5 	bne.w	8000688 <__aeabi_dmul+0x19c>
 80008fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000902:	f47f af0d 	bne.w	8000720 <__aeabi_dmul+0x234>
 8000906:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800090a:	f47f aeeb 	bne.w	80006e4 <__aeabi_dmul+0x1f8>
 800090e:	e712      	b.n	8000736 <__aeabi_dmul+0x24a>

08000910 <__gedf2>:
 8000910:	f04f 3cff 	mov.w	ip, #4294967295
 8000914:	e006      	b.n	8000924 <__cmpdf2+0x4>
 8000916:	bf00      	nop

08000918 <__ledf2>:
 8000918:	f04f 0c01 	mov.w	ip, #1
 800091c:	e002      	b.n	8000924 <__cmpdf2+0x4>
 800091e:	bf00      	nop

08000920 <__cmpdf2>:
 8000920:	f04f 0c01 	mov.w	ip, #1
 8000924:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000928:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800092c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000930:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000934:	bf18      	it	ne
 8000936:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800093a:	d01b      	beq.n	8000974 <__cmpdf2+0x54>
 800093c:	b001      	add	sp, #4
 800093e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000942:	bf0c      	ite	eq
 8000944:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000948:	ea91 0f03 	teqne	r1, r3
 800094c:	bf02      	ittt	eq
 800094e:	ea90 0f02 	teqeq	r0, r2
 8000952:	2000      	moveq	r0, #0
 8000954:	4770      	bxeq	lr
 8000956:	f110 0f00 	cmn.w	r0, #0
 800095a:	ea91 0f03 	teq	r1, r3
 800095e:	bf58      	it	pl
 8000960:	4299      	cmppl	r1, r3
 8000962:	bf08      	it	eq
 8000964:	4290      	cmpeq	r0, r2
 8000966:	bf2c      	ite	cs
 8000968:	17d8      	asrcs	r0, r3, #31
 800096a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800096e:	f040 0001 	orr.w	r0, r0, #1
 8000972:	4770      	bx	lr
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	d102      	bne.n	8000984 <__cmpdf2+0x64>
 800097e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000982:	d107      	bne.n	8000994 <__cmpdf2+0x74>
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	d1d6      	bne.n	800093c <__cmpdf2+0x1c>
 800098e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000992:	d0d3      	beq.n	800093c <__cmpdf2+0x1c>
 8000994:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <__aeabi_cdrcmple>:
 800099c:	4684      	mov	ip, r0
 800099e:	4610      	mov	r0, r2
 80009a0:	4662      	mov	r2, ip
 80009a2:	468c      	mov	ip, r1
 80009a4:	4619      	mov	r1, r3
 80009a6:	4663      	mov	r3, ip
 80009a8:	e000      	b.n	80009ac <__aeabi_cdcmpeq>
 80009aa:	bf00      	nop

080009ac <__aeabi_cdcmpeq>:
 80009ac:	b501      	push	{r0, lr}
 80009ae:	f7ff ffb7 	bl	8000920 <__cmpdf2>
 80009b2:	2800      	cmp	r0, #0
 80009b4:	bf48      	it	mi
 80009b6:	f110 0f00 	cmnmi.w	r0, #0
 80009ba:	bd01      	pop	{r0, pc}

080009bc <__aeabi_dcmpeq>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff fff4 	bl	80009ac <__aeabi_cdcmpeq>
 80009c4:	bf0c      	ite	eq
 80009c6:	2001      	moveq	r0, #1
 80009c8:	2000      	movne	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmplt>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffea 	bl	80009ac <__aeabi_cdcmpeq>
 80009d8:	bf34      	ite	cc
 80009da:	2001      	movcc	r0, #1
 80009dc:	2000      	movcs	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmple>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffe0 	bl	80009ac <__aeabi_cdcmpeq>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpge>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffce 	bl	800099c <__aeabi_cdrcmple>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpgt>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffc4 	bl	800099c <__aeabi_cdrcmple>
 8000a14:	bf34      	ite	cc
 8000a16:	2001      	movcc	r0, #1
 8000a18:	2000      	movcs	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_dcmpun>:
 8000a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__aeabi_dcmpun+0x10>
 8000a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2e:	d10a      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__aeabi_dcmpun+0x20>
 8000a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a40:	f04f 0000 	mov.w	r0, #0
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0001 	mov.w	r0, #1
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_d2iz>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a54:	d215      	bcs.n	8000a82 <__aeabi_d2iz+0x36>
 8000a56:	d511      	bpl.n	8000a7c <__aeabi_d2iz+0x30>
 8000a58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d912      	bls.n	8000a88 <__aeabi_d2iz+0x3c>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a72:	fa23 f002 	lsr.w	r0, r3, r2
 8000a76:	bf18      	it	ne
 8000a78:	4240      	negne	r0, r0
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a86:	d105      	bne.n	8000a94 <__aeabi_d2iz+0x48>
 8000a88:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	bf08      	it	eq
 8000a8e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_d2uiz>:
 8000a9c:	004a      	lsls	r2, r1, #1
 8000a9e:	d211      	bcs.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa4:	d211      	bcs.n	8000aca <__aeabi_d2uiz+0x2e>
 8000aa6:	d50d      	bpl.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000aac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab0:	d40e      	bmi.n	8000ad0 <__aeabi_d2uiz+0x34>
 8000ab2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000abe:	fa23 f002 	lsr.w	r0, r3, r2
 8000ac2:	4770      	bx	lr
 8000ac4:	f04f 0000 	mov.w	r0, #0
 8000ac8:	4770      	bx	lr
 8000aca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ace:	d102      	bne.n	8000ad6 <__aeabi_d2uiz+0x3a>
 8000ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad4:	4770      	bx	lr
 8000ad6:	f04f 0000 	mov.w	r0, #0
 8000ada:	4770      	bx	lr

08000adc <Ringbuf_init>:

void store_char(unsigned char c, ring_buffer *buffer);


void Ringbuf_init(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  _rx_buffer = &rx_buffer;
 8000ae0:	4b0c      	ldr	r3, [pc, #48]	; (8000b14 <Ringbuf_init+0x38>)
 8000ae2:	4a0d      	ldr	r2, [pc, #52]	; (8000b18 <Ringbuf_init+0x3c>)
 8000ae4:	601a      	str	r2, [r3, #0]
  _tx_buffer = &tx_buffer;
 8000ae6:	4b0d      	ldr	r3, [pc, #52]	; (8000b1c <Ringbuf_init+0x40>)
 8000ae8:	4a0d      	ldr	r2, [pc, #52]	; (8000b20 <Ringbuf_init+0x44>)
 8000aea:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(uart, UART_IT_ERR);
 8000aec:	4b0d      	ldr	r3, [pc, #52]	; (8000b24 <Ringbuf_init+0x48>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	695a      	ldr	r2, [r3, #20]
 8000af2:	4b0c      	ldr	r3, [pc, #48]	; (8000b24 <Ringbuf_init+0x48>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	f042 0201 	orr.w	r2, r2, #1
 8000afa:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(uart, UART_IT_RXNE);
 8000afc:	4b09      	ldr	r3, [pc, #36]	; (8000b24 <Ringbuf_init+0x48>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	68da      	ldr	r2, [r3, #12]
 8000b02:	4b08      	ldr	r3, [pc, #32]	; (8000b24 <Ringbuf_init+0x48>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	f042 0220 	orr.w	r2, r2, #32
 8000b0a:	60da      	str	r2, [r3, #12]
}
 8000b0c:	bf00      	nop
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bc80      	pop	{r7}
 8000b12:	4770      	bx	lr
 8000b14:	200005c0 	.word	0x200005c0
 8000b18:	20000220 	.word	0x20000220
 8000b1c:	200005bc 	.word	0x200005bc
 8000b20:	20000268 	.word	0x20000268
 8000b24:	200005c4 	.word	0x200005c4

08000b28 <store_char>:

void store_char(unsigned char c, ring_buffer *buffer)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b085      	sub	sp, #20
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	4603      	mov	r3, r0
 8000b30:	6039      	str	r1, [r7, #0]
 8000b32:	71fb      	strb	r3, [r7, #7]
  int i = (unsigned int)(buffer->head + 1) % UART_BUFFER_SIZE;
 8000b34:	683b      	ldr	r3, [r7, #0]
 8000b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b38:	3301      	adds	r3, #1
 8000b3a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000b3e:	60fb      	str	r3, [r7, #12]

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if(i != buffer->tail) {
 8000b40:	683b      	ldr	r3, [r7, #0]
 8000b42:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	429a      	cmp	r2, r3
 8000b48:	d007      	beq.n	8000b5a <store_char+0x32>
    buffer->buffer[buffer->head] = c;
 8000b4a:	683b      	ldr	r3, [r7, #0]
 8000b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b4e:	683a      	ldr	r2, [r7, #0]
 8000b50:	79f9      	ldrb	r1, [r7, #7]
 8000b52:	54d1      	strb	r1, [r2, r3]
    buffer->head = i;
 8000b54:	68fa      	ldr	r2, [r7, #12]
 8000b56:	683b      	ldr	r3, [r7, #0]
 8000b58:	641a      	str	r2, [r3, #64]	; 0x40
  }
}
 8000b5a:	bf00      	nop
 8000b5c:	3714      	adds	r7, #20
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bc80      	pop	{r7}
 8000b62:	4770      	bx	lr

08000b64 <Uart_read>:

int Uart_read(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	b083      	sub	sp, #12
 8000b68:	af00      	add	r7, sp, #0
  // if the head isn't ahead of the tail, we don't have any characters
  if(_rx_buffer->head == _rx_buffer->tail)
 8000b6a:	4b10      	ldr	r3, [pc, #64]	; (8000bac <Uart_read+0x48>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b70:	4b0e      	ldr	r3, [pc, #56]	; (8000bac <Uart_read+0x48>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b76:	429a      	cmp	r2, r3
 8000b78:	d102      	bne.n	8000b80 <Uart_read+0x1c>
  {
    return -1;
 8000b7a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b7e:	e010      	b.n	8000ba2 <Uart_read+0x3e>
  }
  else
  {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
 8000b80:	4b0a      	ldr	r3, [pc, #40]	; (8000bac <Uart_read+0x48>)
 8000b82:	681a      	ldr	r2, [r3, #0]
 8000b84:	4b09      	ldr	r3, [pc, #36]	; (8000bac <Uart_read+0x48>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b8a:	5cd3      	ldrb	r3, [r2, r3]
 8000b8c:	71fb      	strb	r3, [r7, #7]
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;
 8000b8e:	4b07      	ldr	r3, [pc, #28]	; (8000bac <Uart_read+0x48>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b94:	1c5a      	adds	r2, r3, #1
 8000b96:	4b05      	ldr	r3, [pc, #20]	; (8000bac <Uart_read+0x48>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000b9e:	645a      	str	r2, [r3, #68]	; 0x44
    return c;
 8000ba0:	79fb      	ldrb	r3, [r7, #7]
  }
}
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	370c      	adds	r7, #12
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bc80      	pop	{r7}
 8000baa:	4770      	bx	lr
 8000bac:	200005c0 	.word	0x200005c0

08000bb0 <IsDataAvailable>:
		__HAL_UART_ENABLE_IT(uart, UART_IT_TXE); // Enable UART transmission interrupt
	}
}

int IsDataAvailable(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  return (uint16_t)(UART_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % UART_BUFFER_SIZE;
 8000bb4:	4b08      	ldr	r3, [pc, #32]	; (8000bd8 <IsDataAvailable+0x28>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bba:	b29a      	uxth	r2, r3
 8000bbc:	4b06      	ldr	r3, [pc, #24]	; (8000bd8 <IsDataAvailable+0x28>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bc2:	b29b      	uxth	r3, r3
 8000bc4:	1ad3      	subs	r3, r2, r3
 8000bc6:	b29b      	uxth	r3, r3
 8000bc8:	3340      	adds	r3, #64	; 0x40
 8000bca:	b29b      	uxth	r3, r3
 8000bcc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bc80      	pop	{r7}
 8000bd6:	4770      	bx	lr
 8000bd8:	200005c0 	.word	0x200005c0

08000bdc <Get_string>:

  while(*s) Uart_write(*s++);
}

void Get_string (char *buffer)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b086      	sub	sp, #24
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
	int index=0;
 8000be4:	2300      	movs	r3, #0
 8000be6:	617b      	str	r3, [r7, #20]

	while (_rx_buffer->tail>_rx_buffer->head)
 8000be8:	e01e      	b.n	8000c28 <Get_string+0x4c>
	{
		if ((_rx_buffer->buffer[_rx_buffer->head-1] == '\n')||((_rx_buffer->head == 0) && (_rx_buffer->buffer[UART_BUFFER_SIZE-1] == '\n')))
 8000bea:	4b27      	ldr	r3, [pc, #156]	; (8000c88 <Get_string+0xac>)
 8000bec:	681a      	ldr	r2, [r3, #0]
 8000bee:	4b26      	ldr	r3, [pc, #152]	; (8000c88 <Get_string+0xac>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf4:	3b01      	subs	r3, #1
 8000bf6:	5cd3      	ldrb	r3, [r2, r3]
 8000bf8:	2b0a      	cmp	r3, #10
 8000bfa:	d00a      	beq.n	8000c12 <Get_string+0x36>
 8000bfc:	4b22      	ldr	r3, [pc, #136]	; (8000c88 <Get_string+0xac>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d110      	bne.n	8000c28 <Get_string+0x4c>
 8000c06:	4b20      	ldr	r3, [pc, #128]	; (8000c88 <Get_string+0xac>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8000c0e:	2b0a      	cmp	r3, #10
 8000c10:	d10a      	bne.n	8000c28 <Get_string+0x4c>
			{
				buffer[index] = Uart_read();
 8000c12:	f7ff ffa7 	bl	8000b64 <Uart_read>
 8000c16:	4601      	mov	r1, r0
 8000c18:	697b      	ldr	r3, [r7, #20]
 8000c1a:	687a      	ldr	r2, [r7, #4]
 8000c1c:	4413      	add	r3, r2
 8000c1e:	b2ca      	uxtb	r2, r1
 8000c20:	701a      	strb	r2, [r3, #0]
				index++;
 8000c22:	697b      	ldr	r3, [r7, #20]
 8000c24:	3301      	adds	r3, #1
 8000c26:	617b      	str	r3, [r7, #20]
	while (_rx_buffer->tail>_rx_buffer->head)
 8000c28:	4b17      	ldr	r3, [pc, #92]	; (8000c88 <Get_string+0xac>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000c2e:	4b16      	ldr	r3, [pc, #88]	; (8000c88 <Get_string+0xac>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c34:	429a      	cmp	r2, r3
 8000c36:	d8d8      	bhi.n	8000bea <Get_string+0xe>
			}
	}
	unsigned int start = _rx_buffer->tail;
 8000c38:	4b13      	ldr	r3, [pc, #76]	; (8000c88 <Get_string+0xac>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c3e:	60fb      	str	r3, [r7, #12]
	unsigned int end = (_rx_buffer->head);
 8000c40:	4b11      	ldr	r3, [pc, #68]	; (8000c88 <Get_string+0xac>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c46:	60bb      	str	r3, [r7, #8]
	if ((_rx_buffer->buffer[end-1] == '\n'))
 8000c48:	4b0f      	ldr	r3, [pc, #60]	; (8000c88 <Get_string+0xac>)
 8000c4a:	681a      	ldr	r2, [r3, #0]
 8000c4c:	68bb      	ldr	r3, [r7, #8]
 8000c4e:	3b01      	subs	r3, #1
 8000c50:	5cd3      	ldrb	r3, [r2, r3]
 8000c52:	2b0a      	cmp	r3, #10
 8000c54:	d114      	bne.n	8000c80 <Get_string+0xa4>
	{

		for (unsigned int i=start; i<end; i++)
 8000c56:	68fb      	ldr	r3, [r7, #12]
 8000c58:	613b      	str	r3, [r7, #16]
 8000c5a:	e00d      	b.n	8000c78 <Get_string+0x9c>
		{
			buffer[index] = Uart_read();
 8000c5c:	f7ff ff82 	bl	8000b64 <Uart_read>
 8000c60:	4601      	mov	r1, r0
 8000c62:	697b      	ldr	r3, [r7, #20]
 8000c64:	687a      	ldr	r2, [r7, #4]
 8000c66:	4413      	add	r3, r2
 8000c68:	b2ca      	uxtb	r2, r1
 8000c6a:	701a      	strb	r2, [r3, #0]
			index++;
 8000c6c:	697b      	ldr	r3, [r7, #20]
 8000c6e:	3301      	adds	r3, #1
 8000c70:	617b      	str	r3, [r7, #20]
		for (unsigned int i=start; i<end; i++)
 8000c72:	693b      	ldr	r3, [r7, #16]
 8000c74:	3301      	adds	r3, #1
 8000c76:	613b      	str	r3, [r7, #16]
 8000c78:	693a      	ldr	r2, [r7, #16]
 8000c7a:	68bb      	ldr	r3, [r7, #8]
 8000c7c:	429a      	cmp	r2, r3
 8000c7e:	d3ed      	bcc.n	8000c5c <Get_string+0x80>
		}
	}
}
 8000c80:	bf00      	nop
 8000c82:	3718      	adds	r7, #24
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	200005c0 	.word	0x200005c0

08000c8c <wait_until>:

int wait_until (char *string, char*buffertostore)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b086      	sub	sp, #24
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
 8000c94:	6039      	str	r1, [r7, #0]
	while (!(IsDataAvailable()));
 8000c96:	bf00      	nop
 8000c98:	f7ff ff8a 	bl	8000bb0 <IsDataAvailable>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d0fa      	beq.n	8000c98 <wait_until+0xc>
	int index=0;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	617b      	str	r3, [r7, #20]

	while (_rx_buffer->tail>_rx_buffer->head)
 8000ca6:	e01e      	b.n	8000ce6 <wait_until+0x5a>
	{
		if ((_rx_buffer->buffer[_rx_buffer->head-1] == '\n')||((_rx_buffer->head == 0) && (_rx_buffer->buffer[UART_BUFFER_SIZE-1] == '\n')))
 8000ca8:	4b28      	ldr	r3, [pc, #160]	; (8000d4c <wait_until+0xc0>)
 8000caa:	681a      	ldr	r2, [r3, #0]
 8000cac:	4b27      	ldr	r3, [pc, #156]	; (8000d4c <wait_until+0xc0>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cb2:	3b01      	subs	r3, #1
 8000cb4:	5cd3      	ldrb	r3, [r2, r3]
 8000cb6:	2b0a      	cmp	r3, #10
 8000cb8:	d00a      	beq.n	8000cd0 <wait_until+0x44>
 8000cba:	4b24      	ldr	r3, [pc, #144]	; (8000d4c <wait_until+0xc0>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d110      	bne.n	8000ce6 <wait_until+0x5a>
 8000cc4:	4b21      	ldr	r3, [pc, #132]	; (8000d4c <wait_until+0xc0>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8000ccc:	2b0a      	cmp	r3, #10
 8000cce:	d10a      	bne.n	8000ce6 <wait_until+0x5a>
			{
				buffertostore[index] = Uart_read();
 8000cd0:	f7ff ff48 	bl	8000b64 <Uart_read>
 8000cd4:	4601      	mov	r1, r0
 8000cd6:	697b      	ldr	r3, [r7, #20]
 8000cd8:	683a      	ldr	r2, [r7, #0]
 8000cda:	4413      	add	r3, r2
 8000cdc:	b2ca      	uxtb	r2, r1
 8000cde:	701a      	strb	r2, [r3, #0]
				index++;
 8000ce0:	697b      	ldr	r3, [r7, #20]
 8000ce2:	3301      	adds	r3, #1
 8000ce4:	617b      	str	r3, [r7, #20]
	while (_rx_buffer->tail>_rx_buffer->head)
 8000ce6:	4b19      	ldr	r3, [pc, #100]	; (8000d4c <wait_until+0xc0>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000cec:	4b17      	ldr	r3, [pc, #92]	; (8000d4c <wait_until+0xc0>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cf2:	429a      	cmp	r2, r3
 8000cf4:	d8d8      	bhi.n	8000ca8 <wait_until+0x1c>
			}
	}

	unsigned int start = _rx_buffer->tail;
 8000cf6:	4b15      	ldr	r3, [pc, #84]	; (8000d4c <wait_until+0xc0>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cfc:	60fb      	str	r3, [r7, #12]
	unsigned int end = (_rx_buffer->head);
 8000cfe:	4b13      	ldr	r3, [pc, #76]	; (8000d4c <wait_until+0xc0>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d04:	60bb      	str	r3, [r7, #8]
	if ((_rx_buffer->buffer[end-1] == '\n'))
 8000d06:	4b11      	ldr	r3, [pc, #68]	; (8000d4c <wait_until+0xc0>)
 8000d08:	681a      	ldr	r2, [r3, #0]
 8000d0a:	68bb      	ldr	r3, [r7, #8]
 8000d0c:	3b01      	subs	r3, #1
 8000d0e:	5cd3      	ldrb	r3, [r2, r3]
 8000d10:	2b0a      	cmp	r3, #10
 8000d12:	d116      	bne.n	8000d42 <wait_until+0xb6>
	{
		for (unsigned int i=start; i<end; i++)
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	613b      	str	r3, [r7, #16]
 8000d18:	e00d      	b.n	8000d36 <wait_until+0xaa>
		{
			buffertostore[index] = Uart_read();
 8000d1a:	f7ff ff23 	bl	8000b64 <Uart_read>
 8000d1e:	4601      	mov	r1, r0
 8000d20:	697b      	ldr	r3, [r7, #20]
 8000d22:	683a      	ldr	r2, [r7, #0]
 8000d24:	4413      	add	r3, r2
 8000d26:	b2ca      	uxtb	r2, r1
 8000d28:	701a      	strb	r2, [r3, #0]
			index++;
 8000d2a:	697b      	ldr	r3, [r7, #20]
 8000d2c:	3301      	adds	r3, #1
 8000d2e:	617b      	str	r3, [r7, #20]
		for (unsigned int i=start; i<end; i++)
 8000d30:	693b      	ldr	r3, [r7, #16]
 8000d32:	3301      	adds	r3, #1
 8000d34:	613b      	str	r3, [r7, #16]
 8000d36:	693a      	ldr	r2, [r7, #16]
 8000d38:	68bb      	ldr	r3, [r7, #8]
 8000d3a:	429a      	cmp	r2, r3
 8000d3c:	d3ed      	bcc.n	8000d1a <wait_until+0x8e>
		}
		return 1;
 8000d3e:	2301      	movs	r3, #1
 8000d40:	e000      	b.n	8000d44 <wait_until+0xb8>
	}
	return 0;
 8000d42:	2300      	movs	r3, #0
}
 8000d44:	4618      	mov	r0, r3
 8000d46:	3718      	adds	r7, #24
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	200005c0 	.word	0x200005c0

08000d50 <Uart_isr>:


void Uart_isr (UART_HandleTypeDef *huart)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b086      	sub	sp, #24
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
	  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	617b      	str	r3, [r7, #20]
	  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	68db      	ldr	r3, [r3, #12]
 8000d66:	613b      	str	r3, [r7, #16]

    /* if DR is not empty and the Rx Int is enabled */
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8000d68:	697b      	ldr	r3, [r7, #20]
 8000d6a:	f003 0320 	and.w	r3, r3, #32
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d013      	beq.n	8000d9a <Uart_isr+0x4a>
 8000d72:	693b      	ldr	r3, [r7, #16]
 8000d74:	f003 0320 	and.w	r3, r3, #32
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d00e      	beq.n	8000d9a <Uart_isr+0x4a>
    	    	      * @note   TC flag can be also cleared by software sequence: a read operation to
    	    	      *          USART_SR register followed by a write operation to USART_DR register.
    	    	      * @note   TXE flag is cleared only by a write to the USART_DR register.

    	 *********************/
		huart->Instance->SR;                       /* Read status register */
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	681b      	ldr	r3, [r3, #0]
        unsigned char c = huart->Instance->DR;     /* Read data register */
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	685b      	ldr	r3, [r3, #4]
 8000d88:	73fb      	strb	r3, [r7, #15]
        store_char (c, _rx_buffer);  // store data in buffer
 8000d8a:	4b1c      	ldr	r3, [pc, #112]	; (8000dfc <Uart_isr+0xac>)
 8000d8c:	681a      	ldr	r2, [r3, #0]
 8000d8e:	7bfb      	ldrb	r3, [r7, #15]
 8000d90:	4611      	mov	r1, r2
 8000d92:	4618      	mov	r0, r3
 8000d94:	f7ff fec8 	bl	8000b28 <store_char>
        return;
 8000d98:	e02c      	b.n	8000df4 <Uart_isr+0xa4>
    }

    /*If interrupt is caused due to Transmit Data Register Empty */
    if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8000d9a:	697b      	ldr	r3, [r7, #20]
 8000d9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d027      	beq.n	8000df4 <Uart_isr+0xa4>
 8000da4:	693b      	ldr	r3, [r7, #16]
 8000da6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d022      	beq.n	8000df4 <Uart_isr+0xa4>
    {
    	if(tx_buffer.head == tx_buffer.tail)
 8000dae:	4b14      	ldr	r3, [pc, #80]	; (8000e00 <Uart_isr+0xb0>)
 8000db0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000db2:	4b13      	ldr	r3, [pc, #76]	; (8000e00 <Uart_isr+0xb0>)
 8000db4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000db6:	429a      	cmp	r2, r3
 8000db8:	d108      	bne.n	8000dcc <Uart_isr+0x7c>
    	    {
    	      // Buffer empty, so disable interrupts
    	      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	68da      	ldr	r2, [r3, #12]
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000dc8:	60da      	str	r2, [r3, #12]

    	      huart->Instance->SR;
    	      huart->Instance->DR = c;

    	    }
    	return;
 8000dca:	e012      	b.n	8000df2 <Uart_isr+0xa2>
    	      unsigned char c = tx_buffer.buffer[tx_buffer.tail];
 8000dcc:	4b0c      	ldr	r3, [pc, #48]	; (8000e00 <Uart_isr+0xb0>)
 8000dce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dd0:	4a0b      	ldr	r2, [pc, #44]	; (8000e00 <Uart_isr+0xb0>)
 8000dd2:	5cd3      	ldrb	r3, [r2, r3]
 8000dd4:	73bb      	strb	r3, [r7, #14]
    	      tx_buffer.tail = (tx_buffer.tail + 1) % UART_BUFFER_SIZE;
 8000dd6:	4b0a      	ldr	r3, [pc, #40]	; (8000e00 <Uart_isr+0xb0>)
 8000dd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dda:	3301      	adds	r3, #1
 8000ddc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000de0:	4a07      	ldr	r2, [pc, #28]	; (8000e00 <Uart_isr+0xb0>)
 8000de2:	6453      	str	r3, [r2, #68]	; 0x44
    	      huart->Instance->SR;
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	681b      	ldr	r3, [r3, #0]
    	      huart->Instance->DR = c;
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	7bba      	ldrb	r2, [r7, #14]
 8000df0:	605a      	str	r2, [r3, #4]
    	return;
 8000df2:	bf00      	nop
    }
}
 8000df4:	3718      	adds	r7, #24
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	200005c0 	.word	0x200005c0
 8000e00:	20000268 	.word	0x20000268

08000e04 <initADS>:

// -------------------------------------------------------------
// Code to configure and to communicate with ADS1256 through SPI
// -------------------------------------------------------------

void initADS(void) {
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b082      	sub	sp, #8
 8000e08:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SPI1_SYNC_GPIO_Port, SPI1_SYNC_Pin, 0); // Put RST pin to LOW
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	2102      	movs	r1, #2
 8000e0e:	4851      	ldr	r0, [pc, #324]	; (8000f54 <initADS+0x150>)
 8000e10:	f003 f98c 	bl	800412c <HAL_GPIO_WritePin>
	HAL_Delay(10); // LOW at least 4 clock cycles of onboard clock. 100 microseconds is enough
 8000e14:	200a      	movs	r0, #10
 8000e16:	f002 fed3 	bl	8003bc0 <HAL_Delay>
	HAL_GPIO_WritePin(SPI1_SYNC_GPIO_Port, SPI1_SYNC_Pin, 1); // Put RST pin to HIGH
 8000e1a:	2201      	movs	r2, #1
 8000e1c:	2102      	movs	r1, #2
 8000e1e:	484d      	ldr	r0, [pc, #308]	; (8000f54 <initADS+0x150>)
 8000e20:	f003 f984 	bl	800412c <HAL_GPIO_WritePin>

	HAL_Delay(1000); // Waits approximately 1 second to continue the process
 8000e24:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e28:	f002 feca 	bl	8003bc0 <HAL_Delay>

	// Reseting the ADS1256
	ADS1256_Reset();
 8000e2c:	f000 f8cc 	bl	8000fc8 <ADS1256_Reset>

	// Let the system settle. According to the datasheet, it takes up to 800.4ms. (datasheet pg 24)
	HAL_Delay(1000);
 8000e30:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e34:	f002 fec4 	bl	8003bc0 <HAL_Delay>

	// The following command activates the entrance buffer. Theoretically, it allows more stable readings
	// SetRegisterValue(STATUS,0b00110010);
	uint8_t RegisterValue = GetRegisterValue(STATUS);
 8000e38:	2000      	movs	r0, #0
 8000e3a:	f000 f8f5 	bl	8001028 <GetRegisterValue>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	71fb      	strb	r3, [r7, #7]
	sprintf(uart_buffer, "%d\n", RegisterValue);
 8000e42:	79fb      	ldrb	r3, [r7, #7]
 8000e44:	461a      	mov	r2, r3
 8000e46:	4944      	ldr	r1, [pc, #272]	; (8000f58 <initADS+0x154>)
 8000e48:	4844      	ldr	r0, [pc, #272]	; (8000f5c <initADS+0x158>)
 8000e4a:	f009 ff85 	bl	800ad58 <siprintf>
	send_uart(uart_buffer);
 8000e4e:	4843      	ldr	r0, [pc, #268]	; (8000f5c <initADS+0x158>)
 8000e50:	f000 ff7a 	bl	8001d48 <send_uart>

	//next set the mux register
	//we are only trying to read differential values from pins 0 and 1. your needs may vary.
	//this is the default setting so we can just reset it
	SetRegisterValue(MUX, 0b00001000); //set the mux register
 8000e54:	2108      	movs	r1, #8
 8000e56:	2001      	movs	r0, #1
 8000e58:	f000 f952 	bl	8001100 <SetRegisterValue>
	//B00001000 for single ended measurement

	//now set the ADCON register
	//set the PGA to 64x
	//you need to adjust the constants for the other ones according to datasheet pg 31 if you need other values
	SetRegisterValue(ADCON, PGA_1); //set the adcon register
 8000e5c:	2120      	movs	r1, #32
 8000e5e:	2002      	movs	r0, #2
 8000e60:	f000 f94e 	bl	8001100 <SetRegisterValue>

	//next set the data rate
	SetRegisterValue(DRATE, DR_1000); //set the drate register
 8000e64:	21a1      	movs	r1, #161	; 0xa1
 8000e66:	2003      	movs	r0, #3
 8000e68:	f000 f94a 	bl	8001100 <SetRegisterValue>
	//we're going to ignore the GPIO for now...

	//lastly, we need to calibrate the system

	//let it settle
	HAL_Delay(2000);
 8000e6c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000e70:	f002 fea6 	bl	8003bc0 <HAL_Delay>

	//then do calibration
	SendCMD(SELFCAL); //send the calibration command
 8000e74:	20f0      	movs	r0, #240	; 0xf0
 8000e76:	f000 f917 	bl	80010a8 <SendCMD>

	//then print out the values
	HAL_Delay(5);
 8000e7a:	2005      	movs	r0, #5
 8000e7c:	f002 fea0 	bl	8003bc0 <HAL_Delay>

	send_uart("\nOFC0: ");
 8000e80:	4837      	ldr	r0, [pc, #220]	; (8000f60 <initADS+0x15c>)
 8000e82:	f000 ff61 	bl	8001d48 <send_uart>
	RegisterValue = GetRegisterValue(OFC0);
 8000e86:	2005      	movs	r0, #5
 8000e88:	f000 f8ce 	bl	8001028 <GetRegisterValue>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	71fb      	strb	r3, [r7, #7]
	sprintf(uart_buffer, "%d\n", RegisterValue);
 8000e90:	79fb      	ldrb	r3, [r7, #7]
 8000e92:	461a      	mov	r2, r3
 8000e94:	4930      	ldr	r1, [pc, #192]	; (8000f58 <initADS+0x154>)
 8000e96:	4831      	ldr	r0, [pc, #196]	; (8000f5c <initADS+0x158>)
 8000e98:	f009 ff5e 	bl	800ad58 <siprintf>
	send_uart(uart_buffer);
 8000e9c:	482f      	ldr	r0, [pc, #188]	; (8000f5c <initADS+0x158>)
 8000e9e:	f000 ff53 	bl	8001d48 <send_uart>
	send_uart("\nOFC1: ");
 8000ea2:	4830      	ldr	r0, [pc, #192]	; (8000f64 <initADS+0x160>)
 8000ea4:	f000 ff50 	bl	8001d48 <send_uart>
	RegisterValue = GetRegisterValue(OFC1);
 8000ea8:	2006      	movs	r0, #6
 8000eaa:	f000 f8bd 	bl	8001028 <GetRegisterValue>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	71fb      	strb	r3, [r7, #7]
	sprintf(uart_buffer, "%d\n", RegisterValue);
 8000eb2:	79fb      	ldrb	r3, [r7, #7]
 8000eb4:	461a      	mov	r2, r3
 8000eb6:	4928      	ldr	r1, [pc, #160]	; (8000f58 <initADS+0x154>)
 8000eb8:	4828      	ldr	r0, [pc, #160]	; (8000f5c <initADS+0x158>)
 8000eba:	f009 ff4d 	bl	800ad58 <siprintf>
	send_uart(uart_buffer);
 8000ebe:	4827      	ldr	r0, [pc, #156]	; (8000f5c <initADS+0x158>)
 8000ec0:	f000 ff42 	bl	8001d48 <send_uart>
	send_uart("\nOFC2: ");
 8000ec4:	4828      	ldr	r0, [pc, #160]	; (8000f68 <initADS+0x164>)
 8000ec6:	f000 ff3f 	bl	8001d48 <send_uart>
	RegisterValue = GetRegisterValue(OFC2);
 8000eca:	2007      	movs	r0, #7
 8000ecc:	f000 f8ac 	bl	8001028 <GetRegisterValue>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	71fb      	strb	r3, [r7, #7]
	sprintf(uart_buffer, "%d\n", RegisterValue);
 8000ed4:	79fb      	ldrb	r3, [r7, #7]
 8000ed6:	461a      	mov	r2, r3
 8000ed8:	491f      	ldr	r1, [pc, #124]	; (8000f58 <initADS+0x154>)
 8000eda:	4820      	ldr	r0, [pc, #128]	; (8000f5c <initADS+0x158>)
 8000edc:	f009 ff3c 	bl	800ad58 <siprintf>
	send_uart(uart_buffer);
 8000ee0:	481e      	ldr	r0, [pc, #120]	; (8000f5c <initADS+0x158>)
 8000ee2:	f000 ff31 	bl	8001d48 <send_uart>
	send_uart("\nFSC0: ");
 8000ee6:	4821      	ldr	r0, [pc, #132]	; (8000f6c <initADS+0x168>)
 8000ee8:	f000 ff2e 	bl	8001d48 <send_uart>
	RegisterValue = GetRegisterValue(FSC0);
 8000eec:	2008      	movs	r0, #8
 8000eee:	f000 f89b 	bl	8001028 <GetRegisterValue>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	71fb      	strb	r3, [r7, #7]
	sprintf(uart_buffer, "%d\n", RegisterValue);
 8000ef6:	79fb      	ldrb	r3, [r7, #7]
 8000ef8:	461a      	mov	r2, r3
 8000efa:	4917      	ldr	r1, [pc, #92]	; (8000f58 <initADS+0x154>)
 8000efc:	4817      	ldr	r0, [pc, #92]	; (8000f5c <initADS+0x158>)
 8000efe:	f009 ff2b 	bl	800ad58 <siprintf>
	send_uart(uart_buffer);
 8000f02:	4816      	ldr	r0, [pc, #88]	; (8000f5c <initADS+0x158>)
 8000f04:	f000 ff20 	bl	8001d48 <send_uart>
	send_uart("\nFSC1: ");
 8000f08:	4819      	ldr	r0, [pc, #100]	; (8000f70 <initADS+0x16c>)
 8000f0a:	f000 ff1d 	bl	8001d48 <send_uart>
	RegisterValue = GetRegisterValue(FSC1);
 8000f0e:	2009      	movs	r0, #9
 8000f10:	f000 f88a 	bl	8001028 <GetRegisterValue>
 8000f14:	4603      	mov	r3, r0
 8000f16:	71fb      	strb	r3, [r7, #7]
	sprintf(uart_buffer, "%d\n", RegisterValue);
 8000f18:	79fb      	ldrb	r3, [r7, #7]
 8000f1a:	461a      	mov	r2, r3
 8000f1c:	490e      	ldr	r1, [pc, #56]	; (8000f58 <initADS+0x154>)
 8000f1e:	480f      	ldr	r0, [pc, #60]	; (8000f5c <initADS+0x158>)
 8000f20:	f009 ff1a 	bl	800ad58 <siprintf>
	send_uart(uart_buffer);
 8000f24:	480d      	ldr	r0, [pc, #52]	; (8000f5c <initADS+0x158>)
 8000f26:	f000 ff0f 	bl	8001d48 <send_uart>
	send_uart("\nFSC2: ");
 8000f2a:	4812      	ldr	r0, [pc, #72]	; (8000f74 <initADS+0x170>)
 8000f2c:	f000 ff0c 	bl	8001d48 <send_uart>
	RegisterValue = GetRegisterValue(FSC2);
 8000f30:	200a      	movs	r0, #10
 8000f32:	f000 f879 	bl	8001028 <GetRegisterValue>
 8000f36:	4603      	mov	r3, r0
 8000f38:	71fb      	strb	r3, [r7, #7]
	sprintf(uart_buffer, "%d\n", RegisterValue);
 8000f3a:	79fb      	ldrb	r3, [r7, #7]
 8000f3c:	461a      	mov	r2, r3
 8000f3e:	4906      	ldr	r1, [pc, #24]	; (8000f58 <initADS+0x154>)
 8000f40:	4806      	ldr	r0, [pc, #24]	; (8000f5c <initADS+0x158>)
 8000f42:	f009 ff09 	bl	800ad58 <siprintf>
	send_uart(uart_buffer);
 8000f46:	4805      	ldr	r0, [pc, #20]	; (8000f5c <initADS+0x158>)
 8000f48:	f000 fefe 	bl	8001d48 <send_uart>
}
 8000f4c:	bf00      	nop
 8000f4e:	3708      	adds	r7, #8
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	40010c00 	.word	0x40010c00
 8000f58:	0800d208 	.word	0x0800d208
 8000f5c:	20000604 	.word	0x20000604
 8000f60:	0800d20c 	.word	0x0800d20c
 8000f64:	0800d214 	.word	0x0800d214
 8000f68:	0800d21c 	.word	0x0800d21c
 8000f6c:	0800d224 	.word	0x0800d224
 8000f70:	0800d22c 	.word	0x0800d22c
 8000f74:	0800d234 	.word	0x0800d234

08000f78 <waitforDRDY>:

// -------------------------------------------------------------
// Some cool interruptions
// -------------------------------------------------------------

void waitforDRDY(void) {
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
	while (DRDY_state) {
 8000f7c:	e000      	b.n	8000f80 <waitforDRDY+0x8>
		continue;
 8000f7e:	bf00      	nop
	while (DRDY_state) {
 8000f80:	4b07      	ldr	r3, [pc, #28]	; (8000fa0 <waitforDRDY+0x28>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d1fa      	bne.n	8000f7e <waitforDRDY+0x6>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f88:	b672      	cpsid	i
}
 8000f8a:	bf00      	nop
	}
	__disable_irq();
	DRDY_state = 1;
 8000f8c:	4b04      	ldr	r3, [pc, #16]	; (8000fa0 <waitforDRDY+0x28>)
 8000f8e:	2201      	movs	r2, #1
 8000f90:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000f92:	b662      	cpsie	i
}
 8000f94:	bf00      	nop
	__enable_irq();
}
 8000f96:	bf00      	nop
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bc80      	pop	{r7}
 8000f9c:	4770      	bx	lr
 8000f9e:	bf00      	nop
 8000fa0:	20000000 	.word	0x20000000

08000fa4 <HAL_GPIO_EXTI_Callback>:
// Interrupt function
void DRDY_Interuppt(void) {
	DRDY_state = 0;
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000fa4:	b480      	push	{r7}
 8000fa6:	b083      	sub	sp, #12
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	4603      	mov	r3, r0
 8000fac:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == SPI1_RDY_Pin) {
 8000fae:	88fb      	ldrh	r3, [r7, #6]
 8000fb0:	2b01      	cmp	r3, #1
 8000fb2:	d102      	bne.n	8000fba <HAL_GPIO_EXTI_Callback+0x16>
		// Write your code here
		DRDY_state = 0;
 8000fb4:	4b03      	ldr	r3, [pc, #12]	; (8000fc4 <HAL_GPIO_EXTI_Callback+0x20>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	601a      	str	r2, [r3, #0]
	}
}
 8000fba:	bf00      	nop
 8000fbc:	370c      	adds	r7, #12
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bc80      	pop	{r7}
 8000fc2:	4770      	bx	lr
 8000fc4:	20000000 	.word	0x20000000

08000fc8 <ADS1256_Reset>:

// -------------------------------------------------------------
// Function to reset the ADS1256
// -------------------------------------------------------------

void ADS1256_Reset(void) {
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SPI1_SYNC_GPIO_Port, SPI1_SYNC_Pin, 0);
 8000fcc:	2200      	movs	r2, #0
 8000fce:	2102      	movs	r1, #2
 8000fd0:	4812      	ldr	r0, [pc, #72]	; (800101c <ADS1256_Reset+0x54>)
 8000fd2:	f003 f8ab 	bl	800412c <HAL_GPIO_WritePin>
	delayMicroseconds(10);
 8000fd6:	200a      	movs	r0, #10
 8000fd8:	f002 faaa 	bl	8003530 <delayMicroseconds>
	exchange_buffer[0] = (char*) RESET1;
 8000fdc:	4b10      	ldr	r3, [pc, #64]	; (8001020 <ADS1256_Reset+0x58>)
 8000fde:	22fe      	movs	r2, #254	; 0xfe
 8000fe0:	601a      	str	r2, [r3, #0]
	HAL_SPI_Transmit(&hspi1, (uint8_t*) exchange_buffer, 1, 100); //Reset
 8000fe2:	2364      	movs	r3, #100	; 0x64
 8000fe4:	2201      	movs	r2, #1
 8000fe6:	490e      	ldr	r1, [pc, #56]	; (8001020 <ADS1256_Reset+0x58>)
 8000fe8:	480e      	ldr	r0, [pc, #56]	; (8001024 <ADS1256_Reset+0x5c>)
 8000fea:	f003 feb1 	bl	8004d50 <HAL_SPI_Transmit>
	HAL_Delay(2); //Minimum 0.6ms required for Reset to finish.
 8000fee:	2002      	movs	r0, #2
 8000ff0:	f002 fde6 	bl	8003bc0 <HAL_Delay>
	exchange_buffer[0] = (char*) SDATAC;
 8000ff4:	4b0a      	ldr	r3, [pc, #40]	; (8001020 <ADS1256_Reset+0x58>)
 8000ff6:	220f      	movs	r2, #15
 8000ff8:	601a      	str	r2, [r3, #0]
	HAL_SPI_Transmit(&hspi1, (uint8_t*) exchange_buffer, 1, 100); //Issue SDATAC
 8000ffa:	2364      	movs	r3, #100	; 0x64
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	4908      	ldr	r1, [pc, #32]	; (8001020 <ADS1256_Reset+0x58>)
 8001000:	4808      	ldr	r0, [pc, #32]	; (8001024 <ADS1256_Reset+0x5c>)
 8001002:	f003 fea5 	bl	8004d50 <HAL_SPI_Transmit>
	delayMicroseconds(100);
 8001006:	2064      	movs	r0, #100	; 0x64
 8001008:	f002 fa92 	bl	8003530 <delayMicroseconds>
	HAL_GPIO_WritePin(SPI1_SYNC_GPIO_Port, SPI1_SYNC_Pin, 1);
 800100c:	2201      	movs	r2, #1
 800100e:	2102      	movs	r1, #2
 8001010:	4802      	ldr	r0, [pc, #8]	; (800101c <ADS1256_Reset+0x54>)
 8001012:	f003 f88b 	bl	800412c <HAL_GPIO_WritePin>
}
 8001016:	bf00      	nop
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	40010c00 	.word	0x40010c00
 8001020:	2000069c 	.word	0x2000069c
 8001024:	20000644 	.word	0x20000644

08001028 <GetRegisterValue>:

// -------------------------------------------------------------
// Function to get the value of a given register
// -------------------------------------------------------------

uint8_t GetRegisterValue(uint8_t regAdress) {
 8001028:	b580      	push	{r7, lr}
 800102a:	b084      	sub	sp, #16
 800102c:	af00      	add	r7, sp, #0
 800102e:	4603      	mov	r3, r0
 8001030:	71fb      	strb	r3, [r7, #7]
	uint8_t bufr;
	HAL_GPIO_WritePin(SPI1_NCS_GPIO_Port, SPI1_NCS_Pin, 0);
 8001032:	2200      	movs	r2, #0
 8001034:	2110      	movs	r1, #16
 8001036:	4819      	ldr	r0, [pc, #100]	; (800109c <GetRegisterValue+0x74>)
 8001038:	f003 f878 	bl	800412c <HAL_GPIO_WritePin>
	delayMicroseconds(10);
 800103c:	200a      	movs	r0, #10
 800103e:	f002 fa77 	bl	8003530 <delayMicroseconds>
	exchange_buffer[0] = (char*) (RREG | regAdress);
 8001042:	79fb      	ldrb	r3, [r7, #7]
 8001044:	f043 0310 	orr.w	r3, r3, #16
 8001048:	b2db      	uxtb	r3, r3
 800104a:	461a      	mov	r2, r3
 800104c:	4b14      	ldr	r3, [pc, #80]	; (80010a0 <GetRegisterValue+0x78>)
 800104e:	601a      	str	r2, [r3, #0]
	HAL_SPI_Transmit(&hspi1, (uint8_t*) exchange_buffer, 1, 100);
 8001050:	2364      	movs	r3, #100	; 0x64
 8001052:	2201      	movs	r2, #1
 8001054:	4912      	ldr	r1, [pc, #72]	; (80010a0 <GetRegisterValue+0x78>)
 8001056:	4813      	ldr	r0, [pc, #76]	; (80010a4 <GetRegisterValue+0x7c>)
 8001058:	f003 fe7a 	bl	8004d50 <HAL_SPI_Transmit>
	exchange_buffer[0] = (char*) 0x00;
 800105c:	4b10      	ldr	r3, [pc, #64]	; (80010a0 <GetRegisterValue+0x78>)
 800105e:	2200      	movs	r2, #0
 8001060:	601a      	str	r2, [r3, #0]
	HAL_SPI_Transmit(&hspi1, (uint8_t*) exchange_buffer, 1, 100); // send 2nd command byte, read only one register
 8001062:	2364      	movs	r3, #100	; 0x64
 8001064:	2201      	movs	r2, #1
 8001066:	490e      	ldr	r1, [pc, #56]	; (80010a0 <GetRegisterValue+0x78>)
 8001068:	480e      	ldr	r0, [pc, #56]	; (80010a4 <GetRegisterValue+0x7c>)
 800106a:	f003 fe71 	bl	8004d50 <HAL_SPI_Transmit>
	delayMicroseconds(10);
 800106e:	200a      	movs	r0, #10
 8001070:	f002 fa5e 	bl	8003530 <delayMicroseconds>
	HAL_SPI_Receive(&hspi1, &bufr, 1, 100); // Read the 3 bytes transmitted by the ADS1256
 8001074:	f107 010f 	add.w	r1, r7, #15
 8001078:	2364      	movs	r3, #100	; 0x64
 800107a:	2201      	movs	r2, #1
 800107c:	4809      	ldr	r0, [pc, #36]	; (80010a4 <GetRegisterValue+0x7c>)
 800107e:	f003 ffa3 	bl	8004fc8 <HAL_SPI_Receive>
	delayMicroseconds(10);
 8001082:	200a      	movs	r0, #10
 8001084:	f002 fa54 	bl	8003530 <delayMicroseconds>
	HAL_GPIO_WritePin(SPI1_NCS_GPIO_Port, SPI1_NCS_Pin, 1);
 8001088:	2201      	movs	r2, #1
 800108a:	2110      	movs	r1, #16
 800108c:	4803      	ldr	r0, [pc, #12]	; (800109c <GetRegisterValue+0x74>)
 800108e:	f003 f84d 	bl	800412c <HAL_GPIO_WritePin>
	return bufr;
 8001092:	7bfb      	ldrb	r3, [r7, #15]
//
}
 8001094:	4618      	mov	r0, r3
 8001096:	3710      	adds	r7, #16
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	40010800 	.word	0x40010800
 80010a0:	2000069c 	.word	0x2000069c
 80010a4:	20000644 	.word	0x20000644

080010a8 <SendCMD>:

// -------------------------------------------------------------
// Sending commands to ADS1256
// -------------------------------------------------------------

void SendCMD(uint8_t command) {
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	4603      	mov	r3, r0
 80010b0:	71fb      	strb	r3, [r7, #7]
	waitforDRDY();
 80010b2:	f7ff ff61 	bl	8000f78 <waitforDRDY>
	HAL_GPIO_WritePin(SPI1_NCS_GPIO_Port, SPI1_NCS_Pin, 0);
 80010b6:	2200      	movs	r2, #0
 80010b8:	2110      	movs	r1, #16
 80010ba:	480e      	ldr	r0, [pc, #56]	; (80010f4 <SendCMD+0x4c>)
 80010bc:	f003 f836 	bl	800412c <HAL_GPIO_WritePin>
	delayMicroseconds(10);
 80010c0:	200a      	movs	r0, #10
 80010c2:	f002 fa35 	bl	8003530 <delayMicroseconds>
	exchange_buffer[0] = (char*) command;
 80010c6:	79fb      	ldrb	r3, [r7, #7]
 80010c8:	461a      	mov	r2, r3
 80010ca:	4b0b      	ldr	r3, [pc, #44]	; (80010f8 <SendCMD+0x50>)
 80010cc:	601a      	str	r2, [r3, #0]
	HAL_SPI_Transmit(&hspi1, (uint8_t*) exchange_buffer, 1, 100);
 80010ce:	2364      	movs	r3, #100	; 0x64
 80010d0:	2201      	movs	r2, #1
 80010d2:	4909      	ldr	r1, [pc, #36]	; (80010f8 <SendCMD+0x50>)
 80010d4:	4809      	ldr	r0, [pc, #36]	; (80010fc <SendCMD+0x54>)
 80010d6:	f003 fe3b 	bl	8004d50 <HAL_SPI_Transmit>
	delayMicroseconds(10);
 80010da:	200a      	movs	r0, #10
 80010dc:	f002 fa28 	bl	8003530 <delayMicroseconds>
	HAL_GPIO_WritePin(SPI1_NCS_GPIO_Port, SPI1_NCS_Pin, 1);
 80010e0:	2201      	movs	r2, #1
 80010e2:	2110      	movs	r1, #16
 80010e4:	4803      	ldr	r0, [pc, #12]	; (80010f4 <SendCMD+0x4c>)
 80010e6:	f003 f821 	bl	800412c <HAL_GPIO_WritePin>
}
 80010ea:	bf00      	nop
 80010ec:	3708      	adds	r7, #8
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	40010800 	.word	0x40010800
 80010f8:	2000069c 	.word	0x2000069c
 80010fc:	20000644 	.word	0x20000644

08001100 <SetRegisterValue>:

// -------------------------------------------------------------
// Writing certain values to ADS1256 registers
// -------------------------------------------------------------

void SetRegisterValue(uint8_t regAdress, uint8_t regValue) {
 8001100:	b580      	push	{r7, lr}
 8001102:	b094      	sub	sp, #80	; 0x50
 8001104:	af00      	add	r7, sp, #0
 8001106:	4603      	mov	r3, r0
 8001108:	460a      	mov	r2, r1
 800110a:	71fb      	strb	r3, [r7, #7]
 800110c:	4613      	mov	r3, r2
 800110e:	71bb      	strb	r3, [r7, #6]

	uint8_t regValuePre = GetRegisterValue(regAdress);
 8001110:	79fb      	ldrb	r3, [r7, #7]
 8001112:	4618      	mov	r0, r3
 8001114:	f7ff ff88 	bl	8001028 <GetRegisterValue>
 8001118:	4603      	mov	r3, r0
 800111a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
//	send_uart("Cheguei aqui feraaaa!\n");
	HAL_Delay(10);
 800111e:	200a      	movs	r0, #10
 8001120:	f002 fd4e 	bl	8003bc0 <HAL_Delay>
	if (regValue != regValuePre) {
 8001124:	79bb      	ldrb	r3, [r7, #6]
 8001126:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800112a:	429a      	cmp	r2, r3
 800112c:	d04f      	beq.n	80011ce <SetRegisterValue+0xce>
		//digitalWrite(_START, HIGH);
		delayMicroseconds(10);
 800112e:	200a      	movs	r0, #10
 8001130:	f002 f9fe 	bl	8003530 <delayMicroseconds>
//		send_uart("E entrei aqui!\n");
		waitforDRDY(); // Does it work?
 8001134:	f7ff ff20 	bl	8000f78 <waitforDRDY>
		HAL_GPIO_WritePin(SPI1_NCS_GPIO_Port, SPI1_NCS_Pin, 0);
 8001138:	2200      	movs	r2, #0
 800113a:	2110      	movs	r1, #16
 800113c:	4826      	ldr	r0, [pc, #152]	; (80011d8 <SetRegisterValue+0xd8>)
 800113e:	f002 fff5 	bl	800412c <HAL_GPIO_WritePin>
		delayMicroseconds(10);
 8001142:	200a      	movs	r0, #10
 8001144:	f002 f9f4 	bl	8003530 <delayMicroseconds>
		exchange_buffer[0] = (char*) (WREG | regAdress);
 8001148:	79fb      	ldrb	r3, [r7, #7]
 800114a:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 800114e:	b2db      	uxtb	r3, r3
 8001150:	461a      	mov	r2, r3
 8001152:	4b22      	ldr	r3, [pc, #136]	; (80011dc <SetRegisterValue+0xdc>)
 8001154:	601a      	str	r2, [r3, #0]
		HAL_SPI_Transmit(&hspi1, (uint8_t*) exchange_buffer, 1, 100); // 1st write command byte is sent with the register to be written on
 8001156:	2364      	movs	r3, #100	; 0x64
 8001158:	2201      	movs	r2, #1
 800115a:	4920      	ldr	r1, [pc, #128]	; (80011dc <SetRegisterValue+0xdc>)
 800115c:	4820      	ldr	r0, [pc, #128]	; (80011e0 <SetRegisterValue+0xe0>)
 800115e:	f003 fdf7 	bl	8004d50 <HAL_SPI_Transmit>
		exchange_buffer[0] = (char*) 0x00;
 8001162:	4b1e      	ldr	r3, [pc, #120]	; (80011dc <SetRegisterValue+0xdc>)
 8001164:	2200      	movs	r2, #0
 8001166:	601a      	str	r2, [r3, #0]
		HAL_SPI_Transmit(&hspi1, (uint8_t*) exchange_buffer, 1, 100); // 2nd command byte, write only one register
 8001168:	2364      	movs	r3, #100	; 0x64
 800116a:	2201      	movs	r2, #1
 800116c:	491b      	ldr	r1, [pc, #108]	; (80011dc <SetRegisterValue+0xdc>)
 800116e:	481c      	ldr	r0, [pc, #112]	; (80011e0 <SetRegisterValue+0xe0>)
 8001170:	f003 fdee 	bl	8004d50 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1, &regValue, sizeof(regValue), 100); // write data (1 Byte) for the register
 8001174:	1db9      	adds	r1, r7, #6
 8001176:	2364      	movs	r3, #100	; 0x64
 8001178:	2201      	movs	r2, #1
 800117a:	4819      	ldr	r0, [pc, #100]	; (80011e0 <SetRegisterValue+0xe0>)
 800117c:	f003 fde8 	bl	8004d50 <HAL_SPI_Transmit>
		delayMicroseconds(10);
 8001180:	200a      	movs	r0, #10
 8001182:	f002 f9d5 	bl	8003530 <delayMicroseconds>
		HAL_GPIO_WritePin(SPI1_NCS_GPIO_Port, SPI1_NCS_Pin, 1);
 8001186:	2201      	movs	r2, #1
 8001188:	2110      	movs	r1, #16
 800118a:	4813      	ldr	r0, [pc, #76]	; (80011d8 <SetRegisterValue+0xd8>)
 800118c:	f002 ffce 	bl	800412c <HAL_GPIO_WritePin>
		//digitalWrite(_START, LOW);
		if (regValue != GetRegisterValue(regAdress)) { //Check if write was succesfull
 8001190:	79fb      	ldrb	r3, [r7, #7]
 8001192:	4618      	mov	r0, r3
 8001194:	f7ff ff48 	bl	8001028 <GetRegisterValue>
 8001198:	4603      	mov	r3, r0
 800119a:	461a      	mov	r2, r3
 800119c:	79bb      	ldrb	r3, [r7, #6]
 800119e:	429a      	cmp	r2, r3
 80011a0:	d012      	beq.n	80011c8 <SetRegisterValue+0xc8>
			send_uart("Escrevendo registrador 0x");
 80011a2:	4810      	ldr	r0, [pc, #64]	; (80011e4 <SetRegisterValue+0xe4>)
 80011a4:	f000 fdd0 	bl	8001d48 <send_uart>
			char regAddress_char[64];
			sprintf(regAddress_char, "%d", regAdress);
 80011a8:	79fa      	ldrb	r2, [r7, #7]
 80011aa:	f107 030c 	add.w	r3, r7, #12
 80011ae:	490e      	ldr	r1, [pc, #56]	; (80011e8 <SetRegisterValue+0xe8>)
 80011b0:	4618      	mov	r0, r3
 80011b2:	f009 fdd1 	bl	800ad58 <siprintf>
			send_uart(regAddress_char);
 80011b6:	f107 030c 	add.w	r3, r7, #12
 80011ba:	4618      	mov	r0, r3
 80011bc:	f000 fdc4 	bl	8001d48 <send_uart>
			send_uart("Falha ao inicializar dispositivo. Reinicie o sistema.\n");
 80011c0:	480a      	ldr	r0, [pc, #40]	; (80011ec <SetRegisterValue+0xec>)
 80011c2:	f000 fdc1 	bl	8001d48 <send_uart>
		} else {
			send_uart("Sucesso ao inicializar o dispositivo.\n");
		}
	}

}
 80011c6:	e002      	b.n	80011ce <SetRegisterValue+0xce>
			send_uart("Sucesso ao inicializar o dispositivo.\n");
 80011c8:	4809      	ldr	r0, [pc, #36]	; (80011f0 <SetRegisterValue+0xf0>)
 80011ca:	f000 fdbd 	bl	8001d48 <send_uart>
}
 80011ce:	bf00      	nop
 80011d0:	3750      	adds	r7, #80	; 0x50
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	40010800 	.word	0x40010800
 80011dc:	2000069c 	.word	0x2000069c
 80011e0:	20000644 	.word	0x20000644
 80011e4:	0800d23c 	.word	0x0800d23c
 80011e8:	0800d258 	.word	0x0800d258
 80011ec:	0800d25c 	.word	0x0800d25c
 80011f0:	0800d294 	.word	0x0800d294

080011f4 <read_Value>:

// -------------------------------------------------------------
// Reading one value from a given channel
// -------------------------------------------------------------

uint32_t read_Value(uint8_t channel) {
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b084      	sub	sp, #16
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	4603      	mov	r3, r0
 80011fc:	71fb      	strb	r3, [r7, #7]
//	static const uint32_t* adc_val;
	uint8_t adc_val[3];
	uint32_t adc_conv;
//	uint8_t adc_val2;
//	uint8_t adc_val3;
	waitforDRDY(); // Wait until DRDY is LOW
 80011fe:	f7ff febb 	bl	8000f78 <waitforDRDY>
	HAL_GPIO_WritePin(SPI1_NCS_GPIO_Port, SPI1_NCS_Pin, 0); // Pull SS Low to Enable Communications with ADS1247
 8001202:	2200      	movs	r2, #0
 8001204:	2110      	movs	r1, #16
 8001206:	4830      	ldr	r0, [pc, #192]	; (80012c8 <read_Value+0xd4>)
 8001208:	f002 ff90 	bl	800412c <HAL_GPIO_WritePin>
	//delayMicroseconds(5); // RD: Wait 25ns for ADC12xx to get ready

	exchange_buffer[0] = (char*) (WREG | MUX);
 800120c:	4b2f      	ldr	r3, [pc, #188]	; (80012cc <read_Value+0xd8>)
 800120e:	2251      	movs	r2, #81	; 0x51
 8001210:	601a      	str	r2, [r3, #0]
	HAL_SPI_Transmit(&hspi1, (uint8_t*) exchange_buffer, 1, 100); // Transmit change of MUX register
 8001212:	2364      	movs	r3, #100	; 0x64
 8001214:	2201      	movs	r2, #1
 8001216:	492d      	ldr	r1, [pc, #180]	; (80012cc <read_Value+0xd8>)
 8001218:	482d      	ldr	r0, [pc, #180]	; (80012d0 <read_Value+0xdc>)
 800121a:	f003 fd99 	bl	8004d50 <HAL_SPI_Transmit>
	exchange_buffer[0] = (char*) 0x00;
 800121e:	4b2b      	ldr	r3, [pc, #172]	; (80012cc <read_Value+0xd8>)
 8001220:	2200      	movs	r2, #0
 8001222:	601a      	str	r2, [r3, #0]
	HAL_SPI_Transmit(&hspi1, (uint8_t*) exchange_buffer, 1, 100); // One byte to be written
 8001224:	2364      	movs	r3, #100	; 0x64
 8001226:	2201      	movs	r2, #1
 8001228:	4928      	ldr	r1, [pc, #160]	; (80012cc <read_Value+0xd8>)
 800122a:	4829      	ldr	r0, [pc, #164]	; (80012d0 <read_Value+0xdc>)
 800122c:	f003 fd90 	bl	8004d50 <HAL_SPI_Transmit>
//	send_uart("Enviando buffer...\n");
	exchange_buffer[0] = (char*) channel;
 8001230:	79fb      	ldrb	r3, [r7, #7]
 8001232:	461a      	mov	r2, r3
 8001234:	4b25      	ldr	r3, [pc, #148]	; (80012cc <read_Value+0xd8>)
 8001236:	601a      	str	r2, [r3, #0]
	HAL_SPI_Transmit(&hspi1, (uint8_t*) exchange_buffer, 1, 100); // Declaring that we want AIN 7 - AINCOM
 8001238:	2364      	movs	r3, #100	; 0x64
 800123a:	2201      	movs	r2, #1
 800123c:	4923      	ldr	r1, [pc, #140]	; (80012cc <read_Value+0xd8>)
 800123e:	4824      	ldr	r0, [pc, #144]	; (80012d0 <read_Value+0xdc>)
 8001240:	f003 fd86 	bl	8004d50 <HAL_SPI_Transmit>

	delayMicroseconds(2);
 8001244:	2002      	movs	r0, #2
 8001246:	f002 f973 	bl	8003530 <delayMicroseconds>

	exchange_buffer[0] = (char*) SYNC;
 800124a:	4b20      	ldr	r3, [pc, #128]	; (80012cc <read_Value+0xd8>)
 800124c:	22fc      	movs	r2, #252	; 0xfc
 800124e:	601a      	str	r2, [r3, #0]
	HAL_SPI_Transmit(&hspi1, (uint8_t*) exchange_buffer, 1, 100); // Issue the SYNC command
 8001250:	2364      	movs	r3, #100	; 0x64
 8001252:	2201      	movs	r2, #1
 8001254:	491d      	ldr	r1, [pc, #116]	; (80012cc <read_Value+0xd8>)
 8001256:	481e      	ldr	r0, [pc, #120]	; (80012d0 <read_Value+0xdc>)
 8001258:	f003 fd7a 	bl	8004d50 <HAL_SPI_Transmit>
	delayMicroseconds(5);
 800125c:	2005      	movs	r0, #5
 800125e:	f002 f967 	bl	8003530 <delayMicroseconds>
	exchange_buffer[0] = (char*) WAKEUP;
 8001262:	4b1a      	ldr	r3, [pc, #104]	; (80012cc <read_Value+0xd8>)
 8001264:	2200      	movs	r2, #0
 8001266:	601a      	str	r2, [r3, #0]
	HAL_SPI_Transmit(&hspi1, (uint8_t*) exchange_buffer, 1, 100); // Issue the wake up command
 8001268:	2364      	movs	r3, #100	; 0x64
 800126a:	2201      	movs	r2, #1
 800126c:	4917      	ldr	r1, [pc, #92]	; (80012cc <read_Value+0xd8>)
 800126e:	4818      	ldr	r0, [pc, #96]	; (80012d0 <read_Value+0xdc>)
 8001270:	f003 fd6e 	bl	8004d50 <HAL_SPI_Transmit>
	delayMicroseconds(1);
 8001274:	2001      	movs	r0, #1
 8001276:	f002 f95b 	bl	8003530 <delayMicroseconds>
	exchange_buffer[0] = (char*) RDATA;
 800127a:	4b14      	ldr	r3, [pc, #80]	; (80012cc <read_Value+0xd8>)
 800127c:	2201      	movs	r2, #1
 800127e:	601a      	str	r2, [r3, #0]
	HAL_SPI_Transmit(&hspi1, (uint8_t*) exchange_buffer, 1, 100);
 8001280:	2364      	movs	r3, #100	; 0x64
 8001282:	2201      	movs	r2, #1
 8001284:	4911      	ldr	r1, [pc, #68]	; (80012cc <read_Value+0xd8>)
 8001286:	4812      	ldr	r0, [pc, #72]	; (80012d0 <read_Value+0xdc>)
 8001288:	f003 fd62 	bl	8004d50 <HAL_SPI_Transmit>

	delayMicroseconds(8);
 800128c:	2008      	movs	r0, #8
 800128e:	f002 f94f 	bl	8003530 <delayMicroseconds>

//	send_uart("Tentando ler valores...\n");
	HAL_SPI_Receive(&hspi1,  adc_val, 3, 100);
 8001292:	f107 0108 	add.w	r1, r7, #8
 8001296:	2364      	movs	r3, #100	; 0x64
 8001298:	2203      	movs	r2, #3
 800129a:	480d      	ldr	r0, [pc, #52]	; (80012d0 <read_Value+0xdc>)
 800129c:	f003 fe94 	bl	8004fc8 <HAL_SPI_Receive>
	adc_conv = (uint32_t)adc_val[0] << 24 | (uint32_t)adc_val[1] << 16 | (uint32_t)adc_val[2] << 8;
 80012a0:	7a3b      	ldrb	r3, [r7, #8]
 80012a2:	061a      	lsls	r2, r3, #24
 80012a4:	7a7b      	ldrb	r3, [r7, #9]
 80012a6:	041b      	lsls	r3, r3, #16
 80012a8:	431a      	orrs	r2, r3
 80012aa:	7abb      	ldrb	r3, [r7, #10]
 80012ac:	021b      	lsls	r3, r3, #8
 80012ae:	4313      	orrs	r3, r2
 80012b0:	60fb      	str	r3, [r7, #12]
//	HAL_SPI_Receive(&hspi1, &adc_val[1], 1, 100);
//	HAL_SPI_Receive(&hspi1, &adc_val[2], 1, 100);
//	send_uart("Valores lidos.\n");

	HAL_GPIO_WritePin(SPI1_NCS_GPIO_Port, SPI1_NCS_Pin, 1); //Pull SS High to Disable Communications with ADS1247
 80012b2:	2201      	movs	r2, #1
 80012b4:	2110      	movs	r1, #16
 80012b6:	4804      	ldr	r0, [pc, #16]	; (80012c8 <read_Value+0xd4>)
 80012b8:	f002 ff38 	bl	800412c <HAL_GPIO_WritePin>
//	if (adc_val3 > 0x7fffff) { //if MSB == 1
//		adc_val3 = adc_val1 - 16777216; //do 2's complement, keep the sign this time!
//	}

//	return (ReverseBytes(adc_val) >> 8);
	return adc_conv >> 8;
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	0a1b      	lsrs	r3, r3, #8
}
 80012c0:	4618      	mov	r0, r3
 80012c2:	3710      	adds	r7, #16
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	40010800 	.word	0x40010800
 80012cc:	2000069c 	.word	0x2000069c
 80012d0:	20000644 	.word	0x20000644

080012d4 <SELECT>:
#define SD_CS_GPIO_Port GPIOA
#define SD_CS_Pin GPIO_PIN_4

/* SPI Chip Select */
static void SELECT(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 80012d8:	2200      	movs	r2, #0
 80012da:	2110      	movs	r1, #16
 80012dc:	4802      	ldr	r0, [pc, #8]	; (80012e8 <SELECT+0x14>)
 80012de:	f002 ff25 	bl	800412c <HAL_GPIO_WritePin>
}
 80012e2:	bf00      	nop
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	40010800 	.word	0x40010800

080012ec <DESELECT>:

/* SPI Chip Deselect */
static void DESELECT(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 80012f0:	2201      	movs	r2, #1
 80012f2:	2110      	movs	r1, #16
 80012f4:	4802      	ldr	r0, [pc, #8]	; (8001300 <DESELECT+0x14>)
 80012f6:	f002 ff19 	bl	800412c <HAL_GPIO_WritePin>
}
 80012fa:	bf00      	nop
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	40010800 	.word	0x40010800

08001304 <SPI_TxByte>:

/* SPI 데이터 전송 */
static void SPI_TxByte(BYTE data)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0
 800130a:	4603      	mov	r3, r0
 800130c:	71fb      	strb	r3, [r7, #7]
  while (HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY);
 800130e:	bf00      	nop
 8001310:	4808      	ldr	r0, [pc, #32]	; (8001334 <SPI_TxByte+0x30>)
 8001312:	f004 f90c 	bl	800552e <HAL_SPI_GetState>
 8001316:	4603      	mov	r3, r0
 8001318:	2b01      	cmp	r3, #1
 800131a:	d1f9      	bne.n	8001310 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(&hspi2, &data, 1, SPI_TIMEOUT);
 800131c:	1df9      	adds	r1, r7, #7
 800131e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001322:	2201      	movs	r2, #1
 8001324:	4803      	ldr	r0, [pc, #12]	; (8001334 <SPI_TxByte+0x30>)
 8001326:	f003 fd13 	bl	8004d50 <HAL_SPI_Transmit>
}
 800132a:	bf00      	nop
 800132c:	3708      	adds	r7, #8
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	2000109c 	.word	0x2000109c

08001338 <SPI_RxByte>:

/* SPI 데이터 송수신 리턴형 함수 */
static uint8_t SPI_RxByte(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b084      	sub	sp, #16
 800133c:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 800133e:	23ff      	movs	r3, #255	; 0xff
 8001340:	71fb      	strb	r3, [r7, #7]
  data = 0;
 8001342:	2300      	movs	r3, #0
 8001344:	71bb      	strb	r3, [r7, #6]

  while ((HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY));
 8001346:	bf00      	nop
 8001348:	4809      	ldr	r0, [pc, #36]	; (8001370 <SPI_RxByte+0x38>)
 800134a:	f004 f8f0 	bl	800552e <HAL_SPI_GetState>
 800134e:	4603      	mov	r3, r0
 8001350:	2b01      	cmp	r3, #1
 8001352:	d1f9      	bne.n	8001348 <SPI_RxByte+0x10>
  HAL_SPI_TransmitReceive(&hspi2, &dummy, &data, 1, SPI_TIMEOUT);
 8001354:	1dba      	adds	r2, r7, #6
 8001356:	1df9      	adds	r1, r7, #7
 8001358:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800135c:	9300      	str	r3, [sp, #0]
 800135e:	2301      	movs	r3, #1
 8001360:	4803      	ldr	r0, [pc, #12]	; (8001370 <SPI_RxByte+0x38>)
 8001362:	f003 ff42 	bl	80051ea <HAL_SPI_TransmitReceive>

  return data;
 8001366:	79bb      	ldrb	r3, [r7, #6]
}
 8001368:	4618      	mov	r0, r3
 800136a:	3708      	adds	r7, #8
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}
 8001370:	2000109c 	.word	0x2000109c

08001374 <SPI_RxBytePtr>:

/* SPI 데이터 송수신 포인터형 함수 */
static void SPI_RxBytePtr(uint8_t *buff)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b082      	sub	sp, #8
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 800137c:	f7ff ffdc 	bl	8001338 <SPI_RxByte>
 8001380:	4603      	mov	r3, r0
 8001382:	461a      	mov	r2, r3
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	701a      	strb	r2, [r3, #0]
}
 8001388:	bf00      	nop
 800138a:	3708      	adds	r7, #8
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}

08001390 <SD_ReadyWait>:

/* SD카드 Ready 대기 */
static uint8_t SD_ReadyWait(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b082      	sub	sp, #8
 8001394:	af00      	add	r7, sp, #0
  uint8_t res;

  /* 500ms 카운터 준비 */
  Timer2 = 50;
 8001396:	4b0b      	ldr	r3, [pc, #44]	; (80013c4 <SD_ReadyWait+0x34>)
 8001398:	2232      	movs	r2, #50	; 0x32
 800139a:	701a      	strb	r2, [r3, #0]
  SPI_RxByte();
 800139c:	f7ff ffcc 	bl	8001338 <SPI_RxByte>

  do
  {
    /* 0xFF 값이 수신될 때 까지 SPI 통신 */
    res = SPI_RxByte();
 80013a0:	f7ff ffca 	bl	8001338 <SPI_RxByte>
 80013a4:	4603      	mov	r3, r0
 80013a6:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 80013a8:	79fb      	ldrb	r3, [r7, #7]
 80013aa:	2bff      	cmp	r3, #255	; 0xff
 80013ac:	d004      	beq.n	80013b8 <SD_ReadyWait+0x28>
 80013ae:	4b05      	ldr	r3, [pc, #20]	; (80013c4 <SD_ReadyWait+0x34>)
 80013b0:	781b      	ldrb	r3, [r3, #0]
 80013b2:	b2db      	uxtb	r3, r3
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d1f3      	bne.n	80013a0 <SD_ReadyWait+0x10>

  return res;
 80013b8:	79fb      	ldrb	r3, [r7, #7]
}
 80013ba:	4618      	mov	r0, r3
 80013bc:	3708      	adds	r7, #8
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	20001160 	.word	0x20001160

080013c8 <SD_PowerOn>:

/* 전원 켜기 */
static void SD_PowerOn(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b086      	sub	sp, #24
 80013cc:	af00      	add	r7, sp, #0
  uint8_t cmd_arg[6];
  uint32_t Count = 0x1FFF;
 80013ce:	f641 73ff 	movw	r3, #8191	; 0x1fff
 80013d2:	617b      	str	r3, [r7, #20]

  /* Deselect 상태에서 SPI 메시지를 전송하여 대기상태로 만든다. */
  DESELECT();
 80013d4:	f7ff ff8a 	bl	80012ec <DESELECT>

  for(int i = 0; i < 10; i++)
 80013d8:	2300      	movs	r3, #0
 80013da:	613b      	str	r3, [r7, #16]
 80013dc:	e005      	b.n	80013ea <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 80013de:	20ff      	movs	r0, #255	; 0xff
 80013e0:	f7ff ff90 	bl	8001304 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 80013e4:	693b      	ldr	r3, [r7, #16]
 80013e6:	3301      	adds	r3, #1
 80013e8:	613b      	str	r3, [r7, #16]
 80013ea:	693b      	ldr	r3, [r7, #16]
 80013ec:	2b09      	cmp	r3, #9
 80013ee:	ddf6      	ble.n	80013de <SD_PowerOn+0x16>
  }

  /* SPI Chips Select */
  SELECT();
 80013f0:	f7ff ff70 	bl	80012d4 <SELECT>

  /* 초기 GO_IDLE_STATE 상태 전환 */
  cmd_arg[0] = (CMD0 | 0x40);
 80013f4:	2340      	movs	r3, #64	; 0x40
 80013f6:	713b      	strb	r3, [r7, #4]
  cmd_arg[1] = 0;
 80013f8:	2300      	movs	r3, #0
 80013fa:	717b      	strb	r3, [r7, #5]
  cmd_arg[2] = 0;
 80013fc:	2300      	movs	r3, #0
 80013fe:	71bb      	strb	r3, [r7, #6]
  cmd_arg[3] = 0;
 8001400:	2300      	movs	r3, #0
 8001402:	71fb      	strb	r3, [r7, #7]
  cmd_arg[4] = 0;
 8001404:	2300      	movs	r3, #0
 8001406:	723b      	strb	r3, [r7, #8]
  cmd_arg[5] = 0x95;
 8001408:	2395      	movs	r3, #149	; 0x95
 800140a:	727b      	strb	r3, [r7, #9]

  /* 명령 전송 */
  for (int i = 0; i < 6; i++)
 800140c:	2300      	movs	r3, #0
 800140e:	60fb      	str	r3, [r7, #12]
 8001410:	e009      	b.n	8001426 <SD_PowerOn+0x5e>
  {
    SPI_TxByte(cmd_arg[i]);
 8001412:	1d3a      	adds	r2, r7, #4
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	4413      	add	r3, r2
 8001418:	781b      	ldrb	r3, [r3, #0]
 800141a:	4618      	mov	r0, r3
 800141c:	f7ff ff72 	bl	8001304 <SPI_TxByte>
  for (int i = 0; i < 6; i++)
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	3301      	adds	r3, #1
 8001424:	60fb      	str	r3, [r7, #12]
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	2b05      	cmp	r3, #5
 800142a:	ddf2      	ble.n	8001412 <SD_PowerOn+0x4a>
  }

  /* 응답 대기 */
  while ((SPI_RxByte() != 0x01) && Count)
 800142c:	e002      	b.n	8001434 <SD_PowerOn+0x6c>
  {
    Count--;
 800142e:	697b      	ldr	r3, [r7, #20]
 8001430:	3b01      	subs	r3, #1
 8001432:	617b      	str	r3, [r7, #20]
  while ((SPI_RxByte() != 0x01) && Count)
 8001434:	f7ff ff80 	bl	8001338 <SPI_RxByte>
 8001438:	4603      	mov	r3, r0
 800143a:	2b01      	cmp	r3, #1
 800143c:	d002      	beq.n	8001444 <SD_PowerOn+0x7c>
 800143e:	697b      	ldr	r3, [r7, #20]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d1f4      	bne.n	800142e <SD_PowerOn+0x66>
  }

  DESELECT();
 8001444:	f7ff ff52 	bl	80012ec <DESELECT>
  SPI_TxByte(0XFF);
 8001448:	20ff      	movs	r0, #255	; 0xff
 800144a:	f7ff ff5b 	bl	8001304 <SPI_TxByte>

  PowerFlag = 1;
 800144e:	4b03      	ldr	r3, [pc, #12]	; (800145c <SD_PowerOn+0x94>)
 8001450:	2201      	movs	r2, #1
 8001452:	701a      	strb	r2, [r3, #0]
}
 8001454:	bf00      	nop
 8001456:	3718      	adds	r7, #24
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}
 800145c:	200002b1 	.word	0x200002b1

08001460 <SD_PowerOff>:

/* 전원 끄기 */
static void SD_PowerOff(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 8001464:	4b03      	ldr	r3, [pc, #12]	; (8001474 <SD_PowerOff+0x14>)
 8001466:	2200      	movs	r2, #0
 8001468:	701a      	strb	r2, [r3, #0]
}
 800146a:	bf00      	nop
 800146c:	46bd      	mov	sp, r7
 800146e:	bc80      	pop	{r7}
 8001470:	4770      	bx	lr
 8001472:	bf00      	nop
 8001474:	200002b1 	.word	0x200002b1

08001478 <SD_CheckPower>:

/* 전원 상태 확인 */
static uint8_t SD_CheckPower(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
  /*  0=off, 1=on */
  return PowerFlag;
 800147c:	4b02      	ldr	r3, [pc, #8]	; (8001488 <SD_CheckPower+0x10>)
 800147e:	781b      	ldrb	r3, [r3, #0]
}
 8001480:	4618      	mov	r0, r3
 8001482:	46bd      	mov	sp, r7
 8001484:	bc80      	pop	{r7}
 8001486:	4770      	bx	lr
 8001488:	200002b1 	.word	0x200002b1

0800148c <SD_RxDataBlock>:

/* 데이터 패킷 수신 */
static bool SD_RxDataBlock(BYTE *buff, UINT btr)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b084      	sub	sp, #16
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
 8001494:	6039      	str	r1, [r7, #0]
  uint8_t token;

  /* 100ms 타이머 */
  Timer1 = 10;
 8001496:	4b17      	ldr	r3, [pc, #92]	; (80014f4 <SD_RxDataBlock+0x68>)
 8001498:	220a      	movs	r2, #10
 800149a:	701a      	strb	r2, [r3, #0]

  /* 응답 대기 */
  do
  {
    token = SPI_RxByte();
 800149c:	f7ff ff4c 	bl	8001338 <SPI_RxByte>
 80014a0:	4603      	mov	r3, r0
 80014a2:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 80014a4:	7bfb      	ldrb	r3, [r7, #15]
 80014a6:	2bff      	cmp	r3, #255	; 0xff
 80014a8:	d104      	bne.n	80014b4 <SD_RxDataBlock+0x28>
 80014aa:	4b12      	ldr	r3, [pc, #72]	; (80014f4 <SD_RxDataBlock+0x68>)
 80014ac:	781b      	ldrb	r3, [r3, #0]
 80014ae:	b2db      	uxtb	r3, r3
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d1f3      	bne.n	800149c <SD_RxDataBlock+0x10>

  /* 0xFE 이외 Token 수신 시 에러 처리 */
  if(token != 0xFE)
 80014b4:	7bfb      	ldrb	r3, [r7, #15]
 80014b6:	2bfe      	cmp	r3, #254	; 0xfe
 80014b8:	d001      	beq.n	80014be <SD_RxDataBlock+0x32>
    return FALSE;
 80014ba:	2300      	movs	r3, #0
 80014bc:	e016      	b.n	80014ec <SD_RxDataBlock+0x60>

  /* 버퍼에 데이터 수신 */
  do
  {
    SPI_RxBytePtr(buff++);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	1c5a      	adds	r2, r3, #1
 80014c2:	607a      	str	r2, [r7, #4]
 80014c4:	4618      	mov	r0, r3
 80014c6:	f7ff ff55 	bl	8001374 <SPI_RxBytePtr>
    SPI_RxBytePtr(buff++);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	1c5a      	adds	r2, r3, #1
 80014ce:	607a      	str	r2, [r7, #4]
 80014d0:	4618      	mov	r0, r3
 80014d2:	f7ff ff4f 	bl	8001374 <SPI_RxBytePtr>
  } while(btr -= 2);
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	3b02      	subs	r3, #2
 80014da:	603b      	str	r3, [r7, #0]
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d1ed      	bne.n	80014be <SD_RxDataBlock+0x32>

  SPI_RxByte(); /* CRC 무시 */
 80014e2:	f7ff ff29 	bl	8001338 <SPI_RxByte>
  SPI_RxByte();
 80014e6:	f7ff ff27 	bl	8001338 <SPI_RxByte>

  return TRUE;
 80014ea:	2301      	movs	r3, #1
}
 80014ec:	4618      	mov	r0, r3
 80014ee:	3710      	adds	r7, #16
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	20001161 	.word	0x20001161

080014f8 <SD_TxDataBlock>:

/* 데이터 전송 패킷 */
#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE *buff, BYTE token)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b084      	sub	sp, #16
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
 8001500:	460b      	mov	r3, r1
 8001502:	70fb      	strb	r3, [r7, #3]
  uint8_t resp, wc;
  uint8_t i = 0;
 8001504:	2300      	movs	r3, #0
 8001506:	737b      	strb	r3, [r7, #13]

  /* SD카드 준비 대기 */
  if (SD_ReadyWait() != 0xFF)
 8001508:	f7ff ff42 	bl	8001390 <SD_ReadyWait>
 800150c:	4603      	mov	r3, r0
 800150e:	2bff      	cmp	r3, #255	; 0xff
 8001510:	d001      	beq.n	8001516 <SD_TxDataBlock+0x1e>
    return FALSE;
 8001512:	2300      	movs	r3, #0
 8001514:	e040      	b.n	8001598 <SD_TxDataBlock+0xa0>

  /* 토큰 전송 */
  SPI_TxByte(token);
 8001516:	78fb      	ldrb	r3, [r7, #3]
 8001518:	4618      	mov	r0, r3
 800151a:	f7ff fef3 	bl	8001304 <SPI_TxByte>

  /* 데이터 토큰인 경우 */
  if (token != 0xFD)
 800151e:	78fb      	ldrb	r3, [r7, #3]
 8001520:	2bfd      	cmp	r3, #253	; 0xfd
 8001522:	d031      	beq.n	8001588 <SD_TxDataBlock+0x90>
  {
    wc = 0;
 8001524:	2300      	movs	r3, #0
 8001526:	73bb      	strb	r3, [r7, #14]

    /* 512 바이트 데이터 전송 */
    do
    {
      SPI_TxByte(*buff++);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	1c5a      	adds	r2, r3, #1
 800152c:	607a      	str	r2, [r7, #4]
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	4618      	mov	r0, r3
 8001532:	f7ff fee7 	bl	8001304 <SPI_TxByte>
      SPI_TxByte(*buff++);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	1c5a      	adds	r2, r3, #1
 800153a:	607a      	str	r2, [r7, #4]
 800153c:	781b      	ldrb	r3, [r3, #0]
 800153e:	4618      	mov	r0, r3
 8001540:	f7ff fee0 	bl	8001304 <SPI_TxByte>
    } while (--wc);
 8001544:	7bbb      	ldrb	r3, [r7, #14]
 8001546:	3b01      	subs	r3, #1
 8001548:	73bb      	strb	r3, [r7, #14]
 800154a:	7bbb      	ldrb	r3, [r7, #14]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d1eb      	bne.n	8001528 <SD_TxDataBlock+0x30>

    SPI_RxByte();       /* CRC 무시 */
 8001550:	f7ff fef2 	bl	8001338 <SPI_RxByte>
    SPI_RxByte();
 8001554:	f7ff fef0 	bl	8001338 <SPI_RxByte>

    /* 데이트 응답 수신 */
    while (i <= 64)
 8001558:	e00b      	b.n	8001572 <SD_TxDataBlock+0x7a>
    {
      resp = SPI_RxByte();
 800155a:	f7ff feed 	bl	8001338 <SPI_RxByte>
 800155e:	4603      	mov	r3, r0
 8001560:	73fb      	strb	r3, [r7, #15]

      /* 에러 응답 처리 */
      if ((resp & 0x1F) == 0x05)
 8001562:	7bfb      	ldrb	r3, [r7, #15]
 8001564:	f003 031f 	and.w	r3, r3, #31
 8001568:	2b05      	cmp	r3, #5
 800156a:	d006      	beq.n	800157a <SD_TxDataBlock+0x82>
        break;

      i++;
 800156c:	7b7b      	ldrb	r3, [r7, #13]
 800156e:	3301      	adds	r3, #1
 8001570:	737b      	strb	r3, [r7, #13]
    while (i <= 64)
 8001572:	7b7b      	ldrb	r3, [r7, #13]
 8001574:	2b40      	cmp	r3, #64	; 0x40
 8001576:	d9f0      	bls.n	800155a <SD_TxDataBlock+0x62>
 8001578:	e000      	b.n	800157c <SD_TxDataBlock+0x84>
        break;
 800157a:	bf00      	nop
    }

    /* SPI 수신 버퍼 Clear */
    while (SPI_RxByte() == 0);
 800157c:	bf00      	nop
 800157e:	f7ff fedb 	bl	8001338 <SPI_RxByte>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d0fa      	beq.n	800157e <SD_TxDataBlock+0x86>
  }

  if ((resp & 0x1F) == 0x05)
 8001588:	7bfb      	ldrb	r3, [r7, #15]
 800158a:	f003 031f 	and.w	r3, r3, #31
 800158e:	2b05      	cmp	r3, #5
 8001590:	d101      	bne.n	8001596 <SD_TxDataBlock+0x9e>
    return TRUE;
 8001592:	2301      	movs	r3, #1
 8001594:	e000      	b.n	8001598 <SD_TxDataBlock+0xa0>
  else
    return FALSE;
 8001596:	2300      	movs	r3, #0
}
 8001598:	4618      	mov	r0, r3
 800159a:	3710      	adds	r7, #16
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}

080015a0 <SD_SendCmd>:
#endif /* _READONLY */

/* CMD 패킷 전송 */
static BYTE SD_SendCmd(BYTE cmd, DWORD arg)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b084      	sub	sp, #16
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	4603      	mov	r3, r0
 80015a8:	6039      	str	r1, [r7, #0]
 80015aa:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;

  /* SD카드 대기 */
  if (SD_ReadyWait() != 0xFF)
 80015ac:	f7ff fef0 	bl	8001390 <SD_ReadyWait>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2bff      	cmp	r3, #255	; 0xff
 80015b4:	d001      	beq.n	80015ba <SD_SendCmd+0x1a>
    return 0xFF;
 80015b6:	23ff      	movs	r3, #255	; 0xff
 80015b8:	e040      	b.n	800163c <SD_SendCmd+0x9c>

  /* 명령 패킷 전송 */
  SPI_TxByte(cmd); 			/* Command */
 80015ba:	79fb      	ldrb	r3, [r7, #7]
 80015bc:	4618      	mov	r0, r3
 80015be:	f7ff fea1 	bl	8001304 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 24)); 	/* Argument[31..24] */
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	0e1b      	lsrs	r3, r3, #24
 80015c6:	b2db      	uxtb	r3, r3
 80015c8:	4618      	mov	r0, r3
 80015ca:	f7ff fe9b 	bl	8001304 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 16)); 	/* Argument[23..16] */
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	0c1b      	lsrs	r3, r3, #16
 80015d2:	b2db      	uxtb	r3, r3
 80015d4:	4618      	mov	r0, r3
 80015d6:	f7ff fe95 	bl	8001304 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 8)); 	/* Argument[15..8] */
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	0a1b      	lsrs	r3, r3, #8
 80015de:	b2db      	uxtb	r3, r3
 80015e0:	4618      	mov	r0, r3
 80015e2:	f7ff fe8f 	bl	8001304 <SPI_TxByte>
  SPI_TxByte((BYTE) arg); 		/* Argument[7..0] */
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	b2db      	uxtb	r3, r3
 80015ea:	4618      	mov	r0, r3
 80015ec:	f7ff fe8a 	bl	8001304 <SPI_TxByte>

  /* 명령별 CRC 준비 */
  crc = 0;
 80015f0:	2300      	movs	r3, #0
 80015f2:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0)
 80015f4:	79fb      	ldrb	r3, [r7, #7]
 80015f6:	2b40      	cmp	r3, #64	; 0x40
 80015f8:	d101      	bne.n	80015fe <SD_SendCmd+0x5e>
    crc = 0x95; /* CRC for CMD0(0) */
 80015fa:	2395      	movs	r3, #149	; 0x95
 80015fc:	73fb      	strb	r3, [r7, #15]

  if (cmd == CMD8)
 80015fe:	79fb      	ldrb	r3, [r7, #7]
 8001600:	2b48      	cmp	r3, #72	; 0x48
 8001602:	d101      	bne.n	8001608 <SD_SendCmd+0x68>
    crc = 0x87; /* CRC for CMD8(0x1AA) */
 8001604:	2387      	movs	r3, #135	; 0x87
 8001606:	73fb      	strb	r3, [r7, #15]

  /* CRC 전송 */
  SPI_TxByte(crc);
 8001608:	7bfb      	ldrb	r3, [r7, #15]
 800160a:	4618      	mov	r0, r3
 800160c:	f7ff fe7a 	bl	8001304 <SPI_TxByte>

  /* CMD12 Stop Reading 명령인 경우에는 응답 바이트 하나를 버린다 */
  if (cmd == CMD12)
 8001610:	79fb      	ldrb	r3, [r7, #7]
 8001612:	2b4c      	cmp	r3, #76	; 0x4c
 8001614:	d101      	bne.n	800161a <SD_SendCmd+0x7a>
    SPI_RxByte();
 8001616:	f7ff fe8f 	bl	8001338 <SPI_RxByte>

  /* 10회 내에 정상 데이터를 수신한다. */
  uint8_t n = 10;
 800161a:	230a      	movs	r3, #10
 800161c:	73bb      	strb	r3, [r7, #14]
  do
  {
    res = SPI_RxByte();
 800161e:	f7ff fe8b 	bl	8001338 <SPI_RxByte>
 8001622:	4603      	mov	r3, r0
 8001624:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 8001626:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800162a:	2b00      	cmp	r3, #0
 800162c:	da05      	bge.n	800163a <SD_SendCmd+0x9a>
 800162e:	7bbb      	ldrb	r3, [r7, #14]
 8001630:	3b01      	subs	r3, #1
 8001632:	73bb      	strb	r3, [r7, #14]
 8001634:	7bbb      	ldrb	r3, [r7, #14]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d1f1      	bne.n	800161e <SD_SendCmd+0x7e>

  return res;
 800163a:	7b7b      	ldrb	r3, [r7, #13]
}
 800163c:	4618      	mov	r0, r3
 800163e:	3710      	adds	r7, #16
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}

08001644 <SD_disk_initialize>:
  user_diskio.c 파일에서 사용된다.
-----------------------------------------------------------------------*/

/* SD카드 초기화 */
DSTATUS SD_disk_initialize(BYTE drv)
{
 8001644:	b590      	push	{r4, r7, lr}
 8001646:	b085      	sub	sp, #20
 8001648:	af00      	add	r7, sp, #0
 800164a:	4603      	mov	r3, r0
 800164c:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];

  /* 한종류의 드라이브만 지원 */
  if(drv)
 800164e:	79fb      	ldrb	r3, [r7, #7]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d001      	beq.n	8001658 <SD_disk_initialize+0x14>
    return STA_NOINIT;
 8001654:	2301      	movs	r3, #1
 8001656:	e0d5      	b.n	8001804 <SD_disk_initialize+0x1c0>

  /* SD카드 미삽입 */
  if(Stat & STA_NODISK)
 8001658:	4b6c      	ldr	r3, [pc, #432]	; (800180c <SD_disk_initialize+0x1c8>)
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	b2db      	uxtb	r3, r3
 800165e:	f003 0302 	and.w	r3, r3, #2
 8001662:	2b00      	cmp	r3, #0
 8001664:	d003      	beq.n	800166e <SD_disk_initialize+0x2a>
    return Stat;
 8001666:	4b69      	ldr	r3, [pc, #420]	; (800180c <SD_disk_initialize+0x1c8>)
 8001668:	781b      	ldrb	r3, [r3, #0]
 800166a:	b2db      	uxtb	r3, r3
 800166c:	e0ca      	b.n	8001804 <SD_disk_initialize+0x1c0>

  /* SD카드 Power On */
  SD_PowerOn();
 800166e:	f7ff feab 	bl	80013c8 <SD_PowerOn>

  /* SPI 통신을 위해 Chip Select */
  SELECT();
 8001672:	f7ff fe2f 	bl	80012d4 <SELECT>

  /* SD카드 타입변수 초기화 */
  type = 0;
 8001676:	2300      	movs	r3, #0
 8001678:	73bb      	strb	r3, [r7, #14]

  /* Idle 상태 진입 */
  if (SD_SendCmd(CMD0, 0) == 1)
 800167a:	2100      	movs	r1, #0
 800167c:	2040      	movs	r0, #64	; 0x40
 800167e:	f7ff ff8f 	bl	80015a0 <SD_SendCmd>
 8001682:	4603      	mov	r3, r0
 8001684:	2b01      	cmp	r3, #1
 8001686:	f040 80a5 	bne.w	80017d4 <SD_disk_initialize+0x190>
  {
    /* 타이머 1초 설정 */
    Timer1 = 100;
 800168a:	4b61      	ldr	r3, [pc, #388]	; (8001810 <SD_disk_initialize+0x1cc>)
 800168c:	2264      	movs	r2, #100	; 0x64
 800168e:	701a      	strb	r2, [r3, #0]

    /* SD 인터페이스 동작 조건 확인 */
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8001690:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8001694:	2048      	movs	r0, #72	; 0x48
 8001696:	f7ff ff83 	bl	80015a0 <SD_SendCmd>
 800169a:	4603      	mov	r3, r0
 800169c:	2b01      	cmp	r3, #1
 800169e:	d158      	bne.n	8001752 <SD_disk_initialize+0x10e>
    {
      /* SDC Ver2+ */
      for (n = 0; n < 4; n++)
 80016a0:	2300      	movs	r3, #0
 80016a2:	73fb      	strb	r3, [r7, #15]
 80016a4:	e00c      	b.n	80016c0 <SD_disk_initialize+0x7c>
      {
        ocr[n] = SPI_RxByte();
 80016a6:	7bfc      	ldrb	r4, [r7, #15]
 80016a8:	f7ff fe46 	bl	8001338 <SPI_RxByte>
 80016ac:	4603      	mov	r3, r0
 80016ae:	461a      	mov	r2, r3
 80016b0:	f107 0310 	add.w	r3, r7, #16
 80016b4:	4423      	add	r3, r4
 80016b6:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 80016ba:	7bfb      	ldrb	r3, [r7, #15]
 80016bc:	3301      	adds	r3, #1
 80016be:	73fb      	strb	r3, [r7, #15]
 80016c0:	7bfb      	ldrb	r3, [r7, #15]
 80016c2:	2b03      	cmp	r3, #3
 80016c4:	d9ef      	bls.n	80016a6 <SD_disk_initialize+0x62>
      }

      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 80016c6:	7abb      	ldrb	r3, [r7, #10]
 80016c8:	2b01      	cmp	r3, #1
 80016ca:	f040 8083 	bne.w	80017d4 <SD_disk_initialize+0x190>
 80016ce:	7afb      	ldrb	r3, [r7, #11]
 80016d0:	2baa      	cmp	r3, #170	; 0xaa
 80016d2:	d17f      	bne.n	80017d4 <SD_disk_initialize+0x190>
      {
        /* 2.7-3.6V 전압범위 동작 */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 80016d4:	2100      	movs	r1, #0
 80016d6:	2077      	movs	r0, #119	; 0x77
 80016d8:	f7ff ff62 	bl	80015a0 <SD_SendCmd>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b01      	cmp	r3, #1
 80016e0:	d807      	bhi.n	80016f2 <SD_disk_initialize+0xae>
 80016e2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80016e6:	2069      	movs	r0, #105	; 0x69
 80016e8:	f7ff ff5a 	bl	80015a0 <SD_SendCmd>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d005      	beq.n	80016fe <SD_disk_initialize+0xba>
            break; /* ACMD41 with HCS bit */
        } while (Timer1);
 80016f2:	4b47      	ldr	r3, [pc, #284]	; (8001810 <SD_disk_initialize+0x1cc>)
 80016f4:	781b      	ldrb	r3, [r3, #0]
 80016f6:	b2db      	uxtb	r3, r3
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d1eb      	bne.n	80016d4 <SD_disk_initialize+0x90>
 80016fc:	e000      	b.n	8001700 <SD_disk_initialize+0xbc>
            break; /* ACMD41 with HCS bit */
 80016fe:	bf00      	nop

        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8001700:	4b43      	ldr	r3, [pc, #268]	; (8001810 <SD_disk_initialize+0x1cc>)
 8001702:	781b      	ldrb	r3, [r3, #0]
 8001704:	b2db      	uxtb	r3, r3
 8001706:	2b00      	cmp	r3, #0
 8001708:	d064      	beq.n	80017d4 <SD_disk_initialize+0x190>
 800170a:	2100      	movs	r1, #0
 800170c:	207a      	movs	r0, #122	; 0x7a
 800170e:	f7ff ff47 	bl	80015a0 <SD_SendCmd>
 8001712:	4603      	mov	r3, r0
 8001714:	2b00      	cmp	r3, #0
 8001716:	d15d      	bne.n	80017d4 <SD_disk_initialize+0x190>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 8001718:	2300      	movs	r3, #0
 800171a:	73fb      	strb	r3, [r7, #15]
 800171c:	e00c      	b.n	8001738 <SD_disk_initialize+0xf4>
          {
            ocr[n] = SPI_RxByte();
 800171e:	7bfc      	ldrb	r4, [r7, #15]
 8001720:	f7ff fe0a 	bl	8001338 <SPI_RxByte>
 8001724:	4603      	mov	r3, r0
 8001726:	461a      	mov	r2, r3
 8001728:	f107 0310 	add.w	r3, r7, #16
 800172c:	4423      	add	r3, r4
 800172e:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 8001732:	7bfb      	ldrb	r3, [r7, #15]
 8001734:	3301      	adds	r3, #1
 8001736:	73fb      	strb	r3, [r7, #15]
 8001738:	7bfb      	ldrb	r3, [r7, #15]
 800173a:	2b03      	cmp	r3, #3
 800173c:	d9ef      	bls.n	800171e <SD_disk_initialize+0xda>
          }

          type = (ocr[0] & 0x40) ? 6 : 2;
 800173e:	7a3b      	ldrb	r3, [r7, #8]
 8001740:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001744:	2b00      	cmp	r3, #0
 8001746:	d001      	beq.n	800174c <SD_disk_initialize+0x108>
 8001748:	2306      	movs	r3, #6
 800174a:	e000      	b.n	800174e <SD_disk_initialize+0x10a>
 800174c:	2302      	movs	r3, #2
 800174e:	73bb      	strb	r3, [r7, #14]
 8001750:	e040      	b.n	80017d4 <SD_disk_initialize+0x190>
      }
    }
    else
    {
      /* SDC Ver1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 8001752:	2100      	movs	r1, #0
 8001754:	2077      	movs	r0, #119	; 0x77
 8001756:	f7ff ff23 	bl	80015a0 <SD_SendCmd>
 800175a:	4603      	mov	r3, r0
 800175c:	2b01      	cmp	r3, #1
 800175e:	d808      	bhi.n	8001772 <SD_disk_initialize+0x12e>
 8001760:	2100      	movs	r1, #0
 8001762:	2069      	movs	r0, #105	; 0x69
 8001764:	f7ff ff1c 	bl	80015a0 <SD_SendCmd>
 8001768:	4603      	mov	r3, r0
 800176a:	2b01      	cmp	r3, #1
 800176c:	d801      	bhi.n	8001772 <SD_disk_initialize+0x12e>
 800176e:	2302      	movs	r3, #2
 8001770:	e000      	b.n	8001774 <SD_disk_initialize+0x130>
 8001772:	2301      	movs	r3, #1
 8001774:	73bb      	strb	r3, [r7, #14]

      do {
        if (type == 2)
 8001776:	7bbb      	ldrb	r3, [r7, #14]
 8001778:	2b02      	cmp	r3, #2
 800177a:	d10e      	bne.n	800179a <SD_disk_initialize+0x156>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 800177c:	2100      	movs	r1, #0
 800177e:	2077      	movs	r0, #119	; 0x77
 8001780:	f7ff ff0e 	bl	80015a0 <SD_SendCmd>
 8001784:	4603      	mov	r3, r0
 8001786:	2b01      	cmp	r3, #1
 8001788:	d80e      	bhi.n	80017a8 <SD_disk_initialize+0x164>
 800178a:	2100      	movs	r1, #0
 800178c:	2069      	movs	r0, #105	; 0x69
 800178e:	f7ff ff07 	bl	80015a0 <SD_SendCmd>
 8001792:	4603      	mov	r3, r0
 8001794:	2b00      	cmp	r3, #0
 8001796:	d107      	bne.n	80017a8 <SD_disk_initialize+0x164>
            break; /* ACMD41 */
 8001798:	e00d      	b.n	80017b6 <SD_disk_initialize+0x172>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0)
 800179a:	2100      	movs	r1, #0
 800179c:	2041      	movs	r0, #65	; 0x41
 800179e:	f7ff feff 	bl	80015a0 <SD_SendCmd>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d005      	beq.n	80017b4 <SD_disk_initialize+0x170>
            break; /* CMD1 */
        }
      } while (Timer1);
 80017a8:	4b19      	ldr	r3, [pc, #100]	; (8001810 <SD_disk_initialize+0x1cc>)
 80017aa:	781b      	ldrb	r3, [r3, #0]
 80017ac:	b2db      	uxtb	r3, r3
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d1e1      	bne.n	8001776 <SD_disk_initialize+0x132>
 80017b2:	e000      	b.n	80017b6 <SD_disk_initialize+0x172>
            break; /* CMD1 */
 80017b4:	bf00      	nop

      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0)
 80017b6:	4b16      	ldr	r3, [pc, #88]	; (8001810 <SD_disk_initialize+0x1cc>)
 80017b8:	781b      	ldrb	r3, [r3, #0]
 80017ba:	b2db      	uxtb	r3, r3
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d007      	beq.n	80017d0 <SD_disk_initialize+0x18c>
 80017c0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80017c4:	2050      	movs	r0, #80	; 0x50
 80017c6:	f7ff feeb 	bl	80015a0 <SD_SendCmd>
 80017ca:	4603      	mov	r3, r0
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d001      	beq.n	80017d4 <SD_disk_initialize+0x190>
      {
        /* 블럭 길이 선택 */
        type = 0;
 80017d0:	2300      	movs	r3, #0
 80017d2:	73bb      	strb	r3, [r7, #14]
      }
    }
  }

  CardType = type;
 80017d4:	4a0f      	ldr	r2, [pc, #60]	; (8001814 <SD_disk_initialize+0x1d0>)
 80017d6:	7bbb      	ldrb	r3, [r7, #14]
 80017d8:	7013      	strb	r3, [r2, #0]

  DESELECT();
 80017da:	f7ff fd87 	bl	80012ec <DESELECT>

  SPI_RxByte(); /* Idle 상태 전환 (Release DO) */
 80017de:	f7ff fdab 	bl	8001338 <SPI_RxByte>

  if (type)
 80017e2:	7bbb      	ldrb	r3, [r7, #14]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d008      	beq.n	80017fa <SD_disk_initialize+0x1b6>
  {
    /* Clear STA_NOINIT */
    Stat &= ~STA_NOINIT;
 80017e8:	4b08      	ldr	r3, [pc, #32]	; (800180c <SD_disk_initialize+0x1c8>)
 80017ea:	781b      	ldrb	r3, [r3, #0]
 80017ec:	b2db      	uxtb	r3, r3
 80017ee:	f023 0301 	bic.w	r3, r3, #1
 80017f2:	b2da      	uxtb	r2, r3
 80017f4:	4b05      	ldr	r3, [pc, #20]	; (800180c <SD_disk_initialize+0x1c8>)
 80017f6:	701a      	strb	r2, [r3, #0]
 80017f8:	e001      	b.n	80017fe <SD_disk_initialize+0x1ba>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 80017fa:	f7ff fe31 	bl	8001460 <SD_PowerOff>
  }

  return Stat;
 80017fe:	4b03      	ldr	r3, [pc, #12]	; (800180c <SD_disk_initialize+0x1c8>)
 8001800:	781b      	ldrb	r3, [r3, #0]
 8001802:	b2db      	uxtb	r3, r3
}
 8001804:	4618      	mov	r0, r3
 8001806:	3714      	adds	r7, #20
 8001808:	46bd      	mov	sp, r7
 800180a:	bd90      	pop	{r4, r7, pc}
 800180c:	20000004 	.word	0x20000004
 8001810:	20001161 	.word	0x20001161
 8001814:	200002b0 	.word	0x200002b0

08001818 <SD_disk_status>:

/* 디스크 상태 확인 */
DSTATUS SD_disk_status(BYTE drv)
{
 8001818:	b480      	push	{r7}
 800181a:	b083      	sub	sp, #12
 800181c:	af00      	add	r7, sp, #0
 800181e:	4603      	mov	r3, r0
 8001820:	71fb      	strb	r3, [r7, #7]
  if (drv)
 8001822:	79fb      	ldrb	r3, [r7, #7]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d001      	beq.n	800182c <SD_disk_status+0x14>
    return STA_NOINIT;
 8001828:	2301      	movs	r3, #1
 800182a:	e002      	b.n	8001832 <SD_disk_status+0x1a>

  return Stat;
 800182c:	4b03      	ldr	r3, [pc, #12]	; (800183c <SD_disk_status+0x24>)
 800182e:	781b      	ldrb	r3, [r3, #0]
 8001830:	b2db      	uxtb	r3, r3
}
 8001832:	4618      	mov	r0, r3
 8001834:	370c      	adds	r7, #12
 8001836:	46bd      	mov	sp, r7
 8001838:	bc80      	pop	{r7}
 800183a:	4770      	bx	lr
 800183c:	20000004 	.word	0x20000004

08001840 <SD_disk_read>:

/* 섹터 읽기 */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b084      	sub	sp, #16
 8001844:	af00      	add	r7, sp, #0
 8001846:	60b9      	str	r1, [r7, #8]
 8001848:	607a      	str	r2, [r7, #4]
 800184a:	603b      	str	r3, [r7, #0]
 800184c:	4603      	mov	r3, r0
 800184e:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8001850:	7bfb      	ldrb	r3, [r7, #15]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d102      	bne.n	800185c <SD_disk_read+0x1c>
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d101      	bne.n	8001860 <SD_disk_read+0x20>
    return RES_PARERR;
 800185c:	2304      	movs	r3, #4
 800185e:	e051      	b.n	8001904 <SD_disk_read+0xc4>

  if (Stat & STA_NOINIT)
 8001860:	4b2a      	ldr	r3, [pc, #168]	; (800190c <SD_disk_read+0xcc>)
 8001862:	781b      	ldrb	r3, [r3, #0]
 8001864:	b2db      	uxtb	r3, r3
 8001866:	f003 0301 	and.w	r3, r3, #1
 800186a:	2b00      	cmp	r3, #0
 800186c:	d001      	beq.n	8001872 <SD_disk_read+0x32>
    return RES_NOTRDY;
 800186e:	2303      	movs	r3, #3
 8001870:	e048      	b.n	8001904 <SD_disk_read+0xc4>

  if (!(CardType & 4))
 8001872:	4b27      	ldr	r3, [pc, #156]	; (8001910 <SD_disk_read+0xd0>)
 8001874:	781b      	ldrb	r3, [r3, #0]
 8001876:	f003 0304 	and.w	r3, r3, #4
 800187a:	2b00      	cmp	r3, #0
 800187c:	d102      	bne.n	8001884 <SD_disk_read+0x44>
    sector *= 512;      /* 지정 sector를 Byte addressing 단위로 변경 */
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	025b      	lsls	r3, r3, #9
 8001882:	607b      	str	r3, [r7, #4]

  SELECT();
 8001884:	f7ff fd26 	bl	80012d4 <SELECT>

  if (count == 1)
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	2b01      	cmp	r3, #1
 800188c:	d111      	bne.n	80018b2 <SD_disk_read+0x72>
  {
    /* 싱글 블록 읽기 */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 800188e:	6879      	ldr	r1, [r7, #4]
 8001890:	2051      	movs	r0, #81	; 0x51
 8001892:	f7ff fe85 	bl	80015a0 <SD_SendCmd>
 8001896:	4603      	mov	r3, r0
 8001898:	2b00      	cmp	r3, #0
 800189a:	d129      	bne.n	80018f0 <SD_disk_read+0xb0>
 800189c:	f44f 7100 	mov.w	r1, #512	; 0x200
 80018a0:	68b8      	ldr	r0, [r7, #8]
 80018a2:	f7ff fdf3 	bl	800148c <SD_RxDataBlock>
 80018a6:	4603      	mov	r3, r0
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d021      	beq.n	80018f0 <SD_disk_read+0xb0>
      count = 0;
 80018ac:	2300      	movs	r3, #0
 80018ae:	603b      	str	r3, [r7, #0]
 80018b0:	e01e      	b.n	80018f0 <SD_disk_read+0xb0>
  }
  else
  {
    /* 다중 블록 읽기 */
    if (SD_SendCmd(CMD18, sector) == 0)
 80018b2:	6879      	ldr	r1, [r7, #4]
 80018b4:	2052      	movs	r0, #82	; 0x52
 80018b6:	f7ff fe73 	bl	80015a0 <SD_SendCmd>
 80018ba:	4603      	mov	r3, r0
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d117      	bne.n	80018f0 <SD_disk_read+0xb0>
    {
      do {
        if (!SD_RxDataBlock(buff, 512))
 80018c0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80018c4:	68b8      	ldr	r0, [r7, #8]
 80018c6:	f7ff fde1 	bl	800148c <SD_RxDataBlock>
 80018ca:	4603      	mov	r3, r0
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d00a      	beq.n	80018e6 <SD_disk_read+0xa6>
          break;

        buff += 512;
 80018d0:	68bb      	ldr	r3, [r7, #8]
 80018d2:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80018d6:	60bb      	str	r3, [r7, #8]
      } while (--count);
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	3b01      	subs	r3, #1
 80018dc:	603b      	str	r3, [r7, #0]
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d1ed      	bne.n	80018c0 <SD_disk_read+0x80>
 80018e4:	e000      	b.n	80018e8 <SD_disk_read+0xa8>
          break;
 80018e6:	bf00      	nop

      /* STOP_TRANSMISSION, 모든 블럭을 다 읽은 후, 전송 중지 요청 */
      SD_SendCmd(CMD12, 0);
 80018e8:	2100      	movs	r1, #0
 80018ea:	204c      	movs	r0, #76	; 0x4c
 80018ec:	f7ff fe58 	bl	80015a0 <SD_SendCmd>
    }
  }

  DESELECT();
 80018f0:	f7ff fcfc 	bl	80012ec <DESELECT>
  SPI_RxByte(); /* Idle 상태(Release DO) */
 80018f4:	f7ff fd20 	bl	8001338 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	bf14      	ite	ne
 80018fe:	2301      	movne	r3, #1
 8001900:	2300      	moveq	r3, #0
 8001902:	b2db      	uxtb	r3, r3
}
 8001904:	4618      	mov	r0, r3
 8001906:	3710      	adds	r7, #16
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}
 800190c:	20000004 	.word	0x20000004
 8001910:	200002b0 	.word	0x200002b0

08001914 <SD_disk_write>:

/* 섹터 쓰기 */
#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b084      	sub	sp, #16
 8001918:	af00      	add	r7, sp, #0
 800191a:	60b9      	str	r1, [r7, #8]
 800191c:	607a      	str	r2, [r7, #4]
 800191e:	603b      	str	r3, [r7, #0]
 8001920:	4603      	mov	r3, r0
 8001922:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8001924:	7bfb      	ldrb	r3, [r7, #15]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d102      	bne.n	8001930 <SD_disk_write+0x1c>
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d101      	bne.n	8001934 <SD_disk_write+0x20>
    return RES_PARERR;
 8001930:	2304      	movs	r3, #4
 8001932:	e06b      	b.n	8001a0c <SD_disk_write+0xf8>

  if (Stat & STA_NOINIT)
 8001934:	4b37      	ldr	r3, [pc, #220]	; (8001a14 <SD_disk_write+0x100>)
 8001936:	781b      	ldrb	r3, [r3, #0]
 8001938:	b2db      	uxtb	r3, r3
 800193a:	f003 0301 	and.w	r3, r3, #1
 800193e:	2b00      	cmp	r3, #0
 8001940:	d001      	beq.n	8001946 <SD_disk_write+0x32>
    return RES_NOTRDY;
 8001942:	2303      	movs	r3, #3
 8001944:	e062      	b.n	8001a0c <SD_disk_write+0xf8>

  if (Stat & STA_PROTECT)
 8001946:	4b33      	ldr	r3, [pc, #204]	; (8001a14 <SD_disk_write+0x100>)
 8001948:	781b      	ldrb	r3, [r3, #0]
 800194a:	b2db      	uxtb	r3, r3
 800194c:	f003 0304 	and.w	r3, r3, #4
 8001950:	2b00      	cmp	r3, #0
 8001952:	d001      	beq.n	8001958 <SD_disk_write+0x44>
    return RES_WRPRT;
 8001954:	2302      	movs	r3, #2
 8001956:	e059      	b.n	8001a0c <SD_disk_write+0xf8>

  if (!(CardType & 4))
 8001958:	4b2f      	ldr	r3, [pc, #188]	; (8001a18 <SD_disk_write+0x104>)
 800195a:	781b      	ldrb	r3, [r3, #0]
 800195c:	f003 0304 	and.w	r3, r3, #4
 8001960:	2b00      	cmp	r3, #0
 8001962:	d102      	bne.n	800196a <SD_disk_write+0x56>
    sector *= 512; /* 지정 sector를 Byte addressing 단위로 변경 */
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	025b      	lsls	r3, r3, #9
 8001968:	607b      	str	r3, [r7, #4]

  SELECT();
 800196a:	f7ff fcb3 	bl	80012d4 <SELECT>

  if (count == 1)
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	2b01      	cmp	r3, #1
 8001972:	d110      	bne.n	8001996 <SD_disk_write+0x82>
  {
    /* 싱글 블록 쓰기 */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8001974:	6879      	ldr	r1, [r7, #4]
 8001976:	2058      	movs	r0, #88	; 0x58
 8001978:	f7ff fe12 	bl	80015a0 <SD_SendCmd>
 800197c:	4603      	mov	r3, r0
 800197e:	2b00      	cmp	r3, #0
 8001980:	d13a      	bne.n	80019f8 <SD_disk_write+0xe4>
 8001982:	21fe      	movs	r1, #254	; 0xfe
 8001984:	68b8      	ldr	r0, [r7, #8]
 8001986:	f7ff fdb7 	bl	80014f8 <SD_TxDataBlock>
 800198a:	4603      	mov	r3, r0
 800198c:	2b00      	cmp	r3, #0
 800198e:	d033      	beq.n	80019f8 <SD_disk_write+0xe4>
      count = 0;
 8001990:	2300      	movs	r3, #0
 8001992:	603b      	str	r3, [r7, #0]
 8001994:	e030      	b.n	80019f8 <SD_disk_write+0xe4>
  }
  else
  {
    /* 다중 블록 쓰기 */
    if (CardType & 2)
 8001996:	4b20      	ldr	r3, [pc, #128]	; (8001a18 <SD_disk_write+0x104>)
 8001998:	781b      	ldrb	r3, [r3, #0]
 800199a:	f003 0302 	and.w	r3, r3, #2
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d007      	beq.n	80019b2 <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 80019a2:	2100      	movs	r1, #0
 80019a4:	2077      	movs	r0, #119	; 0x77
 80019a6:	f7ff fdfb 	bl	80015a0 <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 80019aa:	6839      	ldr	r1, [r7, #0]
 80019ac:	2057      	movs	r0, #87	; 0x57
 80019ae:	f7ff fdf7 	bl	80015a0 <SD_SendCmd>
    }

    if (SD_SendCmd(CMD25, sector) == 0)
 80019b2:	6879      	ldr	r1, [r7, #4]
 80019b4:	2059      	movs	r0, #89	; 0x59
 80019b6:	f7ff fdf3 	bl	80015a0 <SD_SendCmd>
 80019ba:	4603      	mov	r3, r0
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d11b      	bne.n	80019f8 <SD_disk_write+0xe4>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC))
 80019c0:	21fc      	movs	r1, #252	; 0xfc
 80019c2:	68b8      	ldr	r0, [r7, #8]
 80019c4:	f7ff fd98 	bl	80014f8 <SD_TxDataBlock>
 80019c8:	4603      	mov	r3, r0
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d00a      	beq.n	80019e4 <SD_disk_write+0xd0>
          break;

        buff += 512;
 80019ce:	68bb      	ldr	r3, [r7, #8]
 80019d0:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80019d4:	60bb      	str	r3, [r7, #8]
      } while (--count);
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	3b01      	subs	r3, #1
 80019da:	603b      	str	r3, [r7, #0]
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d1ee      	bne.n	80019c0 <SD_disk_write+0xac>
 80019e2:	e000      	b.n	80019e6 <SD_disk_write+0xd2>
          break;
 80019e4:	bf00      	nop

      if(!SD_TxDataBlock(0, 0xFD))
 80019e6:	21fd      	movs	r1, #253	; 0xfd
 80019e8:	2000      	movs	r0, #0
 80019ea:	f7ff fd85 	bl	80014f8 <SD_TxDataBlock>
 80019ee:	4603      	mov	r3, r0
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d101      	bne.n	80019f8 <SD_disk_write+0xe4>
      {
        count = 1;
 80019f4:	2301      	movs	r3, #1
 80019f6:	603b      	str	r3, [r7, #0]
      }
    }
  }

  DESELECT();
 80019f8:	f7ff fc78 	bl	80012ec <DESELECT>
  SPI_RxByte();
 80019fc:	f7ff fc9c 	bl	8001338 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	bf14      	ite	ne
 8001a06:	2301      	movne	r3, #1
 8001a08:	2300      	moveq	r3, #0
 8001a0a:	b2db      	uxtb	r3, r3
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	3710      	adds	r7, #16
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}
 8001a14:	20000004 	.word	0x20000004
 8001a18:	200002b0 	.word	0x200002b0

08001a1c <SD_disk_ioctl>:
#endif /* _READONLY */

/* 기타 함수 */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 8001a1c:	b590      	push	{r4, r7, lr}
 8001a1e:	b08b      	sub	sp, #44	; 0x2c
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	4603      	mov	r3, r0
 8001a24:	603a      	str	r2, [r7, #0]
 8001a26:	71fb      	strb	r3, [r7, #7]
 8001a28:	460b      	mov	r3, r1
 8001a2a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	623b      	str	r3, [r7, #32]
  WORD csize;

  if (drv)
 8001a30:	79fb      	ldrb	r3, [r7, #7]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d001      	beq.n	8001a3a <SD_disk_ioctl+0x1e>
    return RES_PARERR;
 8001a36:	2304      	movs	r3, #4
 8001a38:	e11b      	b.n	8001c72 <SD_disk_ioctl+0x256>

  res = RES_ERROR;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if (ctrl == CTRL_POWER)
 8001a40:	79bb      	ldrb	r3, [r7, #6]
 8001a42:	2b05      	cmp	r3, #5
 8001a44:	d129      	bne.n	8001a9a <SD_disk_ioctl+0x7e>
  {
    switch (*ptr)
 8001a46:	6a3b      	ldr	r3, [r7, #32]
 8001a48:	781b      	ldrb	r3, [r3, #0]
 8001a4a:	2b02      	cmp	r3, #2
 8001a4c:	d017      	beq.n	8001a7e <SD_disk_ioctl+0x62>
 8001a4e:	2b02      	cmp	r3, #2
 8001a50:	dc1f      	bgt.n	8001a92 <SD_disk_ioctl+0x76>
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d002      	beq.n	8001a5c <SD_disk_ioctl+0x40>
 8001a56:	2b01      	cmp	r3, #1
 8001a58:	d00b      	beq.n	8001a72 <SD_disk_ioctl+0x56>
 8001a5a:	e01a      	b.n	8001a92 <SD_disk_ioctl+0x76>
    {
    case 0:
      if (SD_CheckPower())
 8001a5c:	f7ff fd0c 	bl	8001478 <SD_CheckPower>
 8001a60:	4603      	mov	r3, r0
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d001      	beq.n	8001a6a <SD_disk_ioctl+0x4e>
        SD_PowerOff();          /* Power Off */
 8001a66:	f7ff fcfb 	bl	8001460 <SD_PowerOff>
      res = RES_OK;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001a70:	e0fd      	b.n	8001c6e <SD_disk_ioctl+0x252>
    case 1:
      SD_PowerOn();             /* Power On */
 8001a72:	f7ff fca9 	bl	80013c8 <SD_PowerOn>
      res = RES_OK;
 8001a76:	2300      	movs	r3, #0
 8001a78:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001a7c:	e0f7      	b.n	8001c6e <SD_disk_ioctl+0x252>
    case 2:
      *(ptr + 1) = (BYTE) SD_CheckPower();
 8001a7e:	6a3b      	ldr	r3, [r7, #32]
 8001a80:	1c5c      	adds	r4, r3, #1
 8001a82:	f7ff fcf9 	bl	8001478 <SD_CheckPower>
 8001a86:	4603      	mov	r3, r0
 8001a88:	7023      	strb	r3, [r4, #0]
      res = RES_OK;             /* Power Check */
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001a90:	e0ed      	b.n	8001c6e <SD_disk_ioctl+0x252>
    default:
      res = RES_PARERR;
 8001a92:	2304      	movs	r3, #4
 8001a94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001a98:	e0e9      	b.n	8001c6e <SD_disk_ioctl+0x252>
    }
  }
  else
  {
    if (Stat & STA_NOINIT)
 8001a9a:	4b78      	ldr	r3, [pc, #480]	; (8001c7c <SD_disk_ioctl+0x260>)
 8001a9c:	781b      	ldrb	r3, [r3, #0]
 8001a9e:	b2db      	uxtb	r3, r3
 8001aa0:	f003 0301 	and.w	r3, r3, #1
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d001      	beq.n	8001aac <SD_disk_ioctl+0x90>
      return RES_NOTRDY;
 8001aa8:	2303      	movs	r3, #3
 8001aaa:	e0e2      	b.n	8001c72 <SD_disk_ioctl+0x256>

    SELECT();
 8001aac:	f7ff fc12 	bl	80012d4 <SELECT>

    switch (ctrl)
 8001ab0:	79bb      	ldrb	r3, [r7, #6]
 8001ab2:	2b0d      	cmp	r3, #13
 8001ab4:	f200 80cc 	bhi.w	8001c50 <SD_disk_ioctl+0x234>
 8001ab8:	a201      	add	r2, pc, #4	; (adr r2, 8001ac0 <SD_disk_ioctl+0xa4>)
 8001aba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001abe:	bf00      	nop
 8001ac0:	08001bbb 	.word	0x08001bbb
 8001ac4:	08001af9 	.word	0x08001af9
 8001ac8:	08001bab 	.word	0x08001bab
 8001acc:	08001c51 	.word	0x08001c51
 8001ad0:	08001c51 	.word	0x08001c51
 8001ad4:	08001c51 	.word	0x08001c51
 8001ad8:	08001c51 	.word	0x08001c51
 8001adc:	08001c51 	.word	0x08001c51
 8001ae0:	08001c51 	.word	0x08001c51
 8001ae4:	08001c51 	.word	0x08001c51
 8001ae8:	08001c51 	.word	0x08001c51
 8001aec:	08001bcd 	.word	0x08001bcd
 8001af0:	08001bf1 	.word	0x08001bf1
 8001af4:	08001c15 	.word	0x08001c15
    {
    case GET_SECTOR_COUNT:
      /* SD카드 내 Sector의 개수 (DWORD) */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8001af8:	2100      	movs	r1, #0
 8001afa:	2049      	movs	r0, #73	; 0x49
 8001afc:	f7ff fd50 	bl	80015a0 <SD_SendCmd>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	f040 80a8 	bne.w	8001c58 <SD_disk_ioctl+0x23c>
 8001b08:	f107 030c 	add.w	r3, r7, #12
 8001b0c:	2110      	movs	r1, #16
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f7ff fcbc 	bl	800148c <SD_RxDataBlock>
 8001b14:	4603      	mov	r3, r0
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	f000 809e 	beq.w	8001c58 <SD_disk_ioctl+0x23c>
      {
        if ((csd[0] >> 6) == 1)
 8001b1c:	7b3b      	ldrb	r3, [r7, #12]
 8001b1e:	099b      	lsrs	r3, r3, #6
 8001b20:	b2db      	uxtb	r3, r3
 8001b22:	2b01      	cmp	r3, #1
 8001b24:	d10e      	bne.n	8001b44 <SD_disk_ioctl+0x128>
        {
          /* SDC ver 2.00 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8001b26:	7d7b      	ldrb	r3, [r7, #21]
 8001b28:	b29a      	uxth	r2, r3
 8001b2a:	7d3b      	ldrb	r3, [r7, #20]
 8001b2c:	b29b      	uxth	r3, r3
 8001b2e:	021b      	lsls	r3, r3, #8
 8001b30:	b29b      	uxth	r3, r3
 8001b32:	4413      	add	r3, r2
 8001b34:	b29b      	uxth	r3, r3
 8001b36:	3301      	adds	r3, #1
 8001b38:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 8001b3a:	8bfb      	ldrh	r3, [r7, #30]
 8001b3c:	029a      	lsls	r2, r3, #10
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	601a      	str	r2, [r3, #0]
 8001b42:	e02e      	b.n	8001ba2 <SD_disk_ioctl+0x186>
        }
        else
        {
          /* MMC or SDC ver 1.XX */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8001b44:	7c7b      	ldrb	r3, [r7, #17]
 8001b46:	f003 030f 	and.w	r3, r3, #15
 8001b4a:	b2da      	uxtb	r2, r3
 8001b4c:	7dbb      	ldrb	r3, [r7, #22]
 8001b4e:	09db      	lsrs	r3, r3, #7
 8001b50:	b2db      	uxtb	r3, r3
 8001b52:	4413      	add	r3, r2
 8001b54:	b2da      	uxtb	r2, r3
 8001b56:	7d7b      	ldrb	r3, [r7, #21]
 8001b58:	005b      	lsls	r3, r3, #1
 8001b5a:	b2db      	uxtb	r3, r3
 8001b5c:	f003 0306 	and.w	r3, r3, #6
 8001b60:	b2db      	uxtb	r3, r3
 8001b62:	4413      	add	r3, r2
 8001b64:	b2db      	uxtb	r3, r3
 8001b66:	3302      	adds	r3, #2
 8001b68:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8001b6c:	7d3b      	ldrb	r3, [r7, #20]
 8001b6e:	099b      	lsrs	r3, r3, #6
 8001b70:	b2db      	uxtb	r3, r3
 8001b72:	b29a      	uxth	r2, r3
 8001b74:	7cfb      	ldrb	r3, [r7, #19]
 8001b76:	b29b      	uxth	r3, r3
 8001b78:	009b      	lsls	r3, r3, #2
 8001b7a:	b29b      	uxth	r3, r3
 8001b7c:	4413      	add	r3, r2
 8001b7e:	b29a      	uxth	r2, r3
 8001b80:	7cbb      	ldrb	r3, [r7, #18]
 8001b82:	029b      	lsls	r3, r3, #10
 8001b84:	b29b      	uxth	r3, r3
 8001b86:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001b8a:	b29b      	uxth	r3, r3
 8001b8c:	4413      	add	r3, r2
 8001b8e:	b29b      	uxth	r3, r3
 8001b90:	3301      	adds	r3, #1
 8001b92:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8001b94:	8bfa      	ldrh	r2, [r7, #30]
 8001b96:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001b9a:	3b09      	subs	r3, #9
 8001b9c:	409a      	lsls	r2, r3
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	601a      	str	r2, [r3, #0]
        }

        res = RES_OK;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
      break;
 8001ba8:	e056      	b.n	8001c58 <SD_disk_ioctl+0x23c>

    case GET_SECTOR_SIZE:
      /* 섹터의 단위 크기 (WORD) */
      *(WORD*) buff = 512;
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001bb0:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001bb8:	e055      	b.n	8001c66 <SD_disk_ioctl+0x24a>

    case CTRL_SYNC:
      /* 쓰기 동기화 */
      if (SD_ReadyWait() == 0xFF)
 8001bba:	f7ff fbe9 	bl	8001390 <SD_ReadyWait>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	2bff      	cmp	r3, #255	; 0xff
 8001bc2:	d14b      	bne.n	8001c5c <SD_disk_ioctl+0x240>
        res = RES_OK;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001bca:	e047      	b.n	8001c5c <SD_disk_ioctl+0x240>

    case MMC_GET_CSD:
      /* CSD 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8001bcc:	2100      	movs	r1, #0
 8001bce:	2049      	movs	r0, #73	; 0x49
 8001bd0:	f7ff fce6 	bl	80015a0 <SD_SendCmd>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d142      	bne.n	8001c60 <SD_disk_ioctl+0x244>
 8001bda:	2110      	movs	r1, #16
 8001bdc:	6a38      	ldr	r0, [r7, #32]
 8001bde:	f7ff fc55 	bl	800148c <SD_RxDataBlock>
 8001be2:	4603      	mov	r3, r0
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d03b      	beq.n	8001c60 <SD_disk_ioctl+0x244>
        res = RES_OK;
 8001be8:	2300      	movs	r3, #0
 8001bea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001bee:	e037      	b.n	8001c60 <SD_disk_ioctl+0x244>

    case MMC_GET_CID:
      /* CID 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8001bf0:	2100      	movs	r1, #0
 8001bf2:	204a      	movs	r0, #74	; 0x4a
 8001bf4:	f7ff fcd4 	bl	80015a0 <SD_SendCmd>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d132      	bne.n	8001c64 <SD_disk_ioctl+0x248>
 8001bfe:	2110      	movs	r1, #16
 8001c00:	6a38      	ldr	r0, [r7, #32]
 8001c02:	f7ff fc43 	bl	800148c <SD_RxDataBlock>
 8001c06:	4603      	mov	r3, r0
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d02b      	beq.n	8001c64 <SD_disk_ioctl+0x248>
        res = RES_OK;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001c12:	e027      	b.n	8001c64 <SD_disk_ioctl+0x248>

    case MMC_GET_OCR:
      /* OCR 정보 수신 (4 bytes) */
      if (SD_SendCmd(CMD58, 0) == 0)
 8001c14:	2100      	movs	r1, #0
 8001c16:	207a      	movs	r0, #122	; 0x7a
 8001c18:	f7ff fcc2 	bl	80015a0 <SD_SendCmd>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d116      	bne.n	8001c50 <SD_disk_ioctl+0x234>
      {
        for (n = 0; n < 4; n++)
 8001c22:	2300      	movs	r3, #0
 8001c24:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001c28:	e00b      	b.n	8001c42 <SD_disk_ioctl+0x226>
        {
          *ptr++ = SPI_RxByte();
 8001c2a:	6a3c      	ldr	r4, [r7, #32]
 8001c2c:	1c63      	adds	r3, r4, #1
 8001c2e:	623b      	str	r3, [r7, #32]
 8001c30:	f7ff fb82 	bl	8001338 <SPI_RxByte>
 8001c34:	4603      	mov	r3, r0
 8001c36:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 8001c38:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001c3c:	3301      	adds	r3, #1
 8001c3e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001c42:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001c46:	2b03      	cmp	r3, #3
 8001c48:	d9ef      	bls.n	8001c2a <SD_disk_ioctl+0x20e>
        }

        res = RES_OK;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }

    default:
      res = RES_PARERR;
 8001c50:	2304      	movs	r3, #4
 8001c52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001c56:	e006      	b.n	8001c66 <SD_disk_ioctl+0x24a>
      break;
 8001c58:	bf00      	nop
 8001c5a:	e004      	b.n	8001c66 <SD_disk_ioctl+0x24a>
      break;
 8001c5c:	bf00      	nop
 8001c5e:	e002      	b.n	8001c66 <SD_disk_ioctl+0x24a>
      break;
 8001c60:	bf00      	nop
 8001c62:	e000      	b.n	8001c66 <SD_disk_ioctl+0x24a>
      break;
 8001c64:	bf00      	nop
    }

    DESELECT();
 8001c66:	f7ff fb41 	bl	80012ec <DESELECT>
    SPI_RxByte();
 8001c6a:	f7ff fb65 	bl	8001338 <SPI_RxByte>
  }

  return res;
 8001c6e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	372c      	adds	r7, #44	; 0x2c
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd90      	pop	{r4, r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	20000004 	.word	0x20000004

08001c80 <bufsize>:
char path[PATH_SIZE];  // buffer to store path

int i=0;

int bufsize (char *buf)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b085      	sub	sp, #20
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
	int i=0;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	60fb      	str	r3, [r7, #12]
	while (*buf++ != '\0') i++;
 8001c8c:	e002      	b.n	8001c94 <bufsize+0x14>
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	3301      	adds	r3, #1
 8001c92:	60fb      	str	r3, [r7, #12]
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	1c5a      	adds	r2, r3, #1
 8001c98:	607a      	str	r2, [r7, #4]
 8001c9a:	781b      	ldrb	r3, [r3, #0]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d1f6      	bne.n	8001c8e <bufsize+0xe>
	return i;
 8001ca0:	68fb      	ldr	r3, [r7, #12]
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	3714      	adds	r7, #20
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bc80      	pop	{r7}
 8001caa:	4770      	bx	lr

08001cac <clear_buffer>:

void clear_buffer (void)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b083      	sub	sp, #12
 8001cb0:	af00      	add	r7, sp, #0
	for (int i=0; i<BUFFER_SIZE; i++) buffer[i] = '\0';
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	607b      	str	r3, [r7, #4]
 8001cb6:	e007      	b.n	8001cc8 <clear_buffer+0x1c>
 8001cb8:	4a08      	ldr	r2, [pc, #32]	; (8001cdc <clear_buffer+0x30>)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	4413      	add	r3, r2
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	701a      	strb	r2, [r3, #0]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	3301      	adds	r3, #1
 8001cc6:	607b      	str	r3, [r7, #4]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2b3f      	cmp	r3, #63	; 0x3f
 8001ccc:	ddf4      	ble.n	8001cb8 <clear_buffer+0xc>
}
 8001cce:	bf00      	nop
 8001cd0:	bf00      	nop
 8001cd2:	370c      	adds	r7, #12
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bc80      	pop	{r7}
 8001cd8:	4770      	bx	lr
 8001cda:	bf00      	nop
 8001cdc:	20000c1c 	.word	0x20000c1c

08001ce0 <clear_buffer_SD>:

void clear_buffer_SD (void)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b083      	sub	sp, #12
 8001ce4:	af00      	add	r7, sp, #0
	for (int i=0; i<BUFFER_SIZE*ROW_SIZE; i++) buffer_SD[i] = '\0';
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	607b      	str	r3, [r7, #4]
 8001cea:	e007      	b.n	8001cfc <clear_buffer_SD+0x1c>
 8001cec:	4a08      	ldr	r2, [pc, #32]	; (8001d10 <clear_buffer_SD+0x30>)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	4413      	add	r3, r2
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	701a      	strb	r2, [r3, #0]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	3301      	adds	r3, #1
 8001cfa:	607b      	str	r3, [r7, #4]
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2bff      	cmp	r3, #255	; 0xff
 8001d00:	ddf4      	ble.n	8001cec <clear_buffer_SD+0xc>
}
 8001d02:	bf00      	nop
 8001d04:	bf00      	nop
 8001d06:	370c      	adds	r7, #12
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bc80      	pop	{r7}
 8001d0c:	4770      	bx	lr
 8001d0e:	bf00      	nop
 8001d10:	200006c4 	.word	0x200006c4

08001d14 <clear_path>:

void clear_path (void)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b083      	sub	sp, #12
 8001d18:	af00      	add	r7, sp, #0
	for (int i=0; i<PATH_SIZE; i++) path[i] = '\0';
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	607b      	str	r3, [r7, #4]
 8001d1e:	e007      	b.n	8001d30 <clear_path+0x1c>
 8001d20:	4a08      	ldr	r2, [pc, #32]	; (8001d44 <clear_path+0x30>)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	4413      	add	r3, r2
 8001d26:	2200      	movs	r2, #0
 8001d28:	701a      	strb	r2, [r3, #0]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	3301      	adds	r3, #1
 8001d2e:	607b      	str	r3, [r7, #4]
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2b1f      	cmp	r3, #31
 8001d34:	ddf4      	ble.n	8001d20 <clear_path+0xc>
}
 8001d36:	bf00      	nop
 8001d38:	bf00      	nop
 8001d3a:	370c      	adds	r7, #12
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bc80      	pop	{r7}
 8001d40:	4770      	bx	lr
 8001d42:	bf00      	nop
 8001d44:	200006a4 	.word	0x200006a4

08001d48 <send_uart>:

void send_uart (char *string)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b084      	sub	sp, #16
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
	uint8_t len = strlen ((const char *) string);
 8001d50:	6878      	ldr	r0, [r7, #4]
 8001d52:	f7fe fa07 	bl	8000164 <strlen>
 8001d56:	4603      	mov	r3, r0
 8001d58:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart1, (uint8_t *) string, len, 2000);
 8001d5a:	7bfb      	ldrb	r3, [r7, #15]
 8001d5c:	b29a      	uxth	r2, r3
 8001d5e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001d62:	6879      	ldr	r1, [r7, #4]
 8001d64:	4803      	ldr	r0, [pc, #12]	; (8001d74 <send_uart+0x2c>)
 8001d66:	f003 ffe8 	bl	8005d3a <HAL_UART_Transmit>
	//	Uart_sendstring(string);
	//	clear_buffer();
}
 8001d6a:	bf00      	nop
 8001d6c:	3710      	adds	r7, #16
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	200005c4 	.word	0x200005c4

08001d78 <cmdlength>:

int cmdlength (char *str)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b085      	sub	sp, #20
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
	int i=0;
 8001d80:	2300      	movs	r3, #0
 8001d82:	60fb      	str	r3, [r7, #12]
	while (*str++ != ' ') i++;
 8001d84:	e002      	b.n	8001d8c <cmdlength+0x14>
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	3301      	adds	r3, #1
 8001d8a:	60fb      	str	r3, [r7, #12]
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	1c5a      	adds	r2, r3, #1
 8001d90:	607a      	str	r2, [r7, #4]
 8001d92:	781b      	ldrb	r3, [r3, #0]
 8001d94:	2b20      	cmp	r3, #32
 8001d96:	d1f6      	bne.n	8001d86 <cmdlength+0xe>
	return i;
 8001d98:	68fb      	ldr	r3, [r7, #12]
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	3714      	adds	r7, #20
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bc80      	pop	{r7}
 8001da2:	4770      	bx	lr

08001da4 <get_path>:
void get_path (void)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b084      	sub	sp, #16
 8001da8:	af00      	add	r7, sp, #0
	int start = cmdlength(buffer)+1;
 8001daa:	4816      	ldr	r0, [pc, #88]	; (8001e04 <get_path+0x60>)
 8001dac:	f7ff ffe4 	bl	8001d78 <cmdlength>
 8001db0:	4603      	mov	r3, r0
 8001db2:	3301      	adds	r3, #1
 8001db4:	607b      	str	r3, [r7, #4]
	int end = bufsize(buffer)-2;
 8001db6:	4813      	ldr	r0, [pc, #76]	; (8001e04 <get_path+0x60>)
 8001db8:	f7ff ff62 	bl	8001c80 <bufsize>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	3b02      	subs	r3, #2
 8001dc0:	603b      	str	r3, [r7, #0]

	int j=0;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	60fb      	str	r3, [r7, #12]
	for (int i=start; i<end; i++)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	60bb      	str	r3, [r7, #8]
 8001dca:	e011      	b.n	8001df0 <get_path+0x4c>
	{
		if (buffer[i] != ' ') path[j++] = buffer[i];
 8001dcc:	4a0d      	ldr	r2, [pc, #52]	; (8001e04 <get_path+0x60>)
 8001dce:	68bb      	ldr	r3, [r7, #8]
 8001dd0:	4413      	add	r3, r2
 8001dd2:	781b      	ldrb	r3, [r3, #0]
 8001dd4:	2b20      	cmp	r3, #32
 8001dd6:	d010      	beq.n	8001dfa <get_path+0x56>
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	1c5a      	adds	r2, r3, #1
 8001ddc:	60fa      	str	r2, [r7, #12]
 8001dde:	4909      	ldr	r1, [pc, #36]	; (8001e04 <get_path+0x60>)
 8001de0:	68ba      	ldr	r2, [r7, #8]
 8001de2:	440a      	add	r2, r1
 8001de4:	7811      	ldrb	r1, [r2, #0]
 8001de6:	4a08      	ldr	r2, [pc, #32]	; (8001e08 <get_path+0x64>)
 8001de8:	54d1      	strb	r1, [r2, r3]
	for (int i=start; i<end; i++)
 8001dea:	68bb      	ldr	r3, [r7, #8]
 8001dec:	3301      	adds	r3, #1
 8001dee:	60bb      	str	r3, [r7, #8]
 8001df0:	68ba      	ldr	r2, [r7, #8]
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	429a      	cmp	r2, r3
 8001df6:	dbe9      	blt.n	8001dcc <get_path+0x28>
		else break;
	}
}
 8001df8:	e000      	b.n	8001dfc <get_path+0x58>
		else break;
 8001dfa:	bf00      	nop
}
 8001dfc:	bf00      	nop
 8001dfe:	3710      	adds	r7, #16
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}
 8001e04:	20000c1c 	.word	0x20000c1c
 8001e08:	200006a4 	.word	0x200006a4

08001e0c <mount_sd>:

void mount_sd (void)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	af00      	add	r7, sp, #0
	fresult = f_mount(&fs, "/", 1);
 8001e10:	2201      	movs	r2, #1
 8001e12:	490a      	ldr	r1, [pc, #40]	; (8001e3c <mount_sd+0x30>)
 8001e14:	480a      	ldr	r0, [pc, #40]	; (8001e40 <mount_sd+0x34>)
 8001e16:	f006 fedf 	bl	8008bd8 <f_mount>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	461a      	mov	r2, r3
 8001e1e:	4b09      	ldr	r3, [pc, #36]	; (8001e44 <mount_sd+0x38>)
 8001e20:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK) send_uart ("Erro ao montar SD...\n");
 8001e22:	4b08      	ldr	r3, [pc, #32]	; (8001e44 <mount_sd+0x38>)
 8001e24:	781b      	ldrb	r3, [r3, #0]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d003      	beq.n	8001e32 <mount_sd+0x26>
 8001e2a:	4807      	ldr	r0, [pc, #28]	; (8001e48 <mount_sd+0x3c>)
 8001e2c:	f7ff ff8c 	bl	8001d48 <send_uart>
	else send_uart("SD montado com sucesso...\n");
}
 8001e30:	e002      	b.n	8001e38 <mount_sd+0x2c>
	else send_uart("SD montado com sucesso...\n");
 8001e32:	4806      	ldr	r0, [pc, #24]	; (8001e4c <mount_sd+0x40>)
 8001e34:	f7ff ff88 	bl	8001d48 <send_uart>
}
 8001e38:	bf00      	nop
 8001e3a:	bd80      	pop	{r7, pc}
 8001e3c:	0800d2bc 	.word	0x0800d2bc
 8001e40:	200007e4 	.word	0x200007e4
 8001e44:	20000c64 	.word	0x20000c64
 8001e48:	0800d2c0 	.word	0x0800d2c0
 8001e4c:	0800d2d8 	.word	0x0800d2d8

08001e50 <scan_files>:
	else send_uart("Erro ao desmontar SD...\n");
}

/* Start node to be scanned (***also used as work area***) */
FRESULT scan_files (char* pat)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	f5ad 6d89 	sub.w	sp, sp, #1096	; 0x448
 8001e56:	af00      	add	r7, sp, #0
 8001e58:	1d3b      	adds	r3, r7, #4
 8001e5a:	6018      	str	r0, [r3, #0]
	DIR dir;
	UINT i;

	char path[20];
	sprintf (path, "%s",pat);
 8001e5c:	1d3b      	adds	r3, r7, #4
 8001e5e:	f107 0008 	add.w	r0, r7, #8
 8001e62:	681a      	ldr	r2, [r3, #0]
 8001e64:	493c      	ldr	r1, [pc, #240]	; (8001f58 <scan_files+0x108>)
 8001e66:	f008 ff77 	bl	800ad58 <siprintf>

	fresult = f_opendir(&dir, path);                       /* Open the directory */
 8001e6a:	f107 0208 	add.w	r2, r7, #8
 8001e6e:	f107 031c 	add.w	r3, r7, #28
 8001e72:	4611      	mov	r1, r2
 8001e74:	4618      	mov	r0, r3
 8001e76:	f007 fd77 	bl	8009968 <f_opendir>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	461a      	mov	r2, r3
 8001e7e:	4b37      	ldr	r3, [pc, #220]	; (8001f5c <scan_files+0x10c>)
 8001e80:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK)
 8001e82:	4b36      	ldr	r3, [pc, #216]	; (8001f5c <scan_files+0x10c>)
 8001e84:	781b      	ldrb	r3, [r3, #0]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d15f      	bne.n	8001f4a <scan_files+0xfa>
	{
		for (;;)
		{
			fresult = f_readdir(&dir, &fno);                   /* Read a directory item */
 8001e8a:	f107 031c 	add.w	r3, r7, #28
 8001e8e:	4934      	ldr	r1, [pc, #208]	; (8001f60 <scan_files+0x110>)
 8001e90:	4618      	mov	r0, r3
 8001e92:	f007 fe17 	bl	8009ac4 <f_readdir>
 8001e96:	4603      	mov	r3, r0
 8001e98:	461a      	mov	r2, r3
 8001e9a:	4b30      	ldr	r3, [pc, #192]	; (8001f5c <scan_files+0x10c>)
 8001e9c:	701a      	strb	r2, [r3, #0]
			if (fresult != FR_OK || fno.fname[0] == 0) break;  /* Break on error or end of dir */
 8001e9e:	4b2f      	ldr	r3, [pc, #188]	; (8001f5c <scan_files+0x10c>)
 8001ea0:	781b      	ldrb	r3, [r3, #0]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d14c      	bne.n	8001f40 <scan_files+0xf0>
 8001ea6:	4b2e      	ldr	r3, [pc, #184]	; (8001f60 <scan_files+0x110>)
 8001ea8:	7a5b      	ldrb	r3, [r3, #9]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d048      	beq.n	8001f40 <scan_files+0xf0>
			if (fno.fattrib & AM_DIR)     /* It is a directory */
 8001eae:	4b2c      	ldr	r3, [pc, #176]	; (8001f60 <scan_files+0x110>)
 8001eb0:	7a1b      	ldrb	r3, [r3, #8]
 8001eb2:	f003 0310 	and.w	r3, r3, #16
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d034      	beq.n	8001f24 <scan_files+0xd4>
			{
				if (!(strcmp ("SYSTEM~1", fno.fname))) continue;
 8001eba:	492a      	ldr	r1, [pc, #168]	; (8001f64 <scan_files+0x114>)
 8001ebc:	482a      	ldr	r0, [pc, #168]	; (8001f68 <scan_files+0x118>)
 8001ebe:	f7fe f947 	bl	8000150 <strcmp>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d038      	beq.n	8001f3a <scan_files+0xea>
				sprintf (buffer, "Dir: %s\r\n", fno.fname);
 8001ec8:	4a26      	ldr	r2, [pc, #152]	; (8001f64 <scan_files+0x114>)
 8001eca:	4928      	ldr	r1, [pc, #160]	; (8001f6c <scan_files+0x11c>)
 8001ecc:	4828      	ldr	r0, [pc, #160]	; (8001f70 <scan_files+0x120>)
 8001ece:	f008 ff43 	bl	800ad58 <siprintf>
				send_uart(buffer);
 8001ed2:	4827      	ldr	r0, [pc, #156]	; (8001f70 <scan_files+0x120>)
 8001ed4:	f7ff ff38 	bl	8001d48 <send_uart>
				i = strlen(path);
 8001ed8:	f107 0308 	add.w	r3, r7, #8
 8001edc:	4618      	mov	r0, r3
 8001ede:	f7fe f941 	bl	8000164 <strlen>
 8001ee2:	f8c7 0444 	str.w	r0, [r7, #1092]	; 0x444
				sprintf(&path[i], "/%s", fno.fname);
 8001ee6:	f107 0208 	add.w	r2, r7, #8
 8001eea:	f8d7 3444 	ldr.w	r3, [r7, #1092]	; 0x444
 8001eee:	4413      	add	r3, r2
 8001ef0:	4a1c      	ldr	r2, [pc, #112]	; (8001f64 <scan_files+0x114>)
 8001ef2:	4920      	ldr	r1, [pc, #128]	; (8001f74 <scan_files+0x124>)
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f008 ff2f 	bl	800ad58 <siprintf>
				fresult = scan_files(path);                     /* Enter the directory */
 8001efa:	f107 0308 	add.w	r3, r7, #8
 8001efe:	4618      	mov	r0, r3
 8001f00:	f7ff ffa6 	bl	8001e50 <scan_files>
 8001f04:	4603      	mov	r3, r0
 8001f06:	461a      	mov	r2, r3
 8001f08:	4b14      	ldr	r3, [pc, #80]	; (8001f5c <scan_files+0x10c>)
 8001f0a:	701a      	strb	r2, [r3, #0]
				if (fresult != FR_OK) break;
 8001f0c:	4b13      	ldr	r3, [pc, #76]	; (8001f5c <scan_files+0x10c>)
 8001f0e:	781b      	ldrb	r3, [r3, #0]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d114      	bne.n	8001f3e <scan_files+0xee>
				path[i] = 0;
 8001f14:	f107 0208 	add.w	r2, r7, #8
 8001f18:	f8d7 3444 	ldr.w	r3, [r7, #1092]	; 0x444
 8001f1c:	4413      	add	r3, r2
 8001f1e:	2200      	movs	r2, #0
 8001f20:	701a      	strb	r2, [r3, #0]
 8001f22:	e7b2      	b.n	8001e8a <scan_files+0x3a>
			}
			else
			{                                       /* It is a file. */
				sprintf(buffer,"File: %s/%s\n", path, fno.fname);
 8001f24:	f107 0208 	add.w	r2, r7, #8
 8001f28:	4b0e      	ldr	r3, [pc, #56]	; (8001f64 <scan_files+0x114>)
 8001f2a:	4913      	ldr	r1, [pc, #76]	; (8001f78 <scan_files+0x128>)
 8001f2c:	4810      	ldr	r0, [pc, #64]	; (8001f70 <scan_files+0x120>)
 8001f2e:	f008 ff13 	bl	800ad58 <siprintf>
				send_uart(buffer);
 8001f32:	480f      	ldr	r0, [pc, #60]	; (8001f70 <scan_files+0x120>)
 8001f34:	f7ff ff08 	bl	8001d48 <send_uart>
 8001f38:	e7a7      	b.n	8001e8a <scan_files+0x3a>
				if (!(strcmp ("SYSTEM~1", fno.fname))) continue;
 8001f3a:	bf00      	nop
			fresult = f_readdir(&dir, &fno);                   /* Read a directory item */
 8001f3c:	e7a5      	b.n	8001e8a <scan_files+0x3a>
				if (fresult != FR_OK) break;
 8001f3e:	bf00      	nop
			}
		}
		f_closedir(&dir);
 8001f40:	f107 031c 	add.w	r3, r7, #28
 8001f44:	4618      	mov	r0, r3
 8001f46:	f007 fd97 	bl	8009a78 <f_closedir>
	}
	return fresult;
 8001f4a:	4b04      	ldr	r3, [pc, #16]	; (8001f5c <scan_files+0x10c>)
 8001f4c:	781b      	ldrb	r3, [r3, #0]
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f507 6789 	add.w	r7, r7, #1096	; 0x448
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}
 8001f58:	0800d330 	.word	0x0800d330
 8001f5c:	20000c64 	.word	0x20000c64
 8001f60:	200007c4 	.word	0x200007c4
 8001f64:	200007cd 	.word	0x200007cd
 8001f68:	0800d334 	.word	0x0800d334
 8001f6c:	0800d340 	.word	0x0800d340
 8001f70:	20000c1c 	.word	0x20000c1c
 8001f74:	0800d34c 	.word	0x0800d34c
 8001f78:	0800d350 	.word	0x0800d350

08001f7c <write_file>:

void write_file (char *name)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b082      	sub	sp, #8
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]

	/**** check whether the file exists or not ****/
	fresult = f_stat (name, &fno);
 8001f84:	4940      	ldr	r1, [pc, #256]	; (8002088 <write_file+0x10c>)
 8001f86:	6878      	ldr	r0, [r7, #4]
 8001f88:	f007 fde8 	bl	8009b5c <f_stat>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	461a      	mov	r2, r3
 8001f90:	4b3e      	ldr	r3, [pc, #248]	; (800208c <write_file+0x110>)
 8001f92:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 8001f94:	4b3d      	ldr	r3, [pc, #244]	; (800208c <write_file+0x110>)
 8001f96:	781b      	ldrb	r3, [r3, #0]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d008      	beq.n	8001fae <write_file+0x32>
	{
		sprintf (buffer, "*%s* nao existe.\n", name);
 8001f9c:	687a      	ldr	r2, [r7, #4]
 8001f9e:	493c      	ldr	r1, [pc, #240]	; (8002090 <write_file+0x114>)
 8001fa0:	483c      	ldr	r0, [pc, #240]	; (8002094 <write_file+0x118>)
 8001fa2:	f008 fed9 	bl	800ad58 <siprintf>
		send_uart (buffer);
 8001fa6:	483b      	ldr	r0, [pc, #236]	; (8002094 <write_file+0x118>)
 8001fa8:	f7ff fece 	bl	8001d48 <send_uart>
		{
			sprintf (buffer, "error no %d in closing file *%s*\n", fresult, name);
			send_uart(buffer);
		}
	}
}
 8001fac:	e068      	b.n	8002080 <write_file+0x104>
		fresult = f_open(&fil, name, FA_OPEN_EXISTING | FA_WRITE);
 8001fae:	2202      	movs	r2, #2
 8001fb0:	6879      	ldr	r1, [r7, #4]
 8001fb2:	4839      	ldr	r0, [pc, #228]	; (8002098 <write_file+0x11c>)
 8001fb4:	f006 fe58 	bl	8008c68 <f_open>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	461a      	mov	r2, r3
 8001fbc:	4b33      	ldr	r3, [pc, #204]	; (800208c <write_file+0x110>)
 8001fbe:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 8001fc0:	4b32      	ldr	r3, [pc, #200]	; (800208c <write_file+0x110>)
 8001fc2:	781b      	ldrb	r3, [r3, #0]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d00b      	beq.n	8001fe0 <write_file+0x64>
			sprintf (buffer, "Erro no %d ao abrir arquivo *%s*\n", fresult, name);
 8001fc8:	4b30      	ldr	r3, [pc, #192]	; (800208c <write_file+0x110>)
 8001fca:	781b      	ldrb	r3, [r3, #0]
 8001fcc:	461a      	mov	r2, r3
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	4932      	ldr	r1, [pc, #200]	; (800209c <write_file+0x120>)
 8001fd2:	4830      	ldr	r0, [pc, #192]	; (8002094 <write_file+0x118>)
 8001fd4:	f008 fec0 	bl	800ad58 <siprintf>
			send_uart(buffer);
 8001fd8:	482e      	ldr	r0, [pc, #184]	; (8002094 <write_file+0x118>)
 8001fda:	f7ff feb5 	bl	8001d48 <send_uart>
 8001fde:	e007      	b.n	8001ff0 <write_file+0x74>
			sprintf (buffer, "file *%s* is opened. Now enter the string you want to write\n", name);
 8001fe0:	687a      	ldr	r2, [r7, #4]
 8001fe2:	492f      	ldr	r1, [pc, #188]	; (80020a0 <write_file+0x124>)
 8001fe4:	482b      	ldr	r0, [pc, #172]	; (8002094 <write_file+0x118>)
 8001fe6:	f008 feb7 	bl	800ad58 <siprintf>
			send_uart (buffer);
 8001fea:	482a      	ldr	r0, [pc, #168]	; (8002094 <write_file+0x118>)
 8001fec:	f7ff feac 	bl	8001d48 <send_uart>
		while (!(wait_until("\r\n", buffer)));
 8001ff0:	bf00      	nop
 8001ff2:	4928      	ldr	r1, [pc, #160]	; (8002094 <write_file+0x118>)
 8001ff4:	482b      	ldr	r0, [pc, #172]	; (80020a4 <write_file+0x128>)
 8001ff6:	f7fe fe49 	bl	8000c8c <wait_until>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d0f8      	beq.n	8001ff2 <write_file+0x76>
		fresult = f_write(&fil, buffer, bufsize(buffer), &bw);
 8002000:	4824      	ldr	r0, [pc, #144]	; (8002094 <write_file+0x118>)
 8002002:	f7ff fe3d 	bl	8001c80 <bufsize>
 8002006:	4603      	mov	r3, r0
 8002008:	461a      	mov	r2, r3
 800200a:	4b27      	ldr	r3, [pc, #156]	; (80020a8 <write_file+0x12c>)
 800200c:	4921      	ldr	r1, [pc, #132]	; (8002094 <write_file+0x118>)
 800200e:	4822      	ldr	r0, [pc, #136]	; (8002098 <write_file+0x11c>)
 8002010:	f007 f9e1 	bl	80093d6 <f_write>
 8002014:	4603      	mov	r3, r0
 8002016:	461a      	mov	r2, r3
 8002018:	4b1c      	ldr	r3, [pc, #112]	; (800208c <write_file+0x110>)
 800201a:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 800201c:	4b1b      	ldr	r3, [pc, #108]	; (800208c <write_file+0x110>)
 800201e:	781b      	ldrb	r3, [r3, #0]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d00d      	beq.n	8002040 <write_file+0xc4>
			clear_buffer();
 8002024:	f7ff fe42 	bl	8001cac <clear_buffer>
			sprintf (buffer, "error no %d in writing file *%s*\n", fresult, name);
 8002028:	4b18      	ldr	r3, [pc, #96]	; (800208c <write_file+0x110>)
 800202a:	781b      	ldrb	r3, [r3, #0]
 800202c:	461a      	mov	r2, r3
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	491e      	ldr	r1, [pc, #120]	; (80020ac <write_file+0x130>)
 8002032:	4818      	ldr	r0, [pc, #96]	; (8002094 <write_file+0x118>)
 8002034:	f008 fe90 	bl	800ad58 <siprintf>
			send_uart(buffer);
 8002038:	4816      	ldr	r0, [pc, #88]	; (8002094 <write_file+0x118>)
 800203a:	f7ff fe85 	bl	8001d48 <send_uart>
 800203e:	e009      	b.n	8002054 <write_file+0xd8>
			clear_buffer();
 8002040:	f7ff fe34 	bl	8001cac <clear_buffer>
			sprintf (buffer, "*%s* written successfully\n", name);
 8002044:	687a      	ldr	r2, [r7, #4]
 8002046:	491a      	ldr	r1, [pc, #104]	; (80020b0 <write_file+0x134>)
 8002048:	4812      	ldr	r0, [pc, #72]	; (8002094 <write_file+0x118>)
 800204a:	f008 fe85 	bl	800ad58 <siprintf>
			send_uart(buffer);
 800204e:	4811      	ldr	r0, [pc, #68]	; (8002094 <write_file+0x118>)
 8002050:	f7ff fe7a 	bl	8001d48 <send_uart>
		fresult = f_close(&fil);
 8002054:	4810      	ldr	r0, [pc, #64]	; (8002098 <write_file+0x11c>)
 8002056:	f007 fc5f 	bl	8009918 <f_close>
 800205a:	4603      	mov	r3, r0
 800205c:	461a      	mov	r2, r3
 800205e:	4b0b      	ldr	r3, [pc, #44]	; (800208c <write_file+0x110>)
 8002060:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 8002062:	4b0a      	ldr	r3, [pc, #40]	; (800208c <write_file+0x110>)
 8002064:	781b      	ldrb	r3, [r3, #0]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d00a      	beq.n	8002080 <write_file+0x104>
			sprintf (buffer, "error no %d in closing file *%s*\n", fresult, name);
 800206a:	4b08      	ldr	r3, [pc, #32]	; (800208c <write_file+0x110>)
 800206c:	781b      	ldrb	r3, [r3, #0]
 800206e:	461a      	mov	r2, r3
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	4910      	ldr	r1, [pc, #64]	; (80020b4 <write_file+0x138>)
 8002074:	4807      	ldr	r0, [pc, #28]	; (8002094 <write_file+0x118>)
 8002076:	f008 fe6f 	bl	800ad58 <siprintf>
			send_uart(buffer);
 800207a:	4806      	ldr	r0, [pc, #24]	; (8002094 <write_file+0x118>)
 800207c:	f7ff fe64 	bl	8001d48 <send_uart>
}
 8002080:	bf00      	nop
 8002082:	3708      	adds	r7, #8
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}
 8002088:	200007c4 	.word	0x200007c4
 800208c:	20000c64 	.word	0x20000c64
 8002090:	0800d360 	.word	0x0800d360
 8002094:	20000c1c 	.word	0x20000c1c
 8002098:	20000c6c 	.word	0x20000c6c
 800209c:	0800d374 	.word	0x0800d374
 80020a0:	0800d398 	.word	0x0800d398
 80020a4:	0800d3d8 	.word	0x0800d3d8
 80020a8:	20000c5c 	.word	0x20000c5c
 80020ac:	0800d3dc 	.word	0x0800d3dc
 80020b0:	0800d400 	.word	0x0800d400
 80020b4:	0800d41c 	.word	0x0800d41c

080020b8 <write_file_mod>:

void write_file_mod (char *name, char *buffer_adc)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b082      	sub	sp, #8
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
 80020c0:	6039      	str	r1, [r7, #0]


	//		sprintf(buffer,"%lu\t%lu\t%lu\n",((unsigned long)adc_return1, (unsigned long)adc_return2, (unsigned long)adc_return3));
	fresult = f_write(&fil, buffer_adc, bufsize(buffer_adc), &bw);
 80020c2:	6838      	ldr	r0, [r7, #0]
 80020c4:	f7ff fddc 	bl	8001c80 <bufsize>
 80020c8:	4603      	mov	r3, r0
 80020ca:	461a      	mov	r2, r3
 80020cc:	4b0e      	ldr	r3, [pc, #56]	; (8002108 <write_file_mod+0x50>)
 80020ce:	6839      	ldr	r1, [r7, #0]
 80020d0:	480e      	ldr	r0, [pc, #56]	; (800210c <write_file_mod+0x54>)
 80020d2:	f007 f980 	bl	80093d6 <f_write>
 80020d6:	4603      	mov	r3, r0
 80020d8:	461a      	mov	r2, r3
 80020da:	4b0d      	ldr	r3, [pc, #52]	; (8002110 <write_file_mod+0x58>)
 80020dc:	701a      	strb	r2, [r3, #0]

	if (fresult != FR_OK)
 80020de:	4b0c      	ldr	r3, [pc, #48]	; (8002110 <write_file_mod+0x58>)
 80020e0:	781b      	ldrb	r3, [r3, #0]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d00c      	beq.n	8002100 <write_file_mod+0x48>
	{
		clear_buffer();
 80020e6:	f7ff fde1 	bl	8001cac <clear_buffer>
		sprintf (buffer, "error no %d in writing file *%s*\n", fresult, name);
 80020ea:	4b09      	ldr	r3, [pc, #36]	; (8002110 <write_file_mod+0x58>)
 80020ec:	781b      	ldrb	r3, [r3, #0]
 80020ee:	461a      	mov	r2, r3
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	4908      	ldr	r1, [pc, #32]	; (8002114 <write_file_mod+0x5c>)
 80020f4:	4808      	ldr	r0, [pc, #32]	; (8002118 <write_file_mod+0x60>)
 80020f6:	f008 fe2f 	bl	800ad58 <siprintf>
		send_uart(buffer);
 80020fa:	4807      	ldr	r0, [pc, #28]	; (8002118 <write_file_mod+0x60>)
 80020fc:	f7ff fe24 	bl	8001d48 <send_uart>

	else
	{
	}

}
 8002100:	bf00      	nop
 8002102:	3708      	adds	r7, #8
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}
 8002108:	20000c5c 	.word	0x20000c5c
 800210c:	20000c6c 	.word	0x20000c6c
 8002110:	20000c64 	.word	0x20000c64
 8002114:	0800d3dc 	.word	0x0800d3dc
 8002118:	20000c1c 	.word	0x20000c1c

0800211c <read_file>:

void read_file (char *name)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b082      	sub	sp, #8
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
	/**** check whether the file exists or not ****/
	fresult = f_stat (name, &fno);
 8002124:	4937      	ldr	r1, [pc, #220]	; (8002204 <read_file+0xe8>)
 8002126:	6878      	ldr	r0, [r7, #4]
 8002128:	f007 fd18 	bl	8009b5c <f_stat>
 800212c:	4603      	mov	r3, r0
 800212e:	461a      	mov	r2, r3
 8002130:	4b35      	ldr	r3, [pc, #212]	; (8002208 <read_file+0xec>)
 8002132:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 8002134:	4b34      	ldr	r3, [pc, #208]	; (8002208 <read_file+0xec>)
 8002136:	781b      	ldrb	r3, [r3, #0]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d008      	beq.n	800214e <read_file+0x32>
	{
		sprintf (buffer, "*%s* does not exists\n", name);
 800213c:	687a      	ldr	r2, [r7, #4]
 800213e:	4933      	ldr	r1, [pc, #204]	; (800220c <read_file+0xf0>)
 8002140:	4833      	ldr	r0, [pc, #204]	; (8002210 <read_file+0xf4>)
 8002142:	f008 fe09 	bl	800ad58 <siprintf>
		send_uart (buffer);
 8002146:	4832      	ldr	r0, [pc, #200]	; (8002210 <read_file+0xf4>)
 8002148:	f7ff fdfe 	bl	8001d48 <send_uart>
		{
			sprintf (buffer, "error no %d in closing file *%s*\n", fresult, name);
			send_uart(buffer);
		}
	}
}
 800214c:	e056      	b.n	80021fc <read_file+0xe0>
		fresult = f_open(&fil, name, FA_READ);
 800214e:	2201      	movs	r2, #1
 8002150:	6879      	ldr	r1, [r7, #4]
 8002152:	4830      	ldr	r0, [pc, #192]	; (8002214 <read_file+0xf8>)
 8002154:	f006 fd88 	bl	8008c68 <f_open>
 8002158:	4603      	mov	r3, r0
 800215a:	461a      	mov	r2, r3
 800215c:	4b2a      	ldr	r3, [pc, #168]	; (8002208 <read_file+0xec>)
 800215e:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 8002160:	4b29      	ldr	r3, [pc, #164]	; (8002208 <read_file+0xec>)
 8002162:	781b      	ldrb	r3, [r3, #0]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d00a      	beq.n	800217e <read_file+0x62>
			sprintf (buffer, "error no %d in opening file *%s*\n", fresult, name);
 8002168:	4b27      	ldr	r3, [pc, #156]	; (8002208 <read_file+0xec>)
 800216a:	781b      	ldrb	r3, [r3, #0]
 800216c:	461a      	mov	r2, r3
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	4929      	ldr	r1, [pc, #164]	; (8002218 <read_file+0xfc>)
 8002172:	4827      	ldr	r0, [pc, #156]	; (8002210 <read_file+0xf4>)
 8002174:	f008 fdf0 	bl	800ad58 <siprintf>
			send_uart(buffer);
 8002178:	4825      	ldr	r0, [pc, #148]	; (8002210 <read_file+0xf4>)
 800217a:	f7ff fde5 	bl	8001d48 <send_uart>
		sprintf (buffer, "reading data from the file *%s*\n", name);
 800217e:	687a      	ldr	r2, [r7, #4]
 8002180:	4926      	ldr	r1, [pc, #152]	; (800221c <read_file+0x100>)
 8002182:	4823      	ldr	r0, [pc, #140]	; (8002210 <read_file+0xf4>)
 8002184:	f008 fde8 	bl	800ad58 <siprintf>
		send_uart (buffer);
 8002188:	4821      	ldr	r0, [pc, #132]	; (8002210 <read_file+0xf4>)
 800218a:	f7ff fddd 	bl	8001d48 <send_uart>
		fresult = f_read (&fil, buffer, f_size(&fil), &br);
 800218e:	4b21      	ldr	r3, [pc, #132]	; (8002214 <read_file+0xf8>)
 8002190:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8002194:	4b22      	ldr	r3, [pc, #136]	; (8002220 <read_file+0x104>)
 8002196:	491e      	ldr	r1, [pc, #120]	; (8002210 <read_file+0xf4>)
 8002198:	481e      	ldr	r0, [pc, #120]	; (8002214 <read_file+0xf8>)
 800219a:	f006 ff77 	bl	800908c <f_read>
 800219e:	4603      	mov	r3, r0
 80021a0:	461a      	mov	r2, r3
 80021a2:	4b19      	ldr	r3, [pc, #100]	; (8002208 <read_file+0xec>)
 80021a4:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 80021a6:	4b18      	ldr	r3, [pc, #96]	; (8002208 <read_file+0xec>)
 80021a8:	781b      	ldrb	r3, [r3, #0]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d00d      	beq.n	80021ca <read_file+0xae>
			clear_buffer();
 80021ae:	f7ff fd7d 	bl	8001cac <clear_buffer>
			sprintf (buffer, "error no %d in reading file *%s*\n", fresult, name);
 80021b2:	4b15      	ldr	r3, [pc, #84]	; (8002208 <read_file+0xec>)
 80021b4:	781b      	ldrb	r3, [r3, #0]
 80021b6:	461a      	mov	r2, r3
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	491a      	ldr	r1, [pc, #104]	; (8002224 <read_file+0x108>)
 80021bc:	4814      	ldr	r0, [pc, #80]	; (8002210 <read_file+0xf4>)
 80021be:	f008 fdcb 	bl	800ad58 <siprintf>
			send_uart(buffer);
 80021c2:	4813      	ldr	r0, [pc, #76]	; (8002210 <read_file+0xf4>)
 80021c4:	f7ff fdc0 	bl	8001d48 <send_uart>
 80021c8:	e002      	b.n	80021d0 <read_file+0xb4>
		else send_uart(buffer);
 80021ca:	4811      	ldr	r0, [pc, #68]	; (8002210 <read_file+0xf4>)
 80021cc:	f7ff fdbc 	bl	8001d48 <send_uart>
		fresult = f_close(&fil);
 80021d0:	4810      	ldr	r0, [pc, #64]	; (8002214 <read_file+0xf8>)
 80021d2:	f007 fba1 	bl	8009918 <f_close>
 80021d6:	4603      	mov	r3, r0
 80021d8:	461a      	mov	r2, r3
 80021da:	4b0b      	ldr	r3, [pc, #44]	; (8002208 <read_file+0xec>)
 80021dc:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 80021de:	4b0a      	ldr	r3, [pc, #40]	; (8002208 <read_file+0xec>)
 80021e0:	781b      	ldrb	r3, [r3, #0]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d00a      	beq.n	80021fc <read_file+0xe0>
			sprintf (buffer, "error no %d in closing file *%s*\n", fresult, name);
 80021e6:	4b08      	ldr	r3, [pc, #32]	; (8002208 <read_file+0xec>)
 80021e8:	781b      	ldrb	r3, [r3, #0]
 80021ea:	461a      	mov	r2, r3
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	490e      	ldr	r1, [pc, #56]	; (8002228 <read_file+0x10c>)
 80021f0:	4807      	ldr	r0, [pc, #28]	; (8002210 <read_file+0xf4>)
 80021f2:	f008 fdb1 	bl	800ad58 <siprintf>
			send_uart(buffer);
 80021f6:	4806      	ldr	r0, [pc, #24]	; (8002210 <read_file+0xf4>)
 80021f8:	f7ff fda6 	bl	8001d48 <send_uart>
}
 80021fc:	bf00      	nop
 80021fe:	3708      	adds	r7, #8
 8002200:	46bd      	mov	sp, r7
 8002202:	bd80      	pop	{r7, pc}
 8002204:	200007c4 	.word	0x200007c4
 8002208:	20000c64 	.word	0x20000c64
 800220c:	0800d440 	.word	0x0800d440
 8002210:	20000c1c 	.word	0x20000c1c
 8002214:	20000c6c 	.word	0x20000c6c
 8002218:	0800d458 	.word	0x0800d458
 800221c:	0800d47c 	.word	0x0800d47c
 8002220:	20000c14 	.word	0x20000c14
 8002224:	0800d4a0 	.word	0x0800d4a0
 8002228:	0800d41c 	.word	0x0800d41c

0800222c <create_file>:

void create_file (char *name)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b082      	sub	sp, #8
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
	fresult = f_stat (name, &fno);
 8002234:	4927      	ldr	r1, [pc, #156]	; (80022d4 <create_file+0xa8>)
 8002236:	6878      	ldr	r0, [r7, #4]
 8002238:	f007 fc90 	bl	8009b5c <f_stat>
 800223c:	4603      	mov	r3, r0
 800223e:	461a      	mov	r2, r3
 8002240:	4b25      	ldr	r3, [pc, #148]	; (80022d8 <create_file+0xac>)
 8002242:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK)
 8002244:	4b24      	ldr	r3, [pc, #144]	; (80022d8 <create_file+0xac>)
 8002246:	781b      	ldrb	r3, [r3, #0]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d108      	bne.n	800225e <create_file+0x32>
	{
		sprintf (buffer, "*%s* already exists!!!!\n",name);
 800224c:	687a      	ldr	r2, [r7, #4]
 800224e:	4923      	ldr	r1, [pc, #140]	; (80022dc <create_file+0xb0>)
 8002250:	4823      	ldr	r0, [pc, #140]	; (80022e0 <create_file+0xb4>)
 8002252:	f008 fd81 	bl	800ad58 <siprintf>
		send_uart(buffer);
 8002256:	4822      	ldr	r0, [pc, #136]	; (80022e0 <create_file+0xb4>)
 8002258:	f7ff fd76 	bl	8001d48 <send_uart>
		{
			sprintf (buffer, "error %d in closing *%s*\n", fresult, name);
			send_uart(buffer);
		}
	}
}
 800225c:	e036      	b.n	80022cc <create_file+0xa0>
		fresult = f_open(&fil, name, FA_CREATE_ALWAYS|FA_READ|FA_WRITE);
 800225e:	220b      	movs	r2, #11
 8002260:	6879      	ldr	r1, [r7, #4]
 8002262:	4820      	ldr	r0, [pc, #128]	; (80022e4 <create_file+0xb8>)
 8002264:	f006 fd00 	bl	8008c68 <f_open>
 8002268:	4603      	mov	r3, r0
 800226a:	461a      	mov	r2, r3
 800226c:	4b1a      	ldr	r3, [pc, #104]	; (80022d8 <create_file+0xac>)
 800226e:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 8002270:	4b19      	ldr	r3, [pc, #100]	; (80022d8 <create_file+0xac>)
 8002272:	781b      	ldrb	r3, [r3, #0]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d00b      	beq.n	8002290 <create_file+0x64>
			sprintf (buffer, "error %d in creating *%s*\n", fresult, name);
 8002278:	4b17      	ldr	r3, [pc, #92]	; (80022d8 <create_file+0xac>)
 800227a:	781b      	ldrb	r3, [r3, #0]
 800227c:	461a      	mov	r2, r3
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	4919      	ldr	r1, [pc, #100]	; (80022e8 <create_file+0xbc>)
 8002282:	4817      	ldr	r0, [pc, #92]	; (80022e0 <create_file+0xb4>)
 8002284:	f008 fd68 	bl	800ad58 <siprintf>
			send_uart(buffer);
 8002288:	4815      	ldr	r0, [pc, #84]	; (80022e0 <create_file+0xb4>)
 800228a:	f7ff fd5d 	bl	8001d48 <send_uart>
 800228e:	e007      	b.n	80022a0 <create_file+0x74>
			sprintf (buffer, "*%s* created successfully\n",name);
 8002290:	687a      	ldr	r2, [r7, #4]
 8002292:	4916      	ldr	r1, [pc, #88]	; (80022ec <create_file+0xc0>)
 8002294:	4812      	ldr	r0, [pc, #72]	; (80022e0 <create_file+0xb4>)
 8002296:	f008 fd5f 	bl	800ad58 <siprintf>
			send_uart(buffer);
 800229a:	4811      	ldr	r0, [pc, #68]	; (80022e0 <create_file+0xb4>)
 800229c:	f7ff fd54 	bl	8001d48 <send_uart>
		fresult = f_close(&fil);
 80022a0:	4810      	ldr	r0, [pc, #64]	; (80022e4 <create_file+0xb8>)
 80022a2:	f007 fb39 	bl	8009918 <f_close>
 80022a6:	4603      	mov	r3, r0
 80022a8:	461a      	mov	r2, r3
 80022aa:	4b0b      	ldr	r3, [pc, #44]	; (80022d8 <create_file+0xac>)
 80022ac:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 80022ae:	4b0a      	ldr	r3, [pc, #40]	; (80022d8 <create_file+0xac>)
 80022b0:	781b      	ldrb	r3, [r3, #0]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d00a      	beq.n	80022cc <create_file+0xa0>
			sprintf (buffer, "error %d in closing *%s*\n", fresult, name);
 80022b6:	4b08      	ldr	r3, [pc, #32]	; (80022d8 <create_file+0xac>)
 80022b8:	781b      	ldrb	r3, [r3, #0]
 80022ba:	461a      	mov	r2, r3
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	490c      	ldr	r1, [pc, #48]	; (80022f0 <create_file+0xc4>)
 80022c0:	4807      	ldr	r0, [pc, #28]	; (80022e0 <create_file+0xb4>)
 80022c2:	f008 fd49 	bl	800ad58 <siprintf>
			send_uart(buffer);
 80022c6:	4806      	ldr	r0, [pc, #24]	; (80022e0 <create_file+0xb4>)
 80022c8:	f7ff fd3e 	bl	8001d48 <send_uart>
}
 80022cc:	bf00      	nop
 80022ce:	3708      	adds	r7, #8
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bd80      	pop	{r7, pc}
 80022d4:	200007c4 	.word	0x200007c4
 80022d8:	20000c64 	.word	0x20000c64
 80022dc:	0800d4c4 	.word	0x0800d4c4
 80022e0:	20000c1c 	.word	0x20000c1c
 80022e4:	20000c6c 	.word	0x20000c6c
 80022e8:	0800d4e0 	.word	0x0800d4e0
 80022ec:	0800d4fc 	.word	0x0800d4fc
 80022f0:	0800d518 	.word	0x0800d518

080022f4 <create_file_mod>:

void create_file_mod(uint8_t BASE_NAME_SIZE, char *name) {
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b082      	sub	sp, #8
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	4603      	mov	r3, r0
 80022fc:	6039      	str	r1, [r7, #0]
 80022fe:	71fb      	strb	r3, [r7, #7]
	//	fresult = f_stat(name, &fno);
	while (f_stat(name, &fno) == FR_OK) {
 8002300:	e02a      	b.n	8002358 <create_file_mod+0x64>
		if (name[BASE_NAME_SIZE + 1] != '9') {
 8002302:	79fb      	ldrb	r3, [r7, #7]
 8002304:	3301      	adds	r3, #1
 8002306:	683a      	ldr	r2, [r7, #0]
 8002308:	4413      	add	r3, r2
 800230a:	781b      	ldrb	r3, [r3, #0]
 800230c:	2b39      	cmp	r3, #57	; 0x39
 800230e:	d008      	beq.n	8002322 <create_file_mod+0x2e>
			name[BASE_NAME_SIZE + 1]++;
 8002310:	79fb      	ldrb	r3, [r7, #7]
 8002312:	3301      	adds	r3, #1
 8002314:	683a      	ldr	r2, [r7, #0]
 8002316:	4413      	add	r3, r2
 8002318:	781a      	ldrb	r2, [r3, #0]
 800231a:	3201      	adds	r2, #1
 800231c:	b2d2      	uxtb	r2, r2
 800231e:	701a      	strb	r2, [r3, #0]
 8002320:	e01a      	b.n	8002358 <create_file_mod+0x64>
		} else if (name[BASE_NAME_SIZE] != '9') {
 8002322:	79fb      	ldrb	r3, [r7, #7]
 8002324:	683a      	ldr	r2, [r7, #0]
 8002326:	4413      	add	r3, r2
 8002328:	781b      	ldrb	r3, [r3, #0]
 800232a:	2b39      	cmp	r3, #57	; 0x39
 800232c:	d00d      	beq.n	800234a <create_file_mod+0x56>
			name[BASE_NAME_SIZE + 1] = '0';
 800232e:	79fb      	ldrb	r3, [r7, #7]
 8002330:	3301      	adds	r3, #1
 8002332:	683a      	ldr	r2, [r7, #0]
 8002334:	4413      	add	r3, r2
 8002336:	2230      	movs	r2, #48	; 0x30
 8002338:	701a      	strb	r2, [r3, #0]
			name[BASE_NAME_SIZE]++;
 800233a:	79fb      	ldrb	r3, [r7, #7]
 800233c:	683a      	ldr	r2, [r7, #0]
 800233e:	4413      	add	r3, r2
 8002340:	781a      	ldrb	r2, [r3, #0]
 8002342:	3201      	adds	r2, #1
 8002344:	b2d2      	uxtb	r2, r2
 8002346:	701a      	strb	r2, [r3, #0]
 8002348:	e006      	b.n	8002358 <create_file_mod+0x64>
		} else {
			sprintf(buffer, "Unload SD card before another trial.\n");
 800234a:	4919      	ldr	r1, [pc, #100]	; (80023b0 <create_file_mod+0xbc>)
 800234c:	4819      	ldr	r0, [pc, #100]	; (80023b4 <create_file_mod+0xc0>)
 800234e:	f008 fd03 	bl	800ad58 <siprintf>
			send_uart(buffer);
 8002352:	4818      	ldr	r0, [pc, #96]	; (80023b4 <create_file_mod+0xc0>)
 8002354:	f7ff fcf8 	bl	8001d48 <send_uart>
	while (f_stat(name, &fno) == FR_OK) {
 8002358:	4917      	ldr	r1, [pc, #92]	; (80023b8 <create_file_mod+0xc4>)
 800235a:	6838      	ldr	r0, [r7, #0]
 800235c:	f007 fbfe 	bl	8009b5c <f_stat>
 8002360:	4603      	mov	r3, r0
 8002362:	2b00      	cmp	r3, #0
 8002364:	d0cd      	beq.n	8002302 <create_file_mod+0xe>

	//	if (fresult == FR_OK) {
	//		sprintf(buffer, "*%s* already exists!!!!\n", name);
	//		send_uart(buffer);
	//	} else {
	fresult = f_open(&fil, name, FA_CREATE_ALWAYS | FA_READ | FA_WRITE);
 8002366:	220b      	movs	r2, #11
 8002368:	6839      	ldr	r1, [r7, #0]
 800236a:	4814      	ldr	r0, [pc, #80]	; (80023bc <create_file_mod+0xc8>)
 800236c:	f006 fc7c 	bl	8008c68 <f_open>
 8002370:	4603      	mov	r3, r0
 8002372:	461a      	mov	r2, r3
 8002374:	4b12      	ldr	r3, [pc, #72]	; (80023c0 <create_file_mod+0xcc>)
 8002376:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK) {
 8002378:	4b11      	ldr	r3, [pc, #68]	; (80023c0 <create_file_mod+0xcc>)
 800237a:	781b      	ldrb	r3, [r3, #0]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d00b      	beq.n	8002398 <create_file_mod+0xa4>
		sprintf(buffer, "error no %d in creating file *%s*\n", fresult, name);
 8002380:	4b0f      	ldr	r3, [pc, #60]	; (80023c0 <create_file_mod+0xcc>)
 8002382:	781b      	ldrb	r3, [r3, #0]
 8002384:	461a      	mov	r2, r3
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	490e      	ldr	r1, [pc, #56]	; (80023c4 <create_file_mod+0xd0>)
 800238a:	480a      	ldr	r0, [pc, #40]	; (80023b4 <create_file_mod+0xc0>)
 800238c:	f008 fce4 	bl	800ad58 <siprintf>
		send_uart(buffer);
 8002390:	4808      	ldr	r0, [pc, #32]	; (80023b4 <create_file_mod+0xc0>)
 8002392:	f7ff fcd9 	bl	8001d48 <send_uart>
	} else {
		sprintf(buffer, "*%s* created successfully\n", name);
		send_uart(buffer);
	}
	//	}
}
 8002396:	e007      	b.n	80023a8 <create_file_mod+0xb4>
		sprintf(buffer, "*%s* created successfully\n", name);
 8002398:	683a      	ldr	r2, [r7, #0]
 800239a:	490b      	ldr	r1, [pc, #44]	; (80023c8 <create_file_mod+0xd4>)
 800239c:	4805      	ldr	r0, [pc, #20]	; (80023b4 <create_file_mod+0xc0>)
 800239e:	f008 fcdb 	bl	800ad58 <siprintf>
		send_uart(buffer);
 80023a2:	4804      	ldr	r0, [pc, #16]	; (80023b4 <create_file_mod+0xc0>)
 80023a4:	f7ff fcd0 	bl	8001d48 <send_uart>
}
 80023a8:	bf00      	nop
 80023aa:	3708      	adds	r7, #8
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}
 80023b0:	0800d534 	.word	0x0800d534
 80023b4:	20000c1c 	.word	0x20000c1c
 80023b8:	200007c4 	.word	0x200007c4
 80023bc:	20000c6c 	.word	0x20000c6c
 80023c0:	20000c64 	.word	0x20000c64
 80023c4:	0800d55c 	.word	0x0800d55c
 80023c8:	0800d4fc 	.word	0x0800d4fc

080023cc <close_file>:

void close_file(char *name) {
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b082      	sub	sp, #8
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
	fresult = f_close(&fil);
 80023d4:	480c      	ldr	r0, [pc, #48]	; (8002408 <close_file+0x3c>)
 80023d6:	f007 fa9f 	bl	8009918 <f_close>
 80023da:	4603      	mov	r3, r0
 80023dc:	461a      	mov	r2, r3
 80023de:	4b0b      	ldr	r3, [pc, #44]	; (800240c <close_file+0x40>)
 80023e0:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK) {
 80023e2:	4b0a      	ldr	r3, [pc, #40]	; (800240c <close_file+0x40>)
 80023e4:	781b      	ldrb	r3, [r3, #0]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d00a      	beq.n	8002400 <close_file+0x34>
		sprintf(buffer, "error %d in closing *%s*\n", fresult, name);
 80023ea:	4b08      	ldr	r3, [pc, #32]	; (800240c <close_file+0x40>)
 80023ec:	781b      	ldrb	r3, [r3, #0]
 80023ee:	461a      	mov	r2, r3
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	4907      	ldr	r1, [pc, #28]	; (8002410 <close_file+0x44>)
 80023f4:	4807      	ldr	r0, [pc, #28]	; (8002414 <close_file+0x48>)
 80023f6:	f008 fcaf 	bl	800ad58 <siprintf>
		send_uart(buffer);
 80023fa:	4806      	ldr	r0, [pc, #24]	; (8002414 <close_file+0x48>)
 80023fc:	f7ff fca4 	bl	8001d48 <send_uart>
	}
}
 8002400:	bf00      	nop
 8002402:	3708      	adds	r7, #8
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}
 8002408:	20000c6c 	.word	0x20000c6c
 800240c:	20000c64 	.word	0x20000c64
 8002410:	0800d518 	.word	0x0800d518
 8002414:	20000c1c 	.word	0x20000c1c

08002418 <remove_file>:

void remove_file (char *name)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b082      	sub	sp, #8
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
	/**** check whether the file exists or not ****/
	fresult = f_stat (name, &fno);
 8002420:	491a      	ldr	r1, [pc, #104]	; (800248c <remove_file+0x74>)
 8002422:	6878      	ldr	r0, [r7, #4]
 8002424:	f007 fb9a 	bl	8009b5c <f_stat>
 8002428:	4603      	mov	r3, r0
 800242a:	461a      	mov	r2, r3
 800242c:	4b18      	ldr	r3, [pc, #96]	; (8002490 <remove_file+0x78>)
 800242e:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 8002430:	4b17      	ldr	r3, [pc, #92]	; (8002490 <remove_file+0x78>)
 8002432:	781b      	ldrb	r3, [r3, #0]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d008      	beq.n	800244a <remove_file+0x32>
	{
		sprintf (buffer, "*%s* does not exists\n", name);
 8002438:	687a      	ldr	r2, [r7, #4]
 800243a:	4916      	ldr	r1, [pc, #88]	; (8002494 <remove_file+0x7c>)
 800243c:	4816      	ldr	r0, [pc, #88]	; (8002498 <remove_file+0x80>)
 800243e:	f008 fc8b 	bl	800ad58 <siprintf>
		send_uart (buffer);
 8002442:	4815      	ldr	r0, [pc, #84]	; (8002498 <remove_file+0x80>)
 8002444:	f7ff fc80 	bl	8001d48 <send_uart>
			sprintf (buffer, "error in removing *%s*\n", name);
			send_uart (buffer);
		}
	}

}
 8002448:	e01b      	b.n	8002482 <remove_file+0x6a>
		fresult = f_unlink (name);
 800244a:	6878      	ldr	r0, [r7, #4]
 800244c:	f007 fca4 	bl	8009d98 <f_unlink>
 8002450:	4603      	mov	r3, r0
 8002452:	461a      	mov	r2, r3
 8002454:	4b0e      	ldr	r3, [pc, #56]	; (8002490 <remove_file+0x78>)
 8002456:	701a      	strb	r2, [r3, #0]
		if (fresult == FR_OK)
 8002458:	4b0d      	ldr	r3, [pc, #52]	; (8002490 <remove_file+0x78>)
 800245a:	781b      	ldrb	r3, [r3, #0]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d108      	bne.n	8002472 <remove_file+0x5a>
			sprintf (buffer, "*%s* has been removed successfully\n", name);
 8002460:	687a      	ldr	r2, [r7, #4]
 8002462:	490e      	ldr	r1, [pc, #56]	; (800249c <remove_file+0x84>)
 8002464:	480c      	ldr	r0, [pc, #48]	; (8002498 <remove_file+0x80>)
 8002466:	f008 fc77 	bl	800ad58 <siprintf>
			send_uart (buffer);
 800246a:	480b      	ldr	r0, [pc, #44]	; (8002498 <remove_file+0x80>)
 800246c:	f7ff fc6c 	bl	8001d48 <send_uart>
}
 8002470:	e007      	b.n	8002482 <remove_file+0x6a>
			sprintf (buffer, "error in removing *%s*\n", name);
 8002472:	687a      	ldr	r2, [r7, #4]
 8002474:	490a      	ldr	r1, [pc, #40]	; (80024a0 <remove_file+0x88>)
 8002476:	4808      	ldr	r0, [pc, #32]	; (8002498 <remove_file+0x80>)
 8002478:	f008 fc6e 	bl	800ad58 <siprintf>
			send_uart (buffer);
 800247c:	4806      	ldr	r0, [pc, #24]	; (8002498 <remove_file+0x80>)
 800247e:	f7ff fc63 	bl	8001d48 <send_uart>
}
 8002482:	bf00      	nop
 8002484:	3708      	adds	r7, #8
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}
 800248a:	bf00      	nop
 800248c:	200007c4 	.word	0x200007c4
 8002490:	20000c64 	.word	0x20000c64
 8002494:	0800d440 	.word	0x0800d440
 8002498:	20000c1c 	.word	0x20000c1c
 800249c:	0800d580 	.word	0x0800d580
 80024a0:	0800d5a4 	.word	0x0800d5a4

080024a4 <create_dir>:

void create_dir (char *name)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b082      	sub	sp, #8
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
	fresult = f_mkdir(name);
 80024ac:	6878      	ldr	r0, [r7, #4]
 80024ae:	f007 fd53 	bl	8009f58 <f_mkdir>
 80024b2:	4603      	mov	r3, r0
 80024b4:	461a      	mov	r2, r3
 80024b6:	4b0e      	ldr	r3, [pc, #56]	; (80024f0 <create_dir+0x4c>)
 80024b8:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK)
 80024ba:	4b0d      	ldr	r3, [pc, #52]	; (80024f0 <create_dir+0x4c>)
 80024bc:	781b      	ldrb	r3, [r3, #0]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d108      	bne.n	80024d4 <create_dir+0x30>
	{
		sprintf (buffer, "*%s* has been created successfully\n", name);
 80024c2:	687a      	ldr	r2, [r7, #4]
 80024c4:	490b      	ldr	r1, [pc, #44]	; (80024f4 <create_dir+0x50>)
 80024c6:	480c      	ldr	r0, [pc, #48]	; (80024f8 <create_dir+0x54>)
 80024c8:	f008 fc46 	bl	800ad58 <siprintf>
		send_uart (buffer);
 80024cc:	480a      	ldr	r0, [pc, #40]	; (80024f8 <create_dir+0x54>)
 80024ce:	f7ff fc3b 	bl	8001d48 <send_uart>
	else
	{
		sprintf (buffer, "error no %d in creating directory\n", fresult);
		send_uart(buffer);
	}
}
 80024d2:	e009      	b.n	80024e8 <create_dir+0x44>
		sprintf (buffer, "error no %d in creating directory\n", fresult);
 80024d4:	4b06      	ldr	r3, [pc, #24]	; (80024f0 <create_dir+0x4c>)
 80024d6:	781b      	ldrb	r3, [r3, #0]
 80024d8:	461a      	mov	r2, r3
 80024da:	4908      	ldr	r1, [pc, #32]	; (80024fc <create_dir+0x58>)
 80024dc:	4806      	ldr	r0, [pc, #24]	; (80024f8 <create_dir+0x54>)
 80024de:	f008 fc3b 	bl	800ad58 <siprintf>
		send_uart(buffer);
 80024e2:	4805      	ldr	r0, [pc, #20]	; (80024f8 <create_dir+0x54>)
 80024e4:	f7ff fc30 	bl	8001d48 <send_uart>
}
 80024e8:	bf00      	nop
 80024ea:	3708      	adds	r7, #8
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bd80      	pop	{r7, pc}
 80024f0:	20000c64 	.word	0x20000c64
 80024f4:	0800d5bc 	.word	0x0800d5bc
 80024f8:	20000c1c 	.word	0x20000c1c
 80024fc:	0800d5e0 	.word	0x0800d5e0

08002500 <check_sd>:

void check_sd (void)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	af00      	add	r7, sp, #0
	/* Check free space */
	f_getfree("", &fre_clust, &pfs);
 8002504:	4a28      	ldr	r2, [pc, #160]	; (80025a8 <check_sd+0xa8>)
 8002506:	4929      	ldr	r1, [pc, #164]	; (80025ac <check_sd+0xac>)
 8002508:	4829      	ldr	r0, [pc, #164]	; (80025b0 <check_sd+0xb0>)
 800250a:	f007 fb77 	bl	8009bfc <f_getfree>

	total = (uint32_t)((pfs->n_fatent - 2) * pfs->csize * 0.5);
 800250e:	4b26      	ldr	r3, [pc, #152]	; (80025a8 <check_sd+0xa8>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8002516:	3b02      	subs	r3, #2
 8002518:	4a23      	ldr	r2, [pc, #140]	; (80025a8 <check_sd+0xa8>)
 800251a:	6812      	ldr	r2, [r2, #0]
 800251c:	f892 2402 	ldrb.w	r2, [r2, #1026]	; 0x402
 8002520:	fb02 f303 	mul.w	r3, r2, r3
 8002524:	4618      	mov	r0, r3
 8002526:	f7fd ff67 	bl	80003f8 <__aeabi_ui2d>
 800252a:	f04f 0200 	mov.w	r2, #0
 800252e:	4b21      	ldr	r3, [pc, #132]	; (80025b4 <check_sd+0xb4>)
 8002530:	f7fd ffdc 	bl	80004ec <__aeabi_dmul>
 8002534:	4602      	mov	r2, r0
 8002536:	460b      	mov	r3, r1
 8002538:	4610      	mov	r0, r2
 800253a:	4619      	mov	r1, r3
 800253c:	f7fe faae 	bl	8000a9c <__aeabi_d2uiz>
 8002540:	4603      	mov	r3, r0
 8002542:	4a1d      	ldr	r2, [pc, #116]	; (80025b8 <check_sd+0xb8>)
 8002544:	6013      	str	r3, [r2, #0]
	sprintf (buffer, "SD CARD Total Size: \t%lu\n",total);
 8002546:	4b1c      	ldr	r3, [pc, #112]	; (80025b8 <check_sd+0xb8>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	461a      	mov	r2, r3
 800254c:	491b      	ldr	r1, [pc, #108]	; (80025bc <check_sd+0xbc>)
 800254e:	481c      	ldr	r0, [pc, #112]	; (80025c0 <check_sd+0xc0>)
 8002550:	f008 fc02 	bl	800ad58 <siprintf>
	send_uart(buffer);
 8002554:	481a      	ldr	r0, [pc, #104]	; (80025c0 <check_sd+0xc0>)
 8002556:	f7ff fbf7 	bl	8001d48 <send_uart>
	free_space = (uint32_t)(fre_clust * pfs->csize * 0.5);
 800255a:	4b13      	ldr	r3, [pc, #76]	; (80025a8 <check_sd+0xa8>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 8002562:	461a      	mov	r2, r3
 8002564:	4b11      	ldr	r3, [pc, #68]	; (80025ac <check_sd+0xac>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	fb03 f302 	mul.w	r3, r3, r2
 800256c:	4618      	mov	r0, r3
 800256e:	f7fd ff43 	bl	80003f8 <__aeabi_ui2d>
 8002572:	f04f 0200 	mov.w	r2, #0
 8002576:	4b0f      	ldr	r3, [pc, #60]	; (80025b4 <check_sd+0xb4>)
 8002578:	f7fd ffb8 	bl	80004ec <__aeabi_dmul>
 800257c:	4602      	mov	r2, r0
 800257e:	460b      	mov	r3, r1
 8002580:	4610      	mov	r0, r2
 8002582:	4619      	mov	r1, r3
 8002584:	f7fe fa8a 	bl	8000a9c <__aeabi_d2uiz>
 8002588:	4603      	mov	r3, r0
 800258a:	4a0e      	ldr	r2, [pc, #56]	; (80025c4 <check_sd+0xc4>)
 800258c:	6013      	str	r3, [r2, #0]
	sprintf (buffer, "SD CARD Free Space: \t%lu\n",free_space);
 800258e:	4b0d      	ldr	r3, [pc, #52]	; (80025c4 <check_sd+0xc4>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	461a      	mov	r2, r3
 8002594:	490c      	ldr	r1, [pc, #48]	; (80025c8 <check_sd+0xc8>)
 8002596:	480a      	ldr	r0, [pc, #40]	; (80025c0 <check_sd+0xc0>)
 8002598:	f008 fbde 	bl	800ad58 <siprintf>
	send_uart(buffer);
 800259c:	4808      	ldr	r0, [pc, #32]	; (80025c0 <check_sd+0xc0>)
 800259e:	f7ff fbd3 	bl	8001d48 <send_uart>
}
 80025a2:	bf00      	nop
 80025a4:	bd80      	pop	{r7, pc}
 80025a6:	bf00      	nop
 80025a8:	20000c60 	.word	0x20000c60
 80025ac:	200006a0 	.word	0x200006a0
 80025b0:	0800d604 	.word	0x0800d604
 80025b4:	3fe00000 	.word	0x3fe00000
 80025b8:	20000c68 	.word	0x20000c68
 80025bc:	0800d608 	.word	0x0800d608
 80025c0:	20000c1c 	.word	0x20000c1c
 80025c4:	20000c18 	.word	0x20000c18
 80025c8:	0800d624 	.word	0x0800d624

080025cc <check_file>:

void check_file (char *name)
{
 80025cc:	b590      	push	{r4, r7, lr}
 80025ce:	b087      	sub	sp, #28
 80025d0:	af04      	add	r7, sp, #16
 80025d2:	6078      	str	r0, [r7, #4]
	fresult = f_stat(name, &fno);
 80025d4:	4948      	ldr	r1, [pc, #288]	; (80026f8 <check_file+0x12c>)
 80025d6:	6878      	ldr	r0, [r7, #4]
 80025d8:	f007 fac0 	bl	8009b5c <f_stat>
 80025dc:	4603      	mov	r3, r0
 80025de:	461a      	mov	r2, r3
 80025e0:	4b46      	ldr	r3, [pc, #280]	; (80026fc <check_file+0x130>)
 80025e2:	701a      	strb	r2, [r3, #0]
	switch (fresult)
 80025e4:	4b45      	ldr	r3, [pc, #276]	; (80026fc <check_file+0x130>)
 80025e6:	781b      	ldrb	r3, [r3, #0]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d002      	beq.n	80025f2 <check_file+0x26>
 80025ec:	2b04      	cmp	r3, #4
 80025ee:	d06b      	beq.n	80026c8 <check_file+0xfc>
 80025f0:	e073      	b.n	80026da <check_file+0x10e>
	{
	case FR_OK:

		sprintf(buffer,"Below are the details of the *%s* \nSize: %lu\n",name, fno.fsize);
 80025f2:	4b41      	ldr	r3, [pc, #260]	; (80026f8 <check_file+0x12c>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	687a      	ldr	r2, [r7, #4]
 80025f8:	4941      	ldr	r1, [pc, #260]	; (8002700 <check_file+0x134>)
 80025fa:	4842      	ldr	r0, [pc, #264]	; (8002704 <check_file+0x138>)
 80025fc:	f008 fbac 	bl	800ad58 <siprintf>
		send_uart (buffer);
 8002600:	4840      	ldr	r0, [pc, #256]	; (8002704 <check_file+0x138>)
 8002602:	f7ff fba1 	bl	8001d48 <send_uart>
		sprintf(buffer,"Timestamp: %u/%02u/%02u, %02u:%02u\n",
				(fno.fdate >> 9) + 1980, fno.fdate >> 5 & 15, fno.fdate & 31,
 8002606:	4b3c      	ldr	r3, [pc, #240]	; (80026f8 <check_file+0x12c>)
 8002608:	889b      	ldrh	r3, [r3, #4]
 800260a:	0a5b      	lsrs	r3, r3, #9
 800260c:	b29b      	uxth	r3, r3
		sprintf(buffer,"Timestamp: %u/%02u/%02u, %02u:%02u\n",
 800260e:	f203 71bc 	addw	r1, r3, #1980	; 0x7bc
				(fno.fdate >> 9) + 1980, fno.fdate >> 5 & 15, fno.fdate & 31,
 8002612:	4b39      	ldr	r3, [pc, #228]	; (80026f8 <check_file+0x12c>)
 8002614:	889b      	ldrh	r3, [r3, #4]
		sprintf(buffer,"Timestamp: %u/%02u/%02u, %02u:%02u\n",
 8002616:	095b      	lsrs	r3, r3, #5
 8002618:	b29b      	uxth	r3, r3
 800261a:	f003 000f 	and.w	r0, r3, #15
				(fno.fdate >> 9) + 1980, fno.fdate >> 5 & 15, fno.fdate & 31,
 800261e:	4b36      	ldr	r3, [pc, #216]	; (80026f8 <check_file+0x12c>)
 8002620:	889b      	ldrh	r3, [r3, #4]
		sprintf(buffer,"Timestamp: %u/%02u/%02u, %02u:%02u\n",
 8002622:	f003 031f 	and.w	r3, r3, #31
				fno.ftime >> 11, fno.ftime >> 5 & 63);
 8002626:	4a34      	ldr	r2, [pc, #208]	; (80026f8 <check_file+0x12c>)
 8002628:	88d2      	ldrh	r2, [r2, #6]
		sprintf(buffer,"Timestamp: %u/%02u/%02u, %02u:%02u\n",
 800262a:	0ad2      	lsrs	r2, r2, #11
 800262c:	b292      	uxth	r2, r2
 800262e:	4614      	mov	r4, r2
				fno.ftime >> 11, fno.ftime >> 5 & 63);
 8002630:	4a31      	ldr	r2, [pc, #196]	; (80026f8 <check_file+0x12c>)
 8002632:	88d2      	ldrh	r2, [r2, #6]
		sprintf(buffer,"Timestamp: %u/%02u/%02u, %02u:%02u\n",
 8002634:	0952      	lsrs	r2, r2, #5
 8002636:	b292      	uxth	r2, r2
 8002638:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800263c:	9202      	str	r2, [sp, #8]
 800263e:	9401      	str	r4, [sp, #4]
 8002640:	9300      	str	r3, [sp, #0]
 8002642:	4603      	mov	r3, r0
 8002644:	460a      	mov	r2, r1
 8002646:	4930      	ldr	r1, [pc, #192]	; (8002708 <check_file+0x13c>)
 8002648:	482e      	ldr	r0, [pc, #184]	; (8002704 <check_file+0x138>)
 800264a:	f008 fb85 	bl	800ad58 <siprintf>
		send_uart (buffer);
 800264e:	482d      	ldr	r0, [pc, #180]	; (8002704 <check_file+0x138>)
 8002650:	f7ff fb7a 	bl	8001d48 <send_uart>
		sprintf(buffer,"Attributes: %c%c%c%c%c\n",
				(fno.fattrib & AM_DIR) ? 'D' : '-',
 8002654:	4b28      	ldr	r3, [pc, #160]	; (80026f8 <check_file+0x12c>)
 8002656:	7a1b      	ldrb	r3, [r3, #8]
 8002658:	f003 0310 	and.w	r3, r3, #16
		sprintf(buffer,"Attributes: %c%c%c%c%c\n",
 800265c:	2b00      	cmp	r3, #0
 800265e:	d001      	beq.n	8002664 <check_file+0x98>
 8002660:	2044      	movs	r0, #68	; 0x44
 8002662:	e000      	b.n	8002666 <check_file+0x9a>
 8002664:	202d      	movs	r0, #45	; 0x2d
						(fno.fattrib & AM_RDO) ? 'R' : '-',
 8002666:	4b24      	ldr	r3, [pc, #144]	; (80026f8 <check_file+0x12c>)
 8002668:	7a1b      	ldrb	r3, [r3, #8]
 800266a:	f003 0301 	and.w	r3, r3, #1
		sprintf(buffer,"Attributes: %c%c%c%c%c\n",
 800266e:	2b00      	cmp	r3, #0
 8002670:	d001      	beq.n	8002676 <check_file+0xaa>
 8002672:	2452      	movs	r4, #82	; 0x52
 8002674:	e000      	b.n	8002678 <check_file+0xac>
 8002676:	242d      	movs	r4, #45	; 0x2d
								(fno.fattrib & AM_HID) ? 'H' : '-',
 8002678:	4b1f      	ldr	r3, [pc, #124]	; (80026f8 <check_file+0x12c>)
 800267a:	7a1b      	ldrb	r3, [r3, #8]
 800267c:	f003 0302 	and.w	r3, r3, #2
		sprintf(buffer,"Attributes: %c%c%c%c%c\n",
 8002680:	2b00      	cmp	r3, #0
 8002682:	d001      	beq.n	8002688 <check_file+0xbc>
 8002684:	2348      	movs	r3, #72	; 0x48
 8002686:	e000      	b.n	800268a <check_file+0xbe>
 8002688:	232d      	movs	r3, #45	; 0x2d
										(fno.fattrib & AM_SYS) ? 'S' : '-',
 800268a:	4a1b      	ldr	r2, [pc, #108]	; (80026f8 <check_file+0x12c>)
 800268c:	7a12      	ldrb	r2, [r2, #8]
 800268e:	f002 0204 	and.w	r2, r2, #4
		sprintf(buffer,"Attributes: %c%c%c%c%c\n",
 8002692:	2a00      	cmp	r2, #0
 8002694:	d001      	beq.n	800269a <check_file+0xce>
 8002696:	2253      	movs	r2, #83	; 0x53
 8002698:	e000      	b.n	800269c <check_file+0xd0>
 800269a:	222d      	movs	r2, #45	; 0x2d
												(fno.fattrib & AM_ARC) ? 'A' : '-');
 800269c:	4916      	ldr	r1, [pc, #88]	; (80026f8 <check_file+0x12c>)
 800269e:	7a09      	ldrb	r1, [r1, #8]
 80026a0:	f001 0120 	and.w	r1, r1, #32
		sprintf(buffer,"Attributes: %c%c%c%c%c\n",
 80026a4:	2900      	cmp	r1, #0
 80026a6:	d001      	beq.n	80026ac <check_file+0xe0>
 80026a8:	2141      	movs	r1, #65	; 0x41
 80026aa:	e000      	b.n	80026ae <check_file+0xe2>
 80026ac:	212d      	movs	r1, #45	; 0x2d
 80026ae:	9102      	str	r1, [sp, #8]
 80026b0:	9201      	str	r2, [sp, #4]
 80026b2:	9300      	str	r3, [sp, #0]
 80026b4:	4623      	mov	r3, r4
 80026b6:	4602      	mov	r2, r0
 80026b8:	4914      	ldr	r1, [pc, #80]	; (800270c <check_file+0x140>)
 80026ba:	4812      	ldr	r0, [pc, #72]	; (8002704 <check_file+0x138>)
 80026bc:	f008 fb4c 	bl	800ad58 <siprintf>
		send_uart (buffer);
 80026c0:	4810      	ldr	r0, [pc, #64]	; (8002704 <check_file+0x138>)
 80026c2:	f7ff fb41 	bl	8001d48 <send_uart>
		break;
 80026c6:	e013      	b.n	80026f0 <check_file+0x124>

	case FR_NO_FILE:
		sprintf(buffer,"*%s* does not exist.\n", name);
 80026c8:	687a      	ldr	r2, [r7, #4]
 80026ca:	4911      	ldr	r1, [pc, #68]	; (8002710 <check_file+0x144>)
 80026cc:	480d      	ldr	r0, [pc, #52]	; (8002704 <check_file+0x138>)
 80026ce:	f008 fb43 	bl	800ad58 <siprintf>
		send_uart (buffer);
 80026d2:	480c      	ldr	r0, [pc, #48]	; (8002704 <check_file+0x138>)
 80026d4:	f7ff fb38 	bl	8001d48 <send_uart>
		break;
 80026d8:	e00a      	b.n	80026f0 <check_file+0x124>

	default:
		sprintf(buffer,"An error occurred. (%d)\n", fresult);
 80026da:	4b08      	ldr	r3, [pc, #32]	; (80026fc <check_file+0x130>)
 80026dc:	781b      	ldrb	r3, [r3, #0]
 80026de:	461a      	mov	r2, r3
 80026e0:	490c      	ldr	r1, [pc, #48]	; (8002714 <check_file+0x148>)
 80026e2:	4808      	ldr	r0, [pc, #32]	; (8002704 <check_file+0x138>)
 80026e4:	f008 fb38 	bl	800ad58 <siprintf>
		send_uart (buffer);
 80026e8:	4806      	ldr	r0, [pc, #24]	; (8002704 <check_file+0x138>)
 80026ea:	f7ff fb2d 	bl	8001d48 <send_uart>
	}
}
 80026ee:	bf00      	nop
 80026f0:	bf00      	nop
 80026f2:	370c      	adds	r7, #12
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd90      	pop	{r4, r7, pc}
 80026f8:	200007c4 	.word	0x200007c4
 80026fc:	20000c64 	.word	0x20000c64
 8002700:	0800d640 	.word	0x0800d640
 8002704:	20000c1c 	.word	0x20000c1c
 8002708:	0800d670 	.word	0x0800d670
 800270c:	0800d694 	.word	0x0800d694
 8002710:	0800d6ac 	.word	0x0800d6ac
 8002714:	0800d6c4 	.word	0x0800d6c4

08002718 <update_file>:

void update_file (char *name)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b082      	sub	sp, #8
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
	/**** check whether the file exists or not ****/
	fresult = f_stat (name, &fno);
 8002720:	4940      	ldr	r1, [pc, #256]	; (8002824 <update_file+0x10c>)
 8002722:	6878      	ldr	r0, [r7, #4]
 8002724:	f007 fa1a 	bl	8009b5c <f_stat>
 8002728:	4603      	mov	r3, r0
 800272a:	461a      	mov	r2, r3
 800272c:	4b3e      	ldr	r3, [pc, #248]	; (8002828 <update_file+0x110>)
 800272e:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 8002730:	4b3d      	ldr	r3, [pc, #244]	; (8002828 <update_file+0x110>)
 8002732:	781b      	ldrb	r3, [r3, #0]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d008      	beq.n	800274a <update_file+0x32>
	{
		sprintf (buffer, "*%s* does not exists\n", name);
 8002738:	687a      	ldr	r2, [r7, #4]
 800273a:	493c      	ldr	r1, [pc, #240]	; (800282c <update_file+0x114>)
 800273c:	483c      	ldr	r0, [pc, #240]	; (8002830 <update_file+0x118>)
 800273e:	f008 fb0b 	bl	800ad58 <siprintf>
		send_uart (buffer);
 8002742:	483b      	ldr	r0, [pc, #236]	; (8002830 <update_file+0x118>)
 8002744:	f7ff fb00 	bl	8001d48 <send_uart>
		{
			sprintf (buffer, "error %d in closing *%s*\n", fresult, name);
			send_uart(buffer);
		}
	}
}
 8002748:	e068      	b.n	800281c <update_file+0x104>
		fresult = f_open(&fil, name, FA_OPEN_APPEND | FA_WRITE);
 800274a:	2232      	movs	r2, #50	; 0x32
 800274c:	6879      	ldr	r1, [r7, #4]
 800274e:	4839      	ldr	r0, [pc, #228]	; (8002834 <update_file+0x11c>)
 8002750:	f006 fa8a 	bl	8008c68 <f_open>
 8002754:	4603      	mov	r3, r0
 8002756:	461a      	mov	r2, r3
 8002758:	4b33      	ldr	r3, [pc, #204]	; (8002828 <update_file+0x110>)
 800275a:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 800275c:	4b32      	ldr	r3, [pc, #200]	; (8002828 <update_file+0x110>)
 800275e:	781b      	ldrb	r3, [r3, #0]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d00b      	beq.n	800277c <update_file+0x64>
			sprintf (buffer, "error %d in opening *%s*\n", fresult, name);
 8002764:	4b30      	ldr	r3, [pc, #192]	; (8002828 <update_file+0x110>)
 8002766:	781b      	ldrb	r3, [r3, #0]
 8002768:	461a      	mov	r2, r3
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	4932      	ldr	r1, [pc, #200]	; (8002838 <update_file+0x120>)
 800276e:	4830      	ldr	r0, [pc, #192]	; (8002830 <update_file+0x118>)
 8002770:	f008 faf2 	bl	800ad58 <siprintf>
			send_uart(buffer);
 8002774:	482e      	ldr	r0, [pc, #184]	; (8002830 <update_file+0x118>)
 8002776:	f7ff fae7 	bl	8001d48 <send_uart>
 800277a:	e007      	b.n	800278c <update_file+0x74>
			sprintf (buffer, "file *%s* is opened. Now enter the string you want to update\n", name);
 800277c:	687a      	ldr	r2, [r7, #4]
 800277e:	492f      	ldr	r1, [pc, #188]	; (800283c <update_file+0x124>)
 8002780:	482b      	ldr	r0, [pc, #172]	; (8002830 <update_file+0x118>)
 8002782:	f008 fae9 	bl	800ad58 <siprintf>
			send_uart (buffer);
 8002786:	482a      	ldr	r0, [pc, #168]	; (8002830 <update_file+0x118>)
 8002788:	f7ff fade 	bl	8001d48 <send_uart>
		while (!(wait_until("\r\n", buffer)));
 800278c:	bf00      	nop
 800278e:	4928      	ldr	r1, [pc, #160]	; (8002830 <update_file+0x118>)
 8002790:	482b      	ldr	r0, [pc, #172]	; (8002840 <update_file+0x128>)
 8002792:	f7fe fa7b 	bl	8000c8c <wait_until>
 8002796:	4603      	mov	r3, r0
 8002798:	2b00      	cmp	r3, #0
 800279a:	d0f8      	beq.n	800278e <update_file+0x76>
		fresult = f_write(&fil, buffer, bufsize(buffer), &bw);
 800279c:	4824      	ldr	r0, [pc, #144]	; (8002830 <update_file+0x118>)
 800279e:	f7ff fa6f 	bl	8001c80 <bufsize>
 80027a2:	4603      	mov	r3, r0
 80027a4:	461a      	mov	r2, r3
 80027a6:	4b27      	ldr	r3, [pc, #156]	; (8002844 <update_file+0x12c>)
 80027a8:	4921      	ldr	r1, [pc, #132]	; (8002830 <update_file+0x118>)
 80027aa:	4822      	ldr	r0, [pc, #136]	; (8002834 <update_file+0x11c>)
 80027ac:	f006 fe13 	bl	80093d6 <f_write>
 80027b0:	4603      	mov	r3, r0
 80027b2:	461a      	mov	r2, r3
 80027b4:	4b1c      	ldr	r3, [pc, #112]	; (8002828 <update_file+0x110>)
 80027b6:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 80027b8:	4b1b      	ldr	r3, [pc, #108]	; (8002828 <update_file+0x110>)
 80027ba:	781b      	ldrb	r3, [r3, #0]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d00d      	beq.n	80027dc <update_file+0xc4>
			clear_buffer();
 80027c0:	f7ff fa74 	bl	8001cac <clear_buffer>
			sprintf (buffer, "error %d in writing *%s*\n", fresult, name);
 80027c4:	4b18      	ldr	r3, [pc, #96]	; (8002828 <update_file+0x110>)
 80027c6:	781b      	ldrb	r3, [r3, #0]
 80027c8:	461a      	mov	r2, r3
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	491e      	ldr	r1, [pc, #120]	; (8002848 <update_file+0x130>)
 80027ce:	4818      	ldr	r0, [pc, #96]	; (8002830 <update_file+0x118>)
 80027d0:	f008 fac2 	bl	800ad58 <siprintf>
			send_uart(buffer);
 80027d4:	4816      	ldr	r0, [pc, #88]	; (8002830 <update_file+0x118>)
 80027d6:	f7ff fab7 	bl	8001d48 <send_uart>
 80027da:	e009      	b.n	80027f0 <update_file+0xd8>
			clear_buffer();
 80027dc:	f7ff fa66 	bl	8001cac <clear_buffer>
			sprintf (buffer, "*%s* written successfully\n", name);
 80027e0:	687a      	ldr	r2, [r7, #4]
 80027e2:	491a      	ldr	r1, [pc, #104]	; (800284c <update_file+0x134>)
 80027e4:	4812      	ldr	r0, [pc, #72]	; (8002830 <update_file+0x118>)
 80027e6:	f008 fab7 	bl	800ad58 <siprintf>
			send_uart(buffer);
 80027ea:	4811      	ldr	r0, [pc, #68]	; (8002830 <update_file+0x118>)
 80027ec:	f7ff faac 	bl	8001d48 <send_uart>
		fresult = f_close(&fil);
 80027f0:	4810      	ldr	r0, [pc, #64]	; (8002834 <update_file+0x11c>)
 80027f2:	f007 f891 	bl	8009918 <f_close>
 80027f6:	4603      	mov	r3, r0
 80027f8:	461a      	mov	r2, r3
 80027fa:	4b0b      	ldr	r3, [pc, #44]	; (8002828 <update_file+0x110>)
 80027fc:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 80027fe:	4b0a      	ldr	r3, [pc, #40]	; (8002828 <update_file+0x110>)
 8002800:	781b      	ldrb	r3, [r3, #0]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d00a      	beq.n	800281c <update_file+0x104>
			sprintf (buffer, "error %d in closing *%s*\n", fresult, name);
 8002806:	4b08      	ldr	r3, [pc, #32]	; (8002828 <update_file+0x110>)
 8002808:	781b      	ldrb	r3, [r3, #0]
 800280a:	461a      	mov	r2, r3
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	4910      	ldr	r1, [pc, #64]	; (8002850 <update_file+0x138>)
 8002810:	4807      	ldr	r0, [pc, #28]	; (8002830 <update_file+0x118>)
 8002812:	f008 faa1 	bl	800ad58 <siprintf>
			send_uart(buffer);
 8002816:	4806      	ldr	r0, [pc, #24]	; (8002830 <update_file+0x118>)
 8002818:	f7ff fa96 	bl	8001d48 <send_uart>
}
 800281c:	bf00      	nop
 800281e:	3708      	adds	r7, #8
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}
 8002824:	200007c4 	.word	0x200007c4
 8002828:	20000c64 	.word	0x20000c64
 800282c:	0800d440 	.word	0x0800d440
 8002830:	20000c1c 	.word	0x20000c1c
 8002834:	20000c6c 	.word	0x20000c6c
 8002838:	0800d6e0 	.word	0x0800d6e0
 800283c:	0800d6fc 	.word	0x0800d6fc
 8002840:	0800d3d8 	.word	0x0800d3d8
 8002844:	20000c5c 	.word	0x20000c5c
 8002848:	0800d73c 	.word	0x0800d73c
 800284c:	0800d400 	.word	0x0800d400
 8002850:	0800d518 	.word	0x0800d518

08002854 <GetMicros>:
/* USER CODE END EC */

/* Exported macro ------------------------------------------------------------*/
/* USER CODE BEGIN EM */
 static inline uint32_t GetMicros()
 {
 8002854:	b480      	push	{r7}
 8002856:	b083      	sub	sp, #12
 8002858:	af00      	add	r7, sp, #0
     uint32_t ms;
     uint32_t st;

     do
     {
         ms = UptimeMillis;
 800285a:	4b11      	ldr	r3, [pc, #68]	; (80028a0 <GetMicros+0x4c>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	607b      	str	r3, [r7, #4]
         st = SysTick->VAL;
 8002860:	4b10      	ldr	r3, [pc, #64]	; (80028a4 <GetMicros+0x50>)
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	603b      	str	r3, [r7, #0]
         asm volatile("nop");
 8002866:	bf00      	nop
         asm volatile("nop");
 8002868:	bf00      	nop
     } while (ms != UptimeMillis);
 800286a:	4b0d      	ldr	r3, [pc, #52]	; (80028a0 <GetMicros+0x4c>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	687a      	ldr	r2, [r7, #4]
 8002870:	429a      	cmp	r2, r3
 8002872:	d1f2      	bne.n	800285a <GetMicros+0x6>

     return ms * 1000 - st / ((SysTick->LOAD + 1) / 1000);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800287a:	fb02 f203 	mul.w	r2, r2, r3
 800287e:	4b09      	ldr	r3, [pc, #36]	; (80028a4 <GetMicros+0x50>)
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	3301      	adds	r3, #1
 8002884:	4908      	ldr	r1, [pc, #32]	; (80028a8 <GetMicros+0x54>)
 8002886:	fba1 1303 	umull	r1, r3, r1, r3
 800288a:	099b      	lsrs	r3, r3, #6
 800288c:	6839      	ldr	r1, [r7, #0]
 800288e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002892:	1ad3      	subs	r3, r2, r3
 }
 8002894:	4618      	mov	r0, r3
 8002896:	370c      	adds	r7, #12
 8002898:	46bd      	mov	sp, r7
 800289a:	bc80      	pop	{r7}
 800289c:	4770      	bx	lr
 800289e:	bf00      	nop
 80028a0:	2000115c 	.word	0x2000115c
 80028a4:	e000e010 	.word	0xe000e010
 80028a8:	10624dd3 	.word	0x10624dd3

080028ac <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80028ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80028ae:	b093      	sub	sp, #76	; 0x4c
 80028b0:	af08      	add	r7, sp, #32
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80028b2:	f001 f923 	bl	8003afc <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80028b6:	f000 fc4b 	bl	8003150 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80028ba:	f000 fd9f 	bl	80033fc <MX_GPIO_Init>
	MX_TIM2_Init();
 80028be:	f000 fd27 	bl	8003310 <MX_TIM2_Init>
	MX_SPI1_Init();
 80028c2:	f000 fcb9 	bl	8003238 <MX_SPI1_Init>
	MX_USART1_UART_Init();
 80028c6:	f000 fd6f 	bl	80033a8 <MX_USART1_UART_Init>
	MX_FATFS_Init();
 80028ca:	f003 fba1 	bl	8006010 <MX_FATFS_Init>
	MX_SPI2_Init();
 80028ce:	f000 fce9 	bl	80032a4 <MX_SPI2_Init>
	MX_I2C1_Init();
 80028d2:	f000 fc83 	bl	80031dc <MX_I2C1_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start(&htim2);
 80028d6:	48b0      	ldr	r0, [pc, #704]	; (8002b98 <main+0x2ec>)
 80028d8:	f002 ff7e 	bl	80057d8 <HAL_TIM_Base_Start>
	HAL_GPIO_WritePin(SPI1_RST_GPIO_Port, SPI1_RST_Pin, 1);
 80028dc:	2201      	movs	r2, #1
 80028de:	2104      	movs	r1, #4
 80028e0:	48ae      	ldr	r0, [pc, #696]	; (8002b9c <main+0x2f0>)
 80028e2:	f001 fc23 	bl	800412c <HAL_GPIO_WritePin>
	Ringbuf_init();
 80028e6:	f7fe f8f9 	bl	8000adc <Ringbuf_init>
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 0);
 80028ea:	2200      	movs	r2, #0
 80028ec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80028f0:	48ab      	ldr	r0, [pc, #684]	; (8002ba0 <main+0x2f4>)
 80028f2:	f001 fc1b 	bl	800412c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 1);
 80028f6:	2201      	movs	r2, #1
 80028f8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80028fc:	48a8      	ldr	r0, [pc, #672]	; (8002ba0 <main+0x2f4>)
 80028fe:	f001 fc15 	bl	800412c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, 1);
 8002902:	2201      	movs	r2, #1
 8002904:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002908:	48a5      	ldr	r0, [pc, #660]	; (8002ba0 <main+0x2f4>)
 800290a:	f001 fc0f 	bl	800412c <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 800290e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002912:	f001 f955 	bl	8003bc0 <HAL_Delay>
	send_uart("Inicializando lado direito. Por favor, aguarde...\n");
 8002916:	48a3      	ldr	r0, [pc, #652]	; (8002ba4 <main+0x2f8>)
 8002918:	f7ff fa16 	bl	8001d48 <send_uart>


	initADS();
 800291c:	f7fe fa72 	bl	8000e04 <initADS>

	send_uart("Montando SD...\n");
 8002920:	48a1      	ldr	r0, [pc, #644]	; (8002ba8 <main+0x2fc>)
 8002922:	f7ff fa11 	bl	8001d48 <send_uart>

	mount_sd();
 8002926:	f7ff fa71 	bl	8001e0c <mount_sd>

	create_file_mod(BASE_NAME_SIZE, fileName);
 800292a:	2303      	movs	r3, #3
 800292c:	499f      	ldr	r1, [pc, #636]	; (8002bac <main+0x300>)
 800292e:	4618      	mov	r0, r3
 8002930:	f7ff fce0 	bl	80022f4 <create_file_mod>
		//MPU6050_Update();
		//sprintf(uart_buffer,"%0.2f\t%0.2f\t%0.2f\t%0.2f\n",(float)angleAccX,(float)angleAccY,(float)angleX,(float)angleY);
		//send_uart(uart_buffer);
		//HAL_Delay(50);

		if (conversion_trigger == 1) {
 8002934:	4b9e      	ldr	r3, [pc, #632]	; (8002bb0 <main+0x304>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	2b01      	cmp	r3, #1
 800293a:	d150      	bne.n	80029de <main+0x132>
			const uint32_t timezinho = GetMicros();
 800293c:	f7ff ff8a 	bl	8002854 <GetMicros>
 8002940:	6278      	str	r0, [r7, #36]	; 0x24
			adc_return1 = read_Value(0x68);
 8002942:	2068      	movs	r0, #104	; 0x68
 8002944:	f7fe fc56 	bl	80011f4 <read_Value>
 8002948:	4603      	mov	r3, r0
 800294a:	4a9a      	ldr	r2, [pc, #616]	; (8002bb4 <main+0x308>)
 800294c:	6013      	str	r3, [r2, #0]
			adc_return2 = read_Value(0x58);
 800294e:	2058      	movs	r0, #88	; 0x58
 8002950:	f7fe fc50 	bl	80011f4 <read_Value>
 8002954:	4603      	mov	r3, r0
 8002956:	4a98      	ldr	r2, [pc, #608]	; (8002bb8 <main+0x30c>)
 8002958:	6013      	str	r3, [r2, #0]
			adc_return3 = read_Value(0x78);
 800295a:	2078      	movs	r0, #120	; 0x78
 800295c:	f7fe fc4a 	bl	80011f4 <read_Value>
 8002960:	4603      	mov	r3, r0
 8002962:	4a96      	ldr	r2, [pc, #600]	; (8002bbc <main+0x310>)
 8002964:	6013      	str	r3, [r2, #0]
			sprintf(buffer, "%lu\t%lu\t%lu\t%lu\n", (unsigned long) timezinho,
 8002966:	4b93      	ldr	r3, [pc, #588]	; (8002bb4 <main+0x308>)
 8002968:	6819      	ldr	r1, [r3, #0]
 800296a:	4b93      	ldr	r3, [pc, #588]	; (8002bb8 <main+0x30c>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4a93      	ldr	r2, [pc, #588]	; (8002bbc <main+0x310>)
 8002970:	6812      	ldr	r2, [r2, #0]
 8002972:	9201      	str	r2, [sp, #4]
 8002974:	9300      	str	r3, [sp, #0]
 8002976:	460b      	mov	r3, r1
 8002978:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800297a:	4991      	ldr	r1, [pc, #580]	; (8002bc0 <main+0x314>)
 800297c:	4891      	ldr	r0, [pc, #580]	; (8002bc4 <main+0x318>)
 800297e:	f008 f9eb 	bl	800ad58 <siprintf>
					(unsigned long) adc_return1, (unsigned long) adc_return2,
					(unsigned long) adc_return3);
			const uint8_t buflen = strlen(buffer);
 8002982:	4890      	ldr	r0, [pc, #576]	; (8002bc4 <main+0x318>)
 8002984:	f7fd fbee 	bl	8000164 <strlen>
 8002988:	4603      	mov	r3, r0
 800298a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
			memccpy(&buffer_SD[line_counter * buflen], buffer, 0, buflen);
 800298e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002992:	4a8d      	ldr	r2, [pc, #564]	; (8002bc8 <main+0x31c>)
 8002994:	6812      	ldr	r2, [r2, #0]
 8002996:	fb02 f303 	mul.w	r3, r2, r3
 800299a:	4a8c      	ldr	r2, [pc, #560]	; (8002bcc <main+0x320>)
 800299c:	1898      	adds	r0, r3, r2
 800299e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80029a2:	2200      	movs	r2, #0
 80029a4:	4987      	ldr	r1, [pc, #540]	; (8002bc4 <main+0x318>)
 80029a6:	f007 fd61 	bl	800a46c <memccpy>
			line_counter++;
 80029aa:	4b87      	ldr	r3, [pc, #540]	; (8002bc8 <main+0x31c>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	3301      	adds	r3, #1
 80029b0:	4a85      	ldr	r2, [pc, #532]	; (8002bc8 <main+0x31c>)
 80029b2:	6013      	str	r3, [r2, #0]
			if (line_counter * buflen > BUFFER_SIZE * ROW_SIZE - buflen) {
 80029b4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80029b8:	4a83      	ldr	r2, [pc, #524]	; (8002bc8 <main+0x31c>)
 80029ba:	6812      	ldr	r2, [r2, #0]
 80029bc:	fb02 f203 	mul.w	r2, r2, r3
 80029c0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80029c4:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80029c8:	429a      	cmp	r2, r3
 80029ca:	dd08      	ble.n	80029de <main+0x132>
				write_file_mod(fileName, buffer_SD);
 80029cc:	497f      	ldr	r1, [pc, #508]	; (8002bcc <main+0x320>)
 80029ce:	4877      	ldr	r0, [pc, #476]	; (8002bac <main+0x300>)
 80029d0:	f7ff fb72 	bl	80020b8 <write_file_mod>
				line_counter = 0;
 80029d4:	4b7c      	ldr	r3, [pc, #496]	; (8002bc8 <main+0x31c>)
 80029d6:	2200      	movs	r2, #0
 80029d8:	601a      	str	r2, [r3, #0]
				clear_buffer_SD();
 80029da:	f7ff f981 	bl	8001ce0 <clear_buffer_SD>
			}
		}

		if (conversion_trigger == 2) {
 80029de:	4b74      	ldr	r3, [pc, #464]	; (8002bb0 <main+0x304>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	2b02      	cmp	r3, #2
 80029e4:	d179      	bne.n	8002ada <main+0x22e>
			const uint32_t timezinho = GetMicros();
 80029e6:	f7ff ff35 	bl	8002854 <GetMicros>
 80029ea:	61f8      	str	r0, [r7, #28]
			adc_return1 = read_Value(0x68);
 80029ec:	2068      	movs	r0, #104	; 0x68
 80029ee:	f7fe fc01 	bl	80011f4 <read_Value>
 80029f2:	4603      	mov	r3, r0
 80029f4:	4a6f      	ldr	r2, [pc, #444]	; (8002bb4 <main+0x308>)
 80029f6:	6013      	str	r3, [r2, #0]
			adc_return2 = read_Value(0x58);
 80029f8:	2058      	movs	r0, #88	; 0x58
 80029fa:	f7fe fbfb 	bl	80011f4 <read_Value>
 80029fe:	4603      	mov	r3, r0
 8002a00:	4a6d      	ldr	r2, [pc, #436]	; (8002bb8 <main+0x30c>)
 8002a02:	6013      	str	r3, [r2, #0]
			adc_return4 = read_Value(0x48);
 8002a04:	2048      	movs	r0, #72	; 0x48
 8002a06:	f7fe fbf5 	bl	80011f4 <read_Value>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	4a70      	ldr	r2, [pc, #448]	; (8002bd0 <main+0x324>)
 8002a0e:	6013      	str	r3, [r2, #0]
			adc_return5 = read_Value(0x38);
 8002a10:	2038      	movs	r0, #56	; 0x38
 8002a12:	f7fe fbef 	bl	80011f4 <read_Value>
 8002a16:	4603      	mov	r3, r0
 8002a18:	4a6e      	ldr	r2, [pc, #440]	; (8002bd4 <main+0x328>)
 8002a1a:	6013      	str	r3, [r2, #0]
			adc_return6 = read_Value(0x28);
 8002a1c:	2028      	movs	r0, #40	; 0x28
 8002a1e:	f7fe fbe9 	bl	80011f4 <read_Value>
 8002a22:	4603      	mov	r3, r0
 8002a24:	4a6c      	ldr	r2, [pc, #432]	; (8002bd8 <main+0x32c>)
 8002a26:	6013      	str	r3, [r2, #0]
			adc_return7 = read_Value(0x18);
 8002a28:	2018      	movs	r0, #24
 8002a2a:	f7fe fbe3 	bl	80011f4 <read_Value>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	4a6a      	ldr	r2, [pc, #424]	; (8002bdc <main+0x330>)
 8002a32:	6013      	str	r3, [r2, #0]
			adc_return8 = read_Value(0x08);
 8002a34:	2008      	movs	r0, #8
 8002a36:	f7fe fbdd 	bl	80011f4 <read_Value>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	4a68      	ldr	r2, [pc, #416]	; (8002be0 <main+0x334>)
 8002a3e:	6013      	str	r3, [r2, #0]
			adc_return3 = read_Value(0x78);
 8002a40:	2078      	movs	r0, #120	; 0x78
 8002a42:	f7fe fbd7 	bl	80011f4 <read_Value>
 8002a46:	4603      	mov	r3, r0
 8002a48:	4a5c      	ldr	r2, [pc, #368]	; (8002bbc <main+0x310>)
 8002a4a:	6013      	str	r3, [r2, #0]
			sprintf(buffer, "%lu\t%lu\t%lu\t%lu\t%lu\t%lu\t%lu\t%lu\t%lu\n",
 8002a4c:	4b59      	ldr	r3, [pc, #356]	; (8002bb4 <main+0x308>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	607b      	str	r3, [r7, #4]
 8002a52:	4b59      	ldr	r3, [pc, #356]	; (8002bb8 <main+0x30c>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4a5e      	ldr	r2, [pc, #376]	; (8002bd0 <main+0x324>)
 8002a58:	6812      	ldr	r2, [r2, #0]
 8002a5a:	495e      	ldr	r1, [pc, #376]	; (8002bd4 <main+0x328>)
 8002a5c:	6809      	ldr	r1, [r1, #0]
 8002a5e:	485e      	ldr	r0, [pc, #376]	; (8002bd8 <main+0x32c>)
 8002a60:	6800      	ldr	r0, [r0, #0]
 8002a62:	4c5e      	ldr	r4, [pc, #376]	; (8002bdc <main+0x330>)
 8002a64:	6824      	ldr	r4, [r4, #0]
 8002a66:	4d5e      	ldr	r5, [pc, #376]	; (8002be0 <main+0x334>)
 8002a68:	682d      	ldr	r5, [r5, #0]
 8002a6a:	4e54      	ldr	r6, [pc, #336]	; (8002bbc <main+0x310>)
 8002a6c:	6836      	ldr	r6, [r6, #0]
 8002a6e:	9606      	str	r6, [sp, #24]
 8002a70:	9505      	str	r5, [sp, #20]
 8002a72:	9404      	str	r4, [sp, #16]
 8002a74:	9003      	str	r0, [sp, #12]
 8002a76:	9102      	str	r1, [sp, #8]
 8002a78:	9201      	str	r2, [sp, #4]
 8002a7a:	9300      	str	r3, [sp, #0]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	69fa      	ldr	r2, [r7, #28]
 8002a80:	4958      	ldr	r1, [pc, #352]	; (8002be4 <main+0x338>)
 8002a82:	4850      	ldr	r0, [pc, #320]	; (8002bc4 <main+0x318>)
 8002a84:	f008 f968 	bl	800ad58 <siprintf>
					(unsigned long) timezinho, (unsigned long) adc_return1,
					(unsigned long) adc_return2, (unsigned long) adc_return4,
					(unsigned long) adc_return5, (unsigned long) adc_return6,
					(unsigned long) adc_return7, (unsigned long) adc_return8,
					(unsigned long) adc_return3);
			const uint8_t buflen = strlen(buffer);
 8002a88:	484e      	ldr	r0, [pc, #312]	; (8002bc4 <main+0x318>)
 8002a8a:	f7fd fb6b 	bl	8000164 <strlen>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	76fb      	strb	r3, [r7, #27]
			memccpy(&buffer_SD[line_counter * buflen], buffer, 0, buflen);
 8002a92:	7efb      	ldrb	r3, [r7, #27]
 8002a94:	4a4c      	ldr	r2, [pc, #304]	; (8002bc8 <main+0x31c>)
 8002a96:	6812      	ldr	r2, [r2, #0]
 8002a98:	fb02 f303 	mul.w	r3, r2, r3
 8002a9c:	4a4b      	ldr	r2, [pc, #300]	; (8002bcc <main+0x320>)
 8002a9e:	1898      	adds	r0, r3, r2
 8002aa0:	7efb      	ldrb	r3, [r7, #27]
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	4947      	ldr	r1, [pc, #284]	; (8002bc4 <main+0x318>)
 8002aa6:	f007 fce1 	bl	800a46c <memccpy>
			line_counter++;
 8002aaa:	4b47      	ldr	r3, [pc, #284]	; (8002bc8 <main+0x31c>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	3301      	adds	r3, #1
 8002ab0:	4a45      	ldr	r2, [pc, #276]	; (8002bc8 <main+0x31c>)
 8002ab2:	6013      	str	r3, [r2, #0]
			if (line_counter * buflen > BUFFER_SIZE * ROW_SIZE - buflen) {
 8002ab4:	7efb      	ldrb	r3, [r7, #27]
 8002ab6:	4a44      	ldr	r2, [pc, #272]	; (8002bc8 <main+0x31c>)
 8002ab8:	6812      	ldr	r2, [r2, #0]
 8002aba:	fb02 f203 	mul.w	r2, r2, r3
 8002abe:	7efb      	ldrb	r3, [r7, #27]
 8002ac0:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8002ac4:	429a      	cmp	r2, r3
 8002ac6:	dd08      	ble.n	8002ada <main+0x22e>
				write_file_mod(fileName, buffer_SD);
 8002ac8:	4940      	ldr	r1, [pc, #256]	; (8002bcc <main+0x320>)
 8002aca:	4838      	ldr	r0, [pc, #224]	; (8002bac <main+0x300>)
 8002acc:	f7ff faf4 	bl	80020b8 <write_file_mod>
				line_counter = 0;
 8002ad0:	4b3d      	ldr	r3, [pc, #244]	; (8002bc8 <main+0x31c>)
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	601a      	str	r2, [r3, #0]
				clear_buffer_SD();
 8002ad6:	f7ff f903 	bl	8001ce0 <clear_buffer_SD>
			}
		}

		if (conversion_trigger == 3) {
 8002ada:	4b35      	ldr	r3, [pc, #212]	; (8002bb0 <main+0x304>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	2b03      	cmp	r3, #3
 8002ae0:	d13c      	bne.n	8002b5c <main+0x2b0>
			const uint32_t timezinho = GetMicros();
 8002ae2:	f7ff feb7 	bl	8002854 <GetMicros>
 8002ae6:	6178      	str	r0, [r7, #20]
			adc_return1 = read_Value(0x68);
 8002ae8:	2068      	movs	r0, #104	; 0x68
 8002aea:	f7fe fb83 	bl	80011f4 <read_Value>
 8002aee:	4603      	mov	r3, r0
 8002af0:	4a30      	ldr	r2, [pc, #192]	; (8002bb4 <main+0x308>)
 8002af2:	6013      	str	r3, [r2, #0]
			adc_return2 = read_Value(0x58);
 8002af4:	2058      	movs	r0, #88	; 0x58
 8002af6:	f7fe fb7d 	bl	80011f4 <read_Value>
 8002afa:	4603      	mov	r3, r0
 8002afc:	4a2e      	ldr	r2, [pc, #184]	; (8002bb8 <main+0x30c>)
 8002afe:	6013      	str	r3, [r2, #0]
			adc_return3 = read_Value(0x78);
 8002b00:	2078      	movs	r0, #120	; 0x78
 8002b02:	f7fe fb77 	bl	80011f4 <read_Value>
 8002b06:	4603      	mov	r3, r0
 8002b08:	4a2c      	ldr	r2, [pc, #176]	; (8002bbc <main+0x310>)
 8002b0a:	6013      	str	r3, [r2, #0]
			sprintf(buffer, "%lu\t%lu\t%lu\t%lu\n", (unsigned long) timezinho,
 8002b0c:	4b29      	ldr	r3, [pc, #164]	; (8002bb4 <main+0x308>)
 8002b0e:	6819      	ldr	r1, [r3, #0]
 8002b10:	4b29      	ldr	r3, [pc, #164]	; (8002bb8 <main+0x30c>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a29      	ldr	r2, [pc, #164]	; (8002bbc <main+0x310>)
 8002b16:	6812      	ldr	r2, [r2, #0]
 8002b18:	9201      	str	r2, [sp, #4]
 8002b1a:	9300      	str	r3, [sp, #0]
 8002b1c:	460b      	mov	r3, r1
 8002b1e:	697a      	ldr	r2, [r7, #20]
 8002b20:	4927      	ldr	r1, [pc, #156]	; (8002bc0 <main+0x314>)
 8002b22:	4828      	ldr	r0, [pc, #160]	; (8002bc4 <main+0x318>)
 8002b24:	f008 f918 	bl	800ad58 <siprintf>
					(unsigned long) adc_return1, (unsigned long) adc_return2,
					(unsigned long) adc_return3);
			const uint8_t buflen = strlen(buffer);
 8002b28:	4826      	ldr	r0, [pc, #152]	; (8002bc4 <main+0x318>)
 8002b2a:	f7fd fb1b 	bl	8000164 <strlen>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	74fb      	strb	r3, [r7, #19]
			send_uart(buffer);
 8002b32:	4824      	ldr	r0, [pc, #144]	; (8002bc4 <main+0x318>)
 8002b34:	f7ff f908 	bl	8001d48 <send_uart>
			line_counter++;
 8002b38:	4b23      	ldr	r3, [pc, #140]	; (8002bc8 <main+0x31c>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	3301      	adds	r3, #1
 8002b3e:	4a22      	ldr	r2, [pc, #136]	; (8002bc8 <main+0x31c>)
 8002b40:	6013      	str	r3, [r2, #0]
			if (line_counter * buflen > BUFFER_SIZE * ROW_SIZE - buflen) {
 8002b42:	7cfb      	ldrb	r3, [r7, #19]
 8002b44:	4a20      	ldr	r2, [pc, #128]	; (8002bc8 <main+0x31c>)
 8002b46:	6812      	ldr	r2, [r2, #0]
 8002b48:	fb02 f203 	mul.w	r2, r2, r3
 8002b4c:	7cfb      	ldrb	r3, [r7, #19]
 8002b4e:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8002b52:	429a      	cmp	r2, r3
 8002b54:	dd02      	ble.n	8002b5c <main+0x2b0>
				line_counter = 0;
 8002b56:	4b1c      	ldr	r3, [pc, #112]	; (8002bc8 <main+0x31c>)
 8002b58:	2200      	movs	r2, #0
 8002b5a:	601a      	str	r2, [r3, #0]
			}
		}

		if (conversion_trigger == 4) {
 8002b5c:	4b14      	ldr	r3, [pc, #80]	; (8002bb0 <main+0x304>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	2b04      	cmp	r3, #4
 8002b62:	f040 82df 	bne.w	8003124 <main+0x878>
			const uint32_t timezinho = GetMicros();
 8002b66:	f7ff fe75 	bl	8002854 <GetMicros>
 8002b6a:	60f8      	str	r0, [r7, #12]
			adc_return1 = read_Value(0x68);
 8002b6c:	2068      	movs	r0, #104	; 0x68
 8002b6e:	f7fe fb41 	bl	80011f4 <read_Value>
 8002b72:	4603      	mov	r3, r0
 8002b74:	4a0f      	ldr	r2, [pc, #60]	; (8002bb4 <main+0x308>)
 8002b76:	6013      	str	r3, [r2, #0]
			adc_return2 = read_Value(0x58);
 8002b78:	2058      	movs	r0, #88	; 0x58
 8002b7a:	f7fe fb3b 	bl	80011f4 <read_Value>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	4a0d      	ldr	r2, [pc, #52]	; (8002bb8 <main+0x30c>)
 8002b82:	6013      	str	r3, [r2, #0]
			adc_return4 = read_Value(0x48);
 8002b84:	2048      	movs	r0, #72	; 0x48
 8002b86:	f7fe fb35 	bl	80011f4 <read_Value>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	4a10      	ldr	r2, [pc, #64]	; (8002bd0 <main+0x324>)
 8002b8e:	6013      	str	r3, [r2, #0]
			adc_return5 = read_Value(0x38);
 8002b90:	2038      	movs	r0, #56	; 0x38
 8002b92:	f7fe fb2f 	bl	80011f4 <read_Value>
 8002b96:	e027      	b.n	8002be8 <main+0x33c>
 8002b98:	20001108 	.word	0x20001108
 8002b9c:	40010c00 	.word	0x40010c00
 8002ba0:	40011000 	.word	0x40011000
 8002ba4:	0800d758 	.word	0x0800d758
 8002ba8:	0800d78c 	.word	0x0800d78c
 8002bac:	20000008 	.word	0x20000008
 8002bb0:	200002b4 	.word	0x200002b4
 8002bb4:	200010f8 	.word	0x200010f8
 8002bb8:	20001104 	.word	0x20001104
 8002bbc:	20001100 	.word	0x20001100
 8002bc0:	0800d79c 	.word	0x0800d79c
 8002bc4:	20000c1c 	.word	0x20000c1c
 8002bc8:	200002b8 	.word	0x200002b8
 8002bcc:	200006c4 	.word	0x200006c4
 8002bd0:	200010fc 	.word	0x200010fc
 8002bd4:	20001158 	.word	0x20001158
 8002bd8:	200010f4 	.word	0x200010f4
 8002bdc:	20001150 	.word	0x20001150
 8002be0:	20001154 	.word	0x20001154
 8002be4:	0800d7b0 	.word	0x0800d7b0
 8002be8:	4603      	mov	r3, r0
 8002bea:	4ab2      	ldr	r2, [pc, #712]	; (8002eb4 <main+0x608>)
 8002bec:	6013      	str	r3, [r2, #0]
			adc_return6 = read_Value(0x28);
 8002bee:	2028      	movs	r0, #40	; 0x28
 8002bf0:	f7fe fb00 	bl	80011f4 <read_Value>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	4ab0      	ldr	r2, [pc, #704]	; (8002eb8 <main+0x60c>)
 8002bf8:	6013      	str	r3, [r2, #0]
			adc_return7 = read_Value(0x18);
 8002bfa:	2018      	movs	r0, #24
 8002bfc:	f7fe fafa 	bl	80011f4 <read_Value>
 8002c00:	4603      	mov	r3, r0
 8002c02:	4aae      	ldr	r2, [pc, #696]	; (8002ebc <main+0x610>)
 8002c04:	6013      	str	r3, [r2, #0]
			adc_return8 = read_Value(0x08);
 8002c06:	2008      	movs	r0, #8
 8002c08:	f7fe faf4 	bl	80011f4 <read_Value>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	4aac      	ldr	r2, [pc, #688]	; (8002ec0 <main+0x614>)
 8002c10:	6013      	str	r3, [r2, #0]
			adc_return3 = read_Value(0x78);
 8002c12:	2078      	movs	r0, #120	; 0x78
 8002c14:	f7fe faee 	bl	80011f4 <read_Value>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	4aaa      	ldr	r2, [pc, #680]	; (8002ec4 <main+0x618>)
 8002c1c:	6013      	str	r3, [r2, #0]
			sprintf(buffer, "%lu\t%lu\t%lu\t%lu\t%lu\t%lu\t%lu\t%lu\t%lu\n",
 8002c1e:	4baa      	ldr	r3, [pc, #680]	; (8002ec8 <main+0x61c>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	607b      	str	r3, [r7, #4]
 8002c24:	4ba9      	ldr	r3, [pc, #676]	; (8002ecc <main+0x620>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4aa9      	ldr	r2, [pc, #676]	; (8002ed0 <main+0x624>)
 8002c2a:	6812      	ldr	r2, [r2, #0]
 8002c2c:	49a1      	ldr	r1, [pc, #644]	; (8002eb4 <main+0x608>)
 8002c2e:	6809      	ldr	r1, [r1, #0]
 8002c30:	48a1      	ldr	r0, [pc, #644]	; (8002eb8 <main+0x60c>)
 8002c32:	6800      	ldr	r0, [r0, #0]
 8002c34:	4ca1      	ldr	r4, [pc, #644]	; (8002ebc <main+0x610>)
 8002c36:	6824      	ldr	r4, [r4, #0]
 8002c38:	4da1      	ldr	r5, [pc, #644]	; (8002ec0 <main+0x614>)
 8002c3a:	682d      	ldr	r5, [r5, #0]
 8002c3c:	4ea1      	ldr	r6, [pc, #644]	; (8002ec4 <main+0x618>)
 8002c3e:	6836      	ldr	r6, [r6, #0]
 8002c40:	9606      	str	r6, [sp, #24]
 8002c42:	9505      	str	r5, [sp, #20]
 8002c44:	9404      	str	r4, [sp, #16]
 8002c46:	9003      	str	r0, [sp, #12]
 8002c48:	9102      	str	r1, [sp, #8]
 8002c4a:	9201      	str	r2, [sp, #4]
 8002c4c:	9300      	str	r3, [sp, #0]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	68fa      	ldr	r2, [r7, #12]
 8002c52:	49a0      	ldr	r1, [pc, #640]	; (8002ed4 <main+0x628>)
 8002c54:	48a0      	ldr	r0, [pc, #640]	; (8002ed8 <main+0x62c>)
 8002c56:	f008 f87f 	bl	800ad58 <siprintf>
					(unsigned long) timezinho, (unsigned long) adc_return1,
					(unsigned long) adc_return2,
					(unsigned long) adc_return4, (unsigned long) adc_return5,
					(unsigned long) adc_return6, (unsigned long) adc_return7,
					(unsigned long) adc_return8, (unsigned long) adc_return3);
			const uint8_t buflen = strlen(buffer);
 8002c5a:	489f      	ldr	r0, [pc, #636]	; (8002ed8 <main+0x62c>)
 8002c5c:	f7fd fa82 	bl	8000164 <strlen>
 8002c60:	4603      	mov	r3, r0
 8002c62:	72fb      	strb	r3, [r7, #11]
			send_uart(buffer);
 8002c64:	489c      	ldr	r0, [pc, #624]	; (8002ed8 <main+0x62c>)
 8002c66:	f7ff f86f 	bl	8001d48 <send_uart>
			line_counter++;
 8002c6a:	4b9c      	ldr	r3, [pc, #624]	; (8002edc <main+0x630>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	3301      	adds	r3, #1
 8002c70:	4a9a      	ldr	r2, [pc, #616]	; (8002edc <main+0x630>)
 8002c72:	6013      	str	r3, [r2, #0]
			if (line_counter * buflen > BUFFER_SIZE * ROW_SIZE - buflen) {
 8002c74:	7afb      	ldrb	r3, [r7, #11]
 8002c76:	4a99      	ldr	r2, [pc, #612]	; (8002edc <main+0x630>)
 8002c78:	6812      	ldr	r2, [r2, #0]
 8002c7a:	fb02 f203 	mul.w	r2, r2, r3
 8002c7e:	7afb      	ldrb	r3, [r7, #11]
 8002c80:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8002c84:	429a      	cmp	r2, r3
 8002c86:	f340 824d 	ble.w	8003124 <main+0x878>
				line_counter = 0;
 8002c8a:	4b94      	ldr	r3, [pc, #592]	; (8002edc <main+0x630>)
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	601a      	str	r2, [r3, #0]
			}
		}
		// ------------------------------------
		// Strip of the code that treats the SD
		// ------------------------------------
		while (IsDataAvailable()) {
 8002c90:	e248      	b.n	8003124 <main+0x878>
			//		  buffer = Uart_read();
			Get_string(buffer);
 8002c92:	4891      	ldr	r0, [pc, #580]	; (8002ed8 <main+0x62c>)
 8002c94:	f7fd ffa2 	bl	8000bdc <Get_string>
			uint8_t len = cmdlength(buffer);
 8002c98:	488f      	ldr	r0, [pc, #572]	; (8002ed8 <main+0x62c>)
 8002c9a:	f7ff f86d 	bl	8001d78 <cmdlength>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	72bb      	strb	r3, [r7, #10]

			//		  buffer[0]='l';
			//		  buffer[1]='s';
			get_path();
 8002ca2:	f7ff f87f 	bl	8001da4 <get_path>
			//
			if (!(strncmp("ls", buffer, len)))
 8002ca6:	7abb      	ldrb	r3, [r7, #10]
 8002ca8:	461a      	mov	r2, r3
 8002caa:	498b      	ldr	r1, [pc, #556]	; (8002ed8 <main+0x62c>)
 8002cac:	488c      	ldr	r0, [pc, #560]	; (8002ee0 <main+0x634>)
 8002cae:	f008 f873 	bl	800ad98 <strncmp>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d102      	bne.n	8002cbe <main+0x412>
				cmd = 'l';
 8002cb8:	4b8a      	ldr	r3, [pc, #552]	; (8002ee4 <main+0x638>)
 8002cba:	226c      	movs	r2, #108	; 0x6c
 8002cbc:	701a      	strb	r2, [r3, #0]

			if (!(strncmp("mkdir", buffer, len)))
 8002cbe:	7abb      	ldrb	r3, [r7, #10]
 8002cc0:	461a      	mov	r2, r3
 8002cc2:	4985      	ldr	r1, [pc, #532]	; (8002ed8 <main+0x62c>)
 8002cc4:	4888      	ldr	r0, [pc, #544]	; (8002ee8 <main+0x63c>)
 8002cc6:	f008 f867 	bl	800ad98 <strncmp>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d102      	bne.n	8002cd6 <main+0x42a>
				cmd = 'm';
 8002cd0:	4b84      	ldr	r3, [pc, #528]	; (8002ee4 <main+0x638>)
 8002cd2:	226d      	movs	r2, #109	; 0x6d
 8002cd4:	701a      	strb	r2, [r3, #0]

			if (!(strncmp("mkfil", buffer, len)))
 8002cd6:	7abb      	ldrb	r3, [r7, #10]
 8002cd8:	461a      	mov	r2, r3
 8002cda:	497f      	ldr	r1, [pc, #508]	; (8002ed8 <main+0x62c>)
 8002cdc:	4883      	ldr	r0, [pc, #524]	; (8002eec <main+0x640>)
 8002cde:	f008 f85b 	bl	800ad98 <strncmp>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d102      	bne.n	8002cee <main+0x442>
				cmd = 'c';
 8002ce8:	4b7e      	ldr	r3, [pc, #504]	; (8002ee4 <main+0x638>)
 8002cea:	2263      	movs	r2, #99	; 0x63
 8002cec:	701a      	strb	r2, [r3, #0]

			if (!(strncmp("read", buffer, len)))
 8002cee:	7abb      	ldrb	r3, [r7, #10]
 8002cf0:	461a      	mov	r2, r3
 8002cf2:	4979      	ldr	r1, [pc, #484]	; (8002ed8 <main+0x62c>)
 8002cf4:	487e      	ldr	r0, [pc, #504]	; (8002ef0 <main+0x644>)
 8002cf6:	f008 f84f 	bl	800ad98 <strncmp>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d102      	bne.n	8002d06 <main+0x45a>
				cmd = 'r';
 8002d00:	4b78      	ldr	r3, [pc, #480]	; (8002ee4 <main+0x638>)
 8002d02:	2272      	movs	r2, #114	; 0x72
 8002d04:	701a      	strb	r2, [r3, #0]

			if (!(strncmp("write", buffer, len)))
 8002d06:	7abb      	ldrb	r3, [r7, #10]
 8002d08:	461a      	mov	r2, r3
 8002d0a:	4973      	ldr	r1, [pc, #460]	; (8002ed8 <main+0x62c>)
 8002d0c:	4879      	ldr	r0, [pc, #484]	; (8002ef4 <main+0x648>)
 8002d0e:	f008 f843 	bl	800ad98 <strncmp>
 8002d12:	4603      	mov	r3, r0
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d102      	bne.n	8002d1e <main+0x472>
				cmd = 'w';
 8002d18:	4b72      	ldr	r3, [pc, #456]	; (8002ee4 <main+0x638>)
 8002d1a:	2277      	movs	r2, #119	; 0x77
 8002d1c:	701a      	strb	r2, [r3, #0]

			if (!(strncmp("rm", buffer, len)))
 8002d1e:	7abb      	ldrb	r3, [r7, #10]
 8002d20:	461a      	mov	r2, r3
 8002d22:	496d      	ldr	r1, [pc, #436]	; (8002ed8 <main+0x62c>)
 8002d24:	4874      	ldr	r0, [pc, #464]	; (8002ef8 <main+0x64c>)
 8002d26:	f008 f837 	bl	800ad98 <strncmp>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d102      	bne.n	8002d36 <main+0x48a>
				cmd = 'd';
 8002d30:	4b6c      	ldr	r3, [pc, #432]	; (8002ee4 <main+0x638>)
 8002d32:	2264      	movs	r2, #100	; 0x64
 8002d34:	701a      	strb	r2, [r3, #0]

			if (!(strncmp("update", buffer, len)))
 8002d36:	7abb      	ldrb	r3, [r7, #10]
 8002d38:	461a      	mov	r2, r3
 8002d3a:	4967      	ldr	r1, [pc, #412]	; (8002ed8 <main+0x62c>)
 8002d3c:	486f      	ldr	r0, [pc, #444]	; (8002efc <main+0x650>)
 8002d3e:	f008 f82b 	bl	800ad98 <strncmp>
 8002d42:	4603      	mov	r3, r0
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d102      	bne.n	8002d4e <main+0x4a2>
				cmd = 'u';
 8002d48:	4b66      	ldr	r3, [pc, #408]	; (8002ee4 <main+0x638>)
 8002d4a:	2275      	movs	r2, #117	; 0x75
 8002d4c:	701a      	strb	r2, [r3, #0]

			if (!(strncmp("checkfile", buffer, len)))
 8002d4e:	7abb      	ldrb	r3, [r7, #10]
 8002d50:	461a      	mov	r2, r3
 8002d52:	4961      	ldr	r1, [pc, #388]	; (8002ed8 <main+0x62c>)
 8002d54:	486a      	ldr	r0, [pc, #424]	; (8002f00 <main+0x654>)
 8002d56:	f008 f81f 	bl	800ad98 <strncmp>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d102      	bne.n	8002d66 <main+0x4ba>
				cmd = 'f';
 8002d60:	4b60      	ldr	r3, [pc, #384]	; (8002ee4 <main+0x638>)
 8002d62:	2266      	movs	r2, #102	; 0x66
 8002d64:	701a      	strb	r2, [r3, #0]

			if (!(strncmp("checksd", buffer, len)))
 8002d66:	7abb      	ldrb	r3, [r7, #10]
 8002d68:	461a      	mov	r2, r3
 8002d6a:	495b      	ldr	r1, [pc, #364]	; (8002ed8 <main+0x62c>)
 8002d6c:	4865      	ldr	r0, [pc, #404]	; (8002f04 <main+0x658>)
 8002d6e:	f008 f813 	bl	800ad98 <strncmp>
 8002d72:	4603      	mov	r3, r0
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d102      	bne.n	8002d7e <main+0x4d2>
				cmd = 's';
 8002d78:	4b5a      	ldr	r3, [pc, #360]	; (8002ee4 <main+0x638>)
 8002d7a:	2273      	movs	r2, #115	; 0x73
 8002d7c:	701a      	strb	r2, [r3, #0]

			if (!(strncmp("sd3", buffer, len)))
 8002d7e:	7abb      	ldrb	r3, [r7, #10]
 8002d80:	461a      	mov	r2, r3
 8002d82:	4955      	ldr	r1, [pc, #340]	; (8002ed8 <main+0x62c>)
 8002d84:	4860      	ldr	r0, [pc, #384]	; (8002f08 <main+0x65c>)
 8002d86:	f008 f807 	bl	800ad98 <strncmp>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d102      	bne.n	8002d96 <main+0x4ea>
				cmd = 'x';
 8002d90:	4b54      	ldr	r3, [pc, #336]	; (8002ee4 <main+0x638>)
 8002d92:	2278      	movs	r2, #120	; 0x78
 8002d94:	701a      	strb	r2, [r3, #0]

			if (!(strncmp("serial3", buffer, len)))
 8002d96:	7abb      	ldrb	r3, [r7, #10]
 8002d98:	461a      	mov	r2, r3
 8002d9a:	494f      	ldr	r1, [pc, #316]	; (8002ed8 <main+0x62c>)
 8002d9c:	485b      	ldr	r0, [pc, #364]	; (8002f0c <main+0x660>)
 8002d9e:	f007 fffb 	bl	800ad98 <strncmp>
 8002da2:	4603      	mov	r3, r0
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d102      	bne.n	8002dae <main+0x502>
				cmd = 'b';
 8002da8:	4b4e      	ldr	r3, [pc, #312]	; (8002ee4 <main+0x638>)
 8002daa:	2262      	movs	r2, #98	; 0x62
 8002dac:	701a      	strb	r2, [r3, #0]

			if (!(strncmp("sd8", buffer, len)))
 8002dae:	7abb      	ldrb	r3, [r7, #10]
 8002db0:	461a      	mov	r2, r3
 8002db2:	4949      	ldr	r1, [pc, #292]	; (8002ed8 <main+0x62c>)
 8002db4:	4856      	ldr	r0, [pc, #344]	; (8002f10 <main+0x664>)
 8002db6:	f007 ffef 	bl	800ad98 <strncmp>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d102      	bne.n	8002dc6 <main+0x51a>
				cmd = 'a';
 8002dc0:	4b48      	ldr	r3, [pc, #288]	; (8002ee4 <main+0x638>)
 8002dc2:	2261      	movs	r2, #97	; 0x61
 8002dc4:	701a      	strb	r2, [r3, #0]

			if (!(strncmp("serial8", buffer, len)))
 8002dc6:	7abb      	ldrb	r3, [r7, #10]
 8002dc8:	461a      	mov	r2, r3
 8002dca:	4943      	ldr	r1, [pc, #268]	; (8002ed8 <main+0x62c>)
 8002dcc:	4851      	ldr	r0, [pc, #324]	; (8002f14 <main+0x668>)
 8002dce:	f007 ffe3 	bl	800ad98 <strncmp>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d102      	bne.n	8002dde <main+0x532>
				cmd = 'e';
 8002dd8:	4b42      	ldr	r3, [pc, #264]	; (8002ee4 <main+0x638>)
 8002dda:	2265      	movs	r2, #101	; 0x65
 8002ddc:	701a      	strb	r2, [r3, #0]

			if (!(strncmp("end", buffer, len)))
 8002dde:	7abb      	ldrb	r3, [r7, #10]
 8002de0:	461a      	mov	r2, r3
 8002de2:	493d      	ldr	r1, [pc, #244]	; (8002ed8 <main+0x62c>)
 8002de4:	484c      	ldr	r0, [pc, #304]	; (8002f18 <main+0x66c>)
 8002de6:	f007 ffd7 	bl	800ad98 <strncmp>
 8002dea:	4603      	mov	r3, r0
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d102      	bne.n	8002df6 <main+0x54a>
				cmd = 'y';
 8002df0:	4b3c      	ldr	r3, [pc, #240]	; (8002ee4 <main+0x638>)
 8002df2:	2279      	movs	r2, #121	; 0x79
 8002df4:	701a      	strb	r2, [r3, #0]
			//sprintf (buffer, "BUFFER SIZE: \t%d\n",len);
			//send_uart(buffer);

			switch (cmd) {
 8002df6:	4b3b      	ldr	r3, [pc, #236]	; (8002ee4 <main+0x638>)
 8002df8:	781b      	ldrb	r3, [r3, #0]
 8002dfa:	3b61      	subs	r3, #97	; 0x61
 8002dfc:	2b18      	cmp	r3, #24
 8002dfe:	f200 818c 	bhi.w	800311a <main+0x86e>
 8002e02:	a201      	add	r2, pc, #4	; (adr r2, 8002e08 <main+0x55c>)
 8002e04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e08:	08002f29 	.word	0x08002f29
 8002e0c:	08002f71 	.word	0x08002f71
 8002e10:	08003083 	.word	0x08003083
 8002e14:	080030c5 	.word	0x080030c5
 8002e18:	08002fb9 	.word	0x08002fb9
 8002e1c:	080030f1 	.word	0x080030f1
 8002e20:	0800311b 	.word	0x0800311b
 8002e24:	0800311b 	.word	0x0800311b
 8002e28:	0800311b 	.word	0x0800311b
 8002e2c:	0800311b 	.word	0x0800311b
 8002e30:	0800311b 	.word	0x0800311b
 8002e34:	08003057 	.word	0x08003057
 8002e38:	0800306d 	.word	0x0800306d
 8002e3c:	0800311b 	.word	0x0800311b
 8002e40:	0800311b 	.word	0x0800311b
 8002e44:	0800311b 	.word	0x0800311b
 8002e48:	0800311b 	.word	0x0800311b
 8002e4c:	08003099 	.word	0x08003099
 8002e50:	08003107 	.word	0x08003107
 8002e54:	0800311b 	.word	0x0800311b
 8002e58:	080030db 	.word	0x080030db
 8002e5c:	0800311b 	.word	0x0800311b
 8002e60:	080030af 	.word	0x080030af
 8002e64:	08002e6d 	.word	0x08002e6d
 8002e68:	08003001 	.word	0x08003001
			case ('x'):
										//send_uart("ADS1256 started.");
										HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 1);
 8002e6c:	2201      	movs	r2, #1
 8002e6e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002e72:	482a      	ldr	r0, [pc, #168]	; (8002f1c <main+0x670>)
 8002e74:	f001 f95a 	bl	800412c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 0);
 8002e78:	2200      	movs	r2, #0
 8002e7a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002e7e:	4827      	ldr	r0, [pc, #156]	; (8002f1c <main+0x670>)
 8002e80:	f001 f954 	bl	800412c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, 1);
 8002e84:	2201      	movs	r2, #1
 8002e86:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002e8a:	4824      	ldr	r0, [pc, #144]	; (8002f1c <main+0x670>)
 8002e8c:	f001 f94e 	bl	800412c <HAL_GPIO_WritePin>
			//				create_file_mod(BASE_NAME_SIZE, fileName);
			delayMicroseconds(500);
 8002e90:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002e94:	f000 fb4c 	bl	8003530 <delayMicroseconds>
			cmd = 0;
 8002e98:	4b12      	ldr	r3, [pc, #72]	; (8002ee4 <main+0x638>)
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	701a      	strb	r2, [r3, #0]
			conversion_trigger = 1;
 8002e9e:	4b20      	ldr	r3, [pc, #128]	; (8002f20 <main+0x674>)
 8002ea0:	2201      	movs	r2, #1
 8002ea2:	601a      	str	r2, [r3, #0]
			clear_buffer();
 8002ea4:	f7fe ff02 	bl	8001cac <clear_buffer>
			clear_path();
 8002ea8:	f7fe ff34 	bl	8001d14 <clear_path>
			UptimeMillis = 0;
 8002eac:	4b1d      	ldr	r3, [pc, #116]	; (8002f24 <main+0x678>)
 8002eae:	2200      	movs	r2, #0
 8002eb0:	601a      	str	r2, [r3, #0]
			break;
 8002eb2:	e137      	b.n	8003124 <main+0x878>
 8002eb4:	20001158 	.word	0x20001158
 8002eb8:	200010f4 	.word	0x200010f4
 8002ebc:	20001150 	.word	0x20001150
 8002ec0:	20001154 	.word	0x20001154
 8002ec4:	20001100 	.word	0x20001100
 8002ec8:	200010f8 	.word	0x200010f8
 8002ecc:	20001104 	.word	0x20001104
 8002ed0:	200010fc 	.word	0x200010fc
 8002ed4:	0800d7b0 	.word	0x0800d7b0
 8002ed8:	20000c1c 	.word	0x20000c1c
 8002edc:	200002b8 	.word	0x200002b8
 8002ee0:	0800d7d8 	.word	0x0800d7d8
 8002ee4:	200002bc 	.word	0x200002bc
 8002ee8:	0800d7dc 	.word	0x0800d7dc
 8002eec:	0800d7e4 	.word	0x0800d7e4
 8002ef0:	0800d7ec 	.word	0x0800d7ec
 8002ef4:	0800d7f4 	.word	0x0800d7f4
 8002ef8:	0800d7fc 	.word	0x0800d7fc
 8002efc:	0800d800 	.word	0x0800d800
 8002f00:	0800d808 	.word	0x0800d808
 8002f04:	0800d814 	.word	0x0800d814
 8002f08:	0800d81c 	.word	0x0800d81c
 8002f0c:	0800d820 	.word	0x0800d820
 8002f10:	0800d828 	.word	0x0800d828
 8002f14:	0800d82c 	.word	0x0800d82c
 8002f18:	0800d834 	.word	0x0800d834
 8002f1c:	40011000 	.word	0x40011000
 8002f20:	200002b4 	.word	0x200002b4
 8002f24:	2000115c 	.word	0x2000115c

			case ('a'):
										//send_uart("ADS1256 started.");
										HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 1);
 8002f28:	2201      	movs	r2, #1
 8002f2a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002f2e:	4881      	ldr	r0, [pc, #516]	; (8003134 <main+0x888>)
 8002f30:	f001 f8fc 	bl	800412c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 0);
 8002f34:	2200      	movs	r2, #0
 8002f36:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002f3a:	487e      	ldr	r0, [pc, #504]	; (8003134 <main+0x888>)
 8002f3c:	f001 f8f6 	bl	800412c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, 1);
 8002f40:	2201      	movs	r2, #1
 8002f42:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002f46:	487b      	ldr	r0, [pc, #492]	; (8003134 <main+0x888>)
 8002f48:	f001 f8f0 	bl	800412c <HAL_GPIO_WritePin>
			//				create_file_mod(BASE_NAME_SIZE, fileName);
			delayMicroseconds(500);
 8002f4c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002f50:	f000 faee 	bl	8003530 <delayMicroseconds>
			cmd = 0;
 8002f54:	4b78      	ldr	r3, [pc, #480]	; (8003138 <main+0x88c>)
 8002f56:	2200      	movs	r2, #0
 8002f58:	701a      	strb	r2, [r3, #0]
			conversion_trigger = 2;
 8002f5a:	4b78      	ldr	r3, [pc, #480]	; (800313c <main+0x890>)
 8002f5c:	2202      	movs	r2, #2
 8002f5e:	601a      	str	r2, [r3, #0]
			clear_buffer();
 8002f60:	f7fe fea4 	bl	8001cac <clear_buffer>
			clear_path();
 8002f64:	f7fe fed6 	bl	8001d14 <clear_path>
			UptimeMillis = 0;
 8002f68:	4b75      	ldr	r3, [pc, #468]	; (8003140 <main+0x894>)
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	601a      	str	r2, [r3, #0]
			break;
 8002f6e:	e0d9      	b.n	8003124 <main+0x878>

			case ('b'):
										//send_uart("ADS1256 started.");
										HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 1);
 8002f70:	2201      	movs	r2, #1
 8002f72:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002f76:	486f      	ldr	r0, [pc, #444]	; (8003134 <main+0x888>)
 8002f78:	f001 f8d8 	bl	800412c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 1);
 8002f7c:	2201      	movs	r2, #1
 8002f7e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002f82:	486c      	ldr	r0, [pc, #432]	; (8003134 <main+0x888>)
 8002f84:	f001 f8d2 	bl	800412c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, 0);
 8002f88:	2200      	movs	r2, #0
 8002f8a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002f8e:	4869      	ldr	r0, [pc, #420]	; (8003134 <main+0x888>)
 8002f90:	f001 f8cc 	bl	800412c <HAL_GPIO_WritePin>
			//				create_file_mod(BASE_NAME_SIZE, fileName);
			delayMicroseconds(500);
 8002f94:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002f98:	f000 faca 	bl	8003530 <delayMicroseconds>
			cmd = 0;
 8002f9c:	4b66      	ldr	r3, [pc, #408]	; (8003138 <main+0x88c>)
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	701a      	strb	r2, [r3, #0]
			conversion_trigger = 3;
 8002fa2:	4b66      	ldr	r3, [pc, #408]	; (800313c <main+0x890>)
 8002fa4:	2203      	movs	r2, #3
 8002fa6:	601a      	str	r2, [r3, #0]
			clear_buffer();
 8002fa8:	f7fe fe80 	bl	8001cac <clear_buffer>
			clear_path();
 8002fac:	f7fe feb2 	bl	8001d14 <clear_path>
			UptimeMillis = 0;
 8002fb0:	4b63      	ldr	r3, [pc, #396]	; (8003140 <main+0x894>)
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	601a      	str	r2, [r3, #0]
			break;
 8002fb6:	e0b5      	b.n	8003124 <main+0x878>

			case ('e'):
										//send_uart("ADS1256 started.");
										HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 1);
 8002fb8:	2201      	movs	r2, #1
 8002fba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002fbe:	485d      	ldr	r0, [pc, #372]	; (8003134 <main+0x888>)
 8002fc0:	f001 f8b4 	bl	800412c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 1);
 8002fc4:	2201      	movs	r2, #1
 8002fc6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002fca:	485a      	ldr	r0, [pc, #360]	; (8003134 <main+0x888>)
 8002fcc:	f001 f8ae 	bl	800412c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, 0);
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002fd6:	4857      	ldr	r0, [pc, #348]	; (8003134 <main+0x888>)
 8002fd8:	f001 f8a8 	bl	800412c <HAL_GPIO_WritePin>
			//				create_file_mod(BASE_NAME_SIZE, fileName);
			delayMicroseconds(500);
 8002fdc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002fe0:	f000 faa6 	bl	8003530 <delayMicroseconds>
			cmd = 0;
 8002fe4:	4b54      	ldr	r3, [pc, #336]	; (8003138 <main+0x88c>)
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	701a      	strb	r2, [r3, #0]
			conversion_trigger = 4;
 8002fea:	4b54      	ldr	r3, [pc, #336]	; (800313c <main+0x890>)
 8002fec:	2204      	movs	r2, #4
 8002fee:	601a      	str	r2, [r3, #0]
			clear_buffer();
 8002ff0:	f7fe fe5c 	bl	8001cac <clear_buffer>
			clear_path();
 8002ff4:	f7fe fe8e 	bl	8001d14 <clear_path>
			UptimeMillis = 0;
 8002ff8:	4b51      	ldr	r3, [pc, #324]	; (8003140 <main+0x894>)
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	601a      	str	r2, [r3, #0]
			break;
 8002ffe:	e091      	b.n	8003124 <main+0x878>

			case ('y'):
										//send_uart("ADS1256 halted.");
										HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 0);
 8003000:	2200      	movs	r2, #0
 8003002:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003006:	484b      	ldr	r0, [pc, #300]	; (8003134 <main+0x888>)
 8003008:	f001 f890 	bl	800412c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 1);
 800300c:	2201      	movs	r2, #1
 800300e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003012:	4848      	ldr	r0, [pc, #288]	; (8003134 <main+0x888>)
 8003014:	f001 f88a 	bl	800412c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, 1);
 8003018:	2201      	movs	r2, #1
 800301a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800301e:	4845      	ldr	r0, [pc, #276]	; (8003134 <main+0x888>)
 8003020:	f001 f884 	bl	800412c <HAL_GPIO_WritePin>
			cmd = 0;
 8003024:	4b44      	ldr	r3, [pc, #272]	; (8003138 <main+0x88c>)
 8003026:	2200      	movs	r2, #0
 8003028:	701a      	strb	r2, [r3, #0]
			conversion_trigger = 0;
 800302a:	4b44      	ldr	r3, [pc, #272]	; (800313c <main+0x890>)
 800302c:	2200      	movs	r2, #0
 800302e:	601a      	str	r2, [r3, #0]
			write_file_mod(fileName, buffer_SD);
 8003030:	4944      	ldr	r1, [pc, #272]	; (8003144 <main+0x898>)
 8003032:	4845      	ldr	r0, [pc, #276]	; (8003148 <main+0x89c>)
 8003034:	f7ff f840 	bl	80020b8 <write_file_mod>
			close_file(fileName);
 8003038:	4843      	ldr	r0, [pc, #268]	; (8003148 <main+0x89c>)
 800303a:	f7ff f9c7 	bl	80023cc <close_file>
			clear_buffer_SD();
 800303e:	f7fe fe4f 	bl	8001ce0 <clear_buffer_SD>
			clear_buffer();
 8003042:	f7fe fe33 	bl	8001cac <clear_buffer>
			clear_path();
 8003046:	f7fe fe65 	bl	8001d14 <clear_path>
			create_file_mod(BASE_NAME_SIZE, fileName);
 800304a:	2303      	movs	r3, #3
 800304c:	493e      	ldr	r1, [pc, #248]	; (8003148 <main+0x89c>)
 800304e:	4618      	mov	r0, r3
 8003050:	f7ff f950 	bl	80022f4 <create_file_mod>
			break;
 8003054:	e066      	b.n	8003124 <main+0x878>

			case ('l'):
										scan_files(path);
 8003056:	483d      	ldr	r0, [pc, #244]	; (800314c <main+0x8a0>)
 8003058:	f7fe fefa 	bl	8001e50 <scan_files>
			cmd = 0;
 800305c:	4b36      	ldr	r3, [pc, #216]	; (8003138 <main+0x88c>)
 800305e:	2200      	movs	r2, #0
 8003060:	701a      	strb	r2, [r3, #0]
			clear_buffer();
 8003062:	f7fe fe23 	bl	8001cac <clear_buffer>
			clear_path();
 8003066:	f7fe fe55 	bl	8001d14 <clear_path>
			break;
 800306a:	e05b      	b.n	8003124 <main+0x878>

			case ('m'):
										create_dir(path);
 800306c:	4837      	ldr	r0, [pc, #220]	; (800314c <main+0x8a0>)
 800306e:	f7ff fa19 	bl	80024a4 <create_dir>
			cmd = 0;
 8003072:	4b31      	ldr	r3, [pc, #196]	; (8003138 <main+0x88c>)
 8003074:	2200      	movs	r2, #0
 8003076:	701a      	strb	r2, [r3, #0]
			clear_buffer();
 8003078:	f7fe fe18 	bl	8001cac <clear_buffer>
			clear_path();
 800307c:	f7fe fe4a 	bl	8001d14 <clear_path>
			break;
 8003080:	e050      	b.n	8003124 <main+0x878>

			case ('c'):
										create_file(path);
 8003082:	4832      	ldr	r0, [pc, #200]	; (800314c <main+0x8a0>)
 8003084:	f7ff f8d2 	bl	800222c <create_file>
			cmd = 0;
 8003088:	4b2b      	ldr	r3, [pc, #172]	; (8003138 <main+0x88c>)
 800308a:	2200      	movs	r2, #0
 800308c:	701a      	strb	r2, [r3, #0]
			clear_buffer();
 800308e:	f7fe fe0d 	bl	8001cac <clear_buffer>
			clear_path();
 8003092:	f7fe fe3f 	bl	8001d14 <clear_path>
			break;
 8003096:	e045      	b.n	8003124 <main+0x878>

			case ('r'):
										read_file(path);
 8003098:	482c      	ldr	r0, [pc, #176]	; (800314c <main+0x8a0>)
 800309a:	f7ff f83f 	bl	800211c <read_file>
			cmd = 0;
 800309e:	4b26      	ldr	r3, [pc, #152]	; (8003138 <main+0x88c>)
 80030a0:	2200      	movs	r2, #0
 80030a2:	701a      	strb	r2, [r3, #0]
			clear_buffer();
 80030a4:	f7fe fe02 	bl	8001cac <clear_buffer>
			clear_path();
 80030a8:	f7fe fe34 	bl	8001d14 <clear_path>
			break;
 80030ac:	e03a      	b.n	8003124 <main+0x878>

			case ('w'):
										write_file(path);
 80030ae:	4827      	ldr	r0, [pc, #156]	; (800314c <main+0x8a0>)
 80030b0:	f7fe ff64 	bl	8001f7c <write_file>
			cmd = 0;
 80030b4:	4b20      	ldr	r3, [pc, #128]	; (8003138 <main+0x88c>)
 80030b6:	2200      	movs	r2, #0
 80030b8:	701a      	strb	r2, [r3, #0]
			clear_buffer();
 80030ba:	f7fe fdf7 	bl	8001cac <clear_buffer>
			clear_path();
 80030be:	f7fe fe29 	bl	8001d14 <clear_path>
			break;
 80030c2:	e02f      	b.n	8003124 <main+0x878>

			case ('d'):
										remove_file(path);
 80030c4:	4821      	ldr	r0, [pc, #132]	; (800314c <main+0x8a0>)
 80030c6:	f7ff f9a7 	bl	8002418 <remove_file>
			cmd = 0;
 80030ca:	4b1b      	ldr	r3, [pc, #108]	; (8003138 <main+0x88c>)
 80030cc:	2200      	movs	r2, #0
 80030ce:	701a      	strb	r2, [r3, #0]
			clear_buffer();
 80030d0:	f7fe fdec 	bl	8001cac <clear_buffer>
			clear_path();
 80030d4:	f7fe fe1e 	bl	8001d14 <clear_path>
			break;
 80030d8:	e024      	b.n	8003124 <main+0x878>

			case ('u'):
										update_file(path);
 80030da:	481c      	ldr	r0, [pc, #112]	; (800314c <main+0x8a0>)
 80030dc:	f7ff fb1c 	bl	8002718 <update_file>
			cmd = 0;
 80030e0:	4b15      	ldr	r3, [pc, #84]	; (8003138 <main+0x88c>)
 80030e2:	2200      	movs	r2, #0
 80030e4:	701a      	strb	r2, [r3, #0]
			clear_buffer();
 80030e6:	f7fe fde1 	bl	8001cac <clear_buffer>
			clear_path();
 80030ea:	f7fe fe13 	bl	8001d14 <clear_path>
			break;
 80030ee:	e019      	b.n	8003124 <main+0x878>

			case ('f'):
										check_file(path);
 80030f0:	4816      	ldr	r0, [pc, #88]	; (800314c <main+0x8a0>)
 80030f2:	f7ff fa6b 	bl	80025cc <check_file>
			cmd = 0;
 80030f6:	4b10      	ldr	r3, [pc, #64]	; (8003138 <main+0x88c>)
 80030f8:	2200      	movs	r2, #0
 80030fa:	701a      	strb	r2, [r3, #0]
			clear_buffer();
 80030fc:	f7fe fdd6 	bl	8001cac <clear_buffer>
			clear_path();
 8003100:	f7fe fe08 	bl	8001d14 <clear_path>
			break;
 8003104:	e00e      	b.n	8003124 <main+0x878>

			case ('s'):
										check_sd();
 8003106:	f7ff f9fb 	bl	8002500 <check_sd>
			cmd = 0;
 800310a:	4b0b      	ldr	r3, [pc, #44]	; (8003138 <main+0x88c>)
 800310c:	2200      	movs	r2, #0
 800310e:	701a      	strb	r2, [r3, #0]
			clear_buffer();
 8003110:	f7fe fdcc 	bl	8001cac <clear_buffer>
			clear_path();
 8003114:	f7fe fdfe 	bl	8001d14 <clear_path>
			break;
 8003118:	e004      	b.n	8003124 <main+0x878>

			default:
				clear_buffer();
 800311a:	f7fe fdc7 	bl	8001cac <clear_buffer>
				clear_path();
 800311e:	f7fe fdf9 	bl	8001d14 <clear_path>
				break;
 8003122:	bf00      	nop
		while (IsDataAvailable()) {
 8003124:	f7fd fd44 	bl	8000bb0 <IsDataAvailable>
 8003128:	4603      	mov	r3, r0
 800312a:	2b00      	cmp	r3, #0
 800312c:	f47f adb1 	bne.w	8002c92 <main+0x3e6>
		if (conversion_trigger == 1) {
 8003130:	e400      	b.n	8002934 <main+0x88>
 8003132:	bf00      	nop
 8003134:	40011000 	.word	0x40011000
 8003138:	200002bc 	.word	0x200002bc
 800313c:	200002b4 	.word	0x200002b4
 8003140:	2000115c 	.word	0x2000115c
 8003144:	200006c4 	.word	0x200006c4
 8003148:	20000008 	.word	0x20000008
 800314c:	200006a4 	.word	0x200006a4

08003150 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b090      	sub	sp, #64	; 0x40
 8003154:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003156:	f107 0318 	add.w	r3, r7, #24
 800315a:	2228      	movs	r2, #40	; 0x28
 800315c:	2100      	movs	r1, #0
 800315e:	4618      	mov	r0, r3
 8003160:	f007 f993 	bl	800a48a <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003164:	1d3b      	adds	r3, r7, #4
 8003166:	2200      	movs	r2, #0
 8003168:	601a      	str	r2, [r3, #0]
 800316a:	605a      	str	r2, [r3, #4]
 800316c:	609a      	str	r2, [r3, #8]
 800316e:	60da      	str	r2, [r3, #12]
 8003170:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003172:	2301      	movs	r3, #1
 8003174:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003176:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800317a:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800317c:	2300      	movs	r3, #0
 800317e:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003180:	2301      	movs	r3, #1
 8003182:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003184:	2302      	movs	r3, #2
 8003186:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003188:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800318c:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800318e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8003192:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003194:	f107 0318 	add.w	r3, r7, #24
 8003198:	4618      	mov	r0, r3
 800319a:	f001 f93b 	bl	8004414 <HAL_RCC_OscConfig>
 800319e:	4603      	mov	r3, r0
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d001      	beq.n	80031a8 <SystemClock_Config+0x58>
	{
		Error_Handler();
 80031a4:	f000 f9dc 	bl	8003560 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80031a8:	230f      	movs	r3, #15
 80031aa:	607b      	str	r3, [r7, #4]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80031ac:	2302      	movs	r3, #2
 80031ae:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80031b0:	2300      	movs	r3, #0
 80031b2:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80031b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80031b8:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80031ba:	2300      	movs	r3, #0
 80031bc:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80031be:	1d3b      	adds	r3, r7, #4
 80031c0:	2102      	movs	r1, #2
 80031c2:	4618      	mov	r0, r3
 80031c4:	f001 fba6 	bl	8004914 <HAL_RCC_ClockConfig>
 80031c8:	4603      	mov	r3, r0
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d001      	beq.n	80031d2 <SystemClock_Config+0x82>
	{
		Error_Handler();
 80031ce:	f000 f9c7 	bl	8003560 <Error_Handler>
	}
}
 80031d2:	bf00      	nop
 80031d4:	3740      	adds	r7, #64	; 0x40
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}
	...

080031dc <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 80031e0:	4b12      	ldr	r3, [pc, #72]	; (800322c <MX_I2C1_Init+0x50>)
 80031e2:	4a13      	ldr	r2, [pc, #76]	; (8003230 <MX_I2C1_Init+0x54>)
 80031e4:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 400000;
 80031e6:	4b11      	ldr	r3, [pc, #68]	; (800322c <MX_I2C1_Init+0x50>)
 80031e8:	4a12      	ldr	r2, [pc, #72]	; (8003234 <MX_I2C1_Init+0x58>)
 80031ea:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80031ec:	4b0f      	ldr	r3, [pc, #60]	; (800322c <MX_I2C1_Init+0x50>)
 80031ee:	2200      	movs	r2, #0
 80031f0:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 80031f2:	4b0e      	ldr	r3, [pc, #56]	; (800322c <MX_I2C1_Init+0x50>)
 80031f4:	2200      	movs	r2, #0
 80031f6:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80031f8:	4b0c      	ldr	r3, [pc, #48]	; (800322c <MX_I2C1_Init+0x50>)
 80031fa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80031fe:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003200:	4b0a      	ldr	r3, [pc, #40]	; (800322c <MX_I2C1_Init+0x50>)
 8003202:	2200      	movs	r2, #0
 8003204:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8003206:	4b09      	ldr	r3, [pc, #36]	; (800322c <MX_I2C1_Init+0x50>)
 8003208:	2200      	movs	r2, #0
 800320a:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800320c:	4b07      	ldr	r3, [pc, #28]	; (800322c <MX_I2C1_Init+0x50>)
 800320e:	2200      	movs	r2, #0
 8003210:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003212:	4b06      	ldr	r3, [pc, #24]	; (800322c <MX_I2C1_Init+0x50>)
 8003214:	2200      	movs	r2, #0
 8003216:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003218:	4804      	ldr	r0, [pc, #16]	; (800322c <MX_I2C1_Init+0x50>)
 800321a:	f000 ffb7 	bl	800418c <HAL_I2C_Init>
 800321e:	4603      	mov	r3, r0
 8003220:	2b00      	cmp	r3, #0
 8003222:	d001      	beq.n	8003228 <MX_I2C1_Init+0x4c>
	{
		Error_Handler();
 8003224:	f000 f99c 	bl	8003560 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8003228:	bf00      	nop
 800322a:	bd80      	pop	{r7, pc}
 800322c:	20000514 	.word	0x20000514
 8003230:	40005400 	.word	0x40005400
 8003234:	00061a80 	.word	0x00061a80

08003238 <MX_SPI1_Init>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 800323c:	4b17      	ldr	r3, [pc, #92]	; (800329c <MX_SPI1_Init+0x64>)
 800323e:	4a18      	ldr	r2, [pc, #96]	; (80032a0 <MX_SPI1_Init+0x68>)
 8003240:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8003242:	4b16      	ldr	r3, [pc, #88]	; (800329c <MX_SPI1_Init+0x64>)
 8003244:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003248:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800324a:	4b14      	ldr	r3, [pc, #80]	; (800329c <MX_SPI1_Init+0x64>)
 800324c:	2200      	movs	r2, #0
 800324e:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003250:	4b12      	ldr	r3, [pc, #72]	; (800329c <MX_SPI1_Init+0x64>)
 8003252:	2200      	movs	r2, #0
 8003254:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003256:	4b11      	ldr	r3, [pc, #68]	; (800329c <MX_SPI1_Init+0x64>)
 8003258:	2200      	movs	r2, #0
 800325a:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800325c:	4b0f      	ldr	r3, [pc, #60]	; (800329c <MX_SPI1_Init+0x64>)
 800325e:	2201      	movs	r2, #1
 8003260:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8003262:	4b0e      	ldr	r3, [pc, #56]	; (800329c <MX_SPI1_Init+0x64>)
 8003264:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003268:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800326a:	4b0c      	ldr	r3, [pc, #48]	; (800329c <MX_SPI1_Init+0x64>)
 800326c:	2210      	movs	r2, #16
 800326e:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003270:	4b0a      	ldr	r3, [pc, #40]	; (800329c <MX_SPI1_Init+0x64>)
 8003272:	2200      	movs	r2, #0
 8003274:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003276:	4b09      	ldr	r3, [pc, #36]	; (800329c <MX_SPI1_Init+0x64>)
 8003278:	2200      	movs	r2, #0
 800327a:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800327c:	4b07      	ldr	r3, [pc, #28]	; (800329c <MX_SPI1_Init+0x64>)
 800327e:	2200      	movs	r2, #0
 8003280:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 8003282:	4b06      	ldr	r3, [pc, #24]	; (800329c <MX_SPI1_Init+0x64>)
 8003284:	220a      	movs	r2, #10
 8003286:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003288:	4804      	ldr	r0, [pc, #16]	; (800329c <MX_SPI1_Init+0x64>)
 800328a:	f001 fcdd 	bl	8004c48 <HAL_SPI_Init>
 800328e:	4603      	mov	r3, r0
 8003290:	2b00      	cmp	r3, #0
 8003292:	d001      	beq.n	8003298 <MX_SPI1_Init+0x60>
	{
		Error_Handler();
 8003294:	f000 f964 	bl	8003560 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8003298:	bf00      	nop
 800329a:	bd80      	pop	{r7, pc}
 800329c:	20000644 	.word	0x20000644
 80032a0:	40013000 	.word	0x40013000

080032a4 <MX_SPI2_Init>:
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI2_Init(void)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI2_Init 1 */

	/* USER CODE END SPI2_Init 1 */
	/* SPI2 parameter configuration*/
	hspi2.Instance = SPI2;
 80032a8:	4b17      	ldr	r3, [pc, #92]	; (8003308 <MX_SPI2_Init+0x64>)
 80032aa:	4a18      	ldr	r2, [pc, #96]	; (800330c <MX_SPI2_Init+0x68>)
 80032ac:	601a      	str	r2, [r3, #0]
	hspi2.Init.Mode = SPI_MODE_MASTER;
 80032ae:	4b16      	ldr	r3, [pc, #88]	; (8003308 <MX_SPI2_Init+0x64>)
 80032b0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80032b4:	605a      	str	r2, [r3, #4]
	hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80032b6:	4b14      	ldr	r3, [pc, #80]	; (8003308 <MX_SPI2_Init+0x64>)
 80032b8:	2200      	movs	r2, #0
 80032ba:	609a      	str	r2, [r3, #8]
	hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80032bc:	4b12      	ldr	r3, [pc, #72]	; (8003308 <MX_SPI2_Init+0x64>)
 80032be:	2200      	movs	r2, #0
 80032c0:	60da      	str	r2, [r3, #12]
	hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80032c2:	4b11      	ldr	r3, [pc, #68]	; (8003308 <MX_SPI2_Init+0x64>)
 80032c4:	2200      	movs	r2, #0
 80032c6:	611a      	str	r2, [r3, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80032c8:	4b0f      	ldr	r3, [pc, #60]	; (8003308 <MX_SPI2_Init+0x64>)
 80032ca:	2200      	movs	r2, #0
 80032cc:	615a      	str	r2, [r3, #20]
	hspi2.Init.NSS = SPI_NSS_SOFT;
 80032ce:	4b0e      	ldr	r3, [pc, #56]	; (8003308 <MX_SPI2_Init+0x64>)
 80032d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80032d4:	619a      	str	r2, [r3, #24]
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80032d6:	4b0c      	ldr	r3, [pc, #48]	; (8003308 <MX_SPI2_Init+0x64>)
 80032d8:	2208      	movs	r2, #8
 80032da:	61da      	str	r2, [r3, #28]
	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80032dc:	4b0a      	ldr	r3, [pc, #40]	; (8003308 <MX_SPI2_Init+0x64>)
 80032de:	2200      	movs	r2, #0
 80032e0:	621a      	str	r2, [r3, #32]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80032e2:	4b09      	ldr	r3, [pc, #36]	; (8003308 <MX_SPI2_Init+0x64>)
 80032e4:	2200      	movs	r2, #0
 80032e6:	625a      	str	r2, [r3, #36]	; 0x24
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80032e8:	4b07      	ldr	r3, [pc, #28]	; (8003308 <MX_SPI2_Init+0x64>)
 80032ea:	2200      	movs	r2, #0
 80032ec:	629a      	str	r2, [r3, #40]	; 0x28
	hspi2.Init.CRCPolynomial = 10;
 80032ee:	4b06      	ldr	r3, [pc, #24]	; (8003308 <MX_SPI2_Init+0x64>)
 80032f0:	220a      	movs	r2, #10
 80032f2:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80032f4:	4804      	ldr	r0, [pc, #16]	; (8003308 <MX_SPI2_Init+0x64>)
 80032f6:	f001 fca7 	bl	8004c48 <HAL_SPI_Init>
 80032fa:	4603      	mov	r3, r0
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d001      	beq.n	8003304 <MX_SPI2_Init+0x60>
	{
		Error_Handler();
 8003300:	f000 f92e 	bl	8003560 <Error_Handler>
	}
	/* USER CODE BEGIN SPI2_Init 2 */

	/* USER CODE END SPI2_Init 2 */

}
 8003304:	bf00      	nop
 8003306:	bd80      	pop	{r7, pc}
 8003308:	2000109c 	.word	0x2000109c
 800330c:	40003800 	.word	0x40003800

08003310 <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b086      	sub	sp, #24
 8003314:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003316:	f107 0308 	add.w	r3, r7, #8
 800331a:	2200      	movs	r2, #0
 800331c:	601a      	str	r2, [r3, #0]
 800331e:	605a      	str	r2, [r3, #4]
 8003320:	609a      	str	r2, [r3, #8]
 8003322:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003324:	463b      	mov	r3, r7
 8003326:	2200      	movs	r2, #0
 8003328:	601a      	str	r2, [r3, #0]
 800332a:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 800332c:	4b1d      	ldr	r3, [pc, #116]	; (80033a4 <MX_TIM2_Init+0x94>)
 800332e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003332:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 36-1;
 8003334:	4b1b      	ldr	r3, [pc, #108]	; (80033a4 <MX_TIM2_Init+0x94>)
 8003336:	2223      	movs	r2, #35	; 0x23
 8003338:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800333a:	4b1a      	ldr	r3, [pc, #104]	; (80033a4 <MX_TIM2_Init+0x94>)
 800333c:	2200      	movs	r2, #0
 800333e:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 65535-1;
 8003340:	4b18      	ldr	r3, [pc, #96]	; (80033a4 <MX_TIM2_Init+0x94>)
 8003342:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003346:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003348:	4b16      	ldr	r3, [pc, #88]	; (80033a4 <MX_TIM2_Init+0x94>)
 800334a:	2200      	movs	r2, #0
 800334c:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800334e:	4b15      	ldr	r3, [pc, #84]	; (80033a4 <MX_TIM2_Init+0x94>)
 8003350:	2200      	movs	r2, #0
 8003352:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003354:	4813      	ldr	r0, [pc, #76]	; (80033a4 <MX_TIM2_Init+0x94>)
 8003356:	f002 f9ef 	bl	8005738 <HAL_TIM_Base_Init>
 800335a:	4603      	mov	r3, r0
 800335c:	2b00      	cmp	r3, #0
 800335e:	d001      	beq.n	8003364 <MX_TIM2_Init+0x54>
	{
		Error_Handler();
 8003360:	f000 f8fe 	bl	8003560 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003364:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003368:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800336a:	f107 0308 	add.w	r3, r7, #8
 800336e:	4619      	mov	r1, r3
 8003370:	480c      	ldr	r0, [pc, #48]	; (80033a4 <MX_TIM2_Init+0x94>)
 8003372:	f002 fa7b 	bl	800586c <HAL_TIM_ConfigClockSource>
 8003376:	4603      	mov	r3, r0
 8003378:	2b00      	cmp	r3, #0
 800337a:	d001      	beq.n	8003380 <MX_TIM2_Init+0x70>
	{
		Error_Handler();
 800337c:	f000 f8f0 	bl	8003560 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003380:	2300      	movs	r3, #0
 8003382:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003384:	2300      	movs	r3, #0
 8003386:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003388:	463b      	mov	r3, r7
 800338a:	4619      	mov	r1, r3
 800338c:	4805      	ldr	r0, [pc, #20]	; (80033a4 <MX_TIM2_Init+0x94>)
 800338e:	f002 fc29 	bl	8005be4 <HAL_TIMEx_MasterConfigSynchronization>
 8003392:	4603      	mov	r3, r0
 8003394:	2b00      	cmp	r3, #0
 8003396:	d001      	beq.n	800339c <MX_TIM2_Init+0x8c>
	{
		Error_Handler();
 8003398:	f000 f8e2 	bl	8003560 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 800339c:	bf00      	nop
 800339e:	3718      	adds	r7, #24
 80033a0:	46bd      	mov	sp, r7
 80033a2:	bd80      	pop	{r7, pc}
 80033a4:	20001108 	.word	0x20001108

080033a8 <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 80033ac:	4b11      	ldr	r3, [pc, #68]	; (80033f4 <MX_USART1_UART_Init+0x4c>)
 80033ae:	4a12      	ldr	r2, [pc, #72]	; (80033f8 <MX_USART1_UART_Init+0x50>)
 80033b0:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 80033b2:	4b10      	ldr	r3, [pc, #64]	; (80033f4 <MX_USART1_UART_Init+0x4c>)
 80033b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80033b8:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80033ba:	4b0e      	ldr	r3, [pc, #56]	; (80033f4 <MX_USART1_UART_Init+0x4c>)
 80033bc:	2200      	movs	r2, #0
 80033be:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 80033c0:	4b0c      	ldr	r3, [pc, #48]	; (80033f4 <MX_USART1_UART_Init+0x4c>)
 80033c2:	2200      	movs	r2, #0
 80033c4:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 80033c6:	4b0b      	ldr	r3, [pc, #44]	; (80033f4 <MX_USART1_UART_Init+0x4c>)
 80033c8:	2200      	movs	r2, #0
 80033ca:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 80033cc:	4b09      	ldr	r3, [pc, #36]	; (80033f4 <MX_USART1_UART_Init+0x4c>)
 80033ce:	220c      	movs	r2, #12
 80033d0:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80033d2:	4b08      	ldr	r3, [pc, #32]	; (80033f4 <MX_USART1_UART_Init+0x4c>)
 80033d4:	2200      	movs	r2, #0
 80033d6:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80033d8:	4b06      	ldr	r3, [pc, #24]	; (80033f4 <MX_USART1_UART_Init+0x4c>)
 80033da:	2200      	movs	r2, #0
 80033dc:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK)
 80033de:	4805      	ldr	r0, [pc, #20]	; (80033f4 <MX_USART1_UART_Init+0x4c>)
 80033e0:	f002 fc5e 	bl	8005ca0 <HAL_UART_Init>
 80033e4:	4603      	mov	r3, r0
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d001      	beq.n	80033ee <MX_USART1_UART_Init+0x46>
	{
		Error_Handler();
 80033ea:	f000 f8b9 	bl	8003560 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 80033ee:	bf00      	nop
 80033f0:	bd80      	pop	{r7, pc}
 80033f2:	bf00      	nop
 80033f4:	200005c4 	.word	0x200005c4
 80033f8:	40013800 	.word	0x40013800

080033fc <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b088      	sub	sp, #32
 8003400:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003402:	f107 0310 	add.w	r3, r7, #16
 8003406:	2200      	movs	r2, #0
 8003408:	601a      	str	r2, [r3, #0]
 800340a:	605a      	str	r2, [r3, #4]
 800340c:	609a      	str	r2, [r3, #8]
 800340e:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8003410:	4b42      	ldr	r3, [pc, #264]	; (800351c <MX_GPIO_Init+0x120>)
 8003412:	699b      	ldr	r3, [r3, #24]
 8003414:	4a41      	ldr	r2, [pc, #260]	; (800351c <MX_GPIO_Init+0x120>)
 8003416:	f043 0310 	orr.w	r3, r3, #16
 800341a:	6193      	str	r3, [r2, #24]
 800341c:	4b3f      	ldr	r3, [pc, #252]	; (800351c <MX_GPIO_Init+0x120>)
 800341e:	699b      	ldr	r3, [r3, #24]
 8003420:	f003 0310 	and.w	r3, r3, #16
 8003424:	60fb      	str	r3, [r7, #12]
 8003426:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8003428:	4b3c      	ldr	r3, [pc, #240]	; (800351c <MX_GPIO_Init+0x120>)
 800342a:	699b      	ldr	r3, [r3, #24]
 800342c:	4a3b      	ldr	r2, [pc, #236]	; (800351c <MX_GPIO_Init+0x120>)
 800342e:	f043 0320 	orr.w	r3, r3, #32
 8003432:	6193      	str	r3, [r2, #24]
 8003434:	4b39      	ldr	r3, [pc, #228]	; (800351c <MX_GPIO_Init+0x120>)
 8003436:	699b      	ldr	r3, [r3, #24]
 8003438:	f003 0320 	and.w	r3, r3, #32
 800343c:	60bb      	str	r3, [r7, #8]
 800343e:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8003440:	4b36      	ldr	r3, [pc, #216]	; (800351c <MX_GPIO_Init+0x120>)
 8003442:	699b      	ldr	r3, [r3, #24]
 8003444:	4a35      	ldr	r2, [pc, #212]	; (800351c <MX_GPIO_Init+0x120>)
 8003446:	f043 0304 	orr.w	r3, r3, #4
 800344a:	6193      	str	r3, [r2, #24]
 800344c:	4b33      	ldr	r3, [pc, #204]	; (800351c <MX_GPIO_Init+0x120>)
 800344e:	699b      	ldr	r3, [r3, #24]
 8003450:	f003 0304 	and.w	r3, r3, #4
 8003454:	607b      	str	r3, [r7, #4]
 8003456:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8003458:	4b30      	ldr	r3, [pc, #192]	; (800351c <MX_GPIO_Init+0x120>)
 800345a:	699b      	ldr	r3, [r3, #24]
 800345c:	4a2f      	ldr	r2, [pc, #188]	; (800351c <MX_GPIO_Init+0x120>)
 800345e:	f043 0308 	orr.w	r3, r3, #8
 8003462:	6193      	str	r3, [r2, #24]
 8003464:	4b2d      	ldr	r3, [pc, #180]	; (800351c <MX_GPIO_Init+0x120>)
 8003466:	699b      	ldr	r3, [r3, #24]
 8003468:	f003 0308 	and.w	r3, r3, #8
 800346c:	603b      	str	r3, [r7, #0]
 800346e:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 8003470:	2200      	movs	r2, #0
 8003472:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8003476:	482a      	ldr	r0, [pc, #168]	; (8003520 <MX_GPIO_Init+0x124>)
 8003478:	f000 fe58 	bl	800412c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, SPI1_NCS_Pin|SPI2_NCS_Pin, GPIO_PIN_RESET);
 800347c:	2200      	movs	r2, #0
 800347e:	f44f 7188 	mov.w	r1, #272	; 0x110
 8003482:	4828      	ldr	r0, [pc, #160]	; (8003524 <MX_GPIO_Init+0x128>)
 8003484:	f000 fe52 	bl	800412c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, SPI1_SYNC_Pin|SPI1_RST_Pin, GPIO_PIN_RESET);
 8003488:	2200      	movs	r2, #0
 800348a:	2106      	movs	r1, #6
 800348c:	4826      	ldr	r0, [pc, #152]	; (8003528 <MX_GPIO_Init+0x12c>)
 800348e:	f000 fe4d 	bl	800412c <HAL_GPIO_WritePin>

	/*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin */
	GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 8003492:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8003496:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003498:	2301      	movs	r3, #1
 800349a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800349c:	2300      	movs	r3, #0
 800349e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034a0:	2302      	movs	r3, #2
 80034a2:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80034a4:	f107 0310 	add.w	r3, r7, #16
 80034a8:	4619      	mov	r1, r3
 80034aa:	481d      	ldr	r0, [pc, #116]	; (8003520 <MX_GPIO_Init+0x124>)
 80034ac:	f000 fcba 	bl	8003e24 <HAL_GPIO_Init>

	/*Configure GPIO pins : SPI1_NCS_Pin SPI2_NCS_Pin */
	GPIO_InitStruct.Pin = SPI1_NCS_Pin|SPI2_NCS_Pin;
 80034b0:	f44f 7388 	mov.w	r3, #272	; 0x110
 80034b4:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80034b6:	2301      	movs	r3, #1
 80034b8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034ba:	2300      	movs	r3, #0
 80034bc:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034be:	2302      	movs	r3, #2
 80034c0:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034c2:	f107 0310 	add.w	r3, r7, #16
 80034c6:	4619      	mov	r1, r3
 80034c8:	4816      	ldr	r0, [pc, #88]	; (8003524 <MX_GPIO_Init+0x128>)
 80034ca:	f000 fcab 	bl	8003e24 <HAL_GPIO_Init>

	/*Configure GPIO pin : SPI1_RDY_Pin */
	GPIO_InitStruct.Pin = SPI1_RDY_Pin;
 80034ce:	2301      	movs	r3, #1
 80034d0:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80034d2:	4b16      	ldr	r3, [pc, #88]	; (800352c <MX_GPIO_Init+0x130>)
 80034d4:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034d6:	2300      	movs	r3, #0
 80034d8:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(SPI1_RDY_GPIO_Port, &GPIO_InitStruct);
 80034da:	f107 0310 	add.w	r3, r7, #16
 80034de:	4619      	mov	r1, r3
 80034e0:	4811      	ldr	r0, [pc, #68]	; (8003528 <MX_GPIO_Init+0x12c>)
 80034e2:	f000 fc9f 	bl	8003e24 <HAL_GPIO_Init>

	/*Configure GPIO pins : SPI1_SYNC_Pin SPI1_RST_Pin */
	GPIO_InitStruct.Pin = SPI1_SYNC_Pin|SPI1_RST_Pin;
 80034e6:	2306      	movs	r3, #6
 80034e8:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80034ea:	2301      	movs	r3, #1
 80034ec:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034ee:	2300      	movs	r3, #0
 80034f0:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034f2:	2302      	movs	r3, #2
 80034f4:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034f6:	f107 0310 	add.w	r3, r7, #16
 80034fa:	4619      	mov	r1, r3
 80034fc:	480a      	ldr	r0, [pc, #40]	; (8003528 <MX_GPIO_Init+0x12c>)
 80034fe:	f000 fc91 	bl	8003e24 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8003502:	2200      	movs	r2, #0
 8003504:	2100      	movs	r1, #0
 8003506:	2006      	movs	r0, #6
 8003508:	f000 fc55 	bl	8003db6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800350c:	2006      	movs	r0, #6
 800350e:	f000 fc6e 	bl	8003dee <HAL_NVIC_EnableIRQ>

}
 8003512:	bf00      	nop
 8003514:	3720      	adds	r7, #32
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}
 800351a:	bf00      	nop
 800351c:	40021000 	.word	0x40021000
 8003520:	40011000 	.word	0x40011000
 8003524:	40010800 	.word	0x40010800
 8003528:	40010c00 	.word	0x40010c00
 800352c:	10210000 	.word	0x10210000

08003530 <delayMicroseconds>:

/* USER CODE BEGIN 4 */
void delayMicroseconds(uint16_t us) {
 8003530:	b480      	push	{r7}
 8003532:	b083      	sub	sp, #12
 8003534:	af00      	add	r7, sp, #0
 8003536:	4603      	mov	r3, r0
 8003538:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim2, 0);  // set the counter value a 0
 800353a:	4b08      	ldr	r3, [pc, #32]	; (800355c <delayMicroseconds+0x2c>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	2200      	movs	r2, #0
 8003540:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim2) < us)
 8003542:	bf00      	nop
 8003544:	4b05      	ldr	r3, [pc, #20]	; (800355c <delayMicroseconds+0x2c>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800354a:	88fb      	ldrh	r3, [r7, #6]
 800354c:	429a      	cmp	r2, r3
 800354e:	d3f9      	bcc.n	8003544 <delayMicroseconds+0x14>
		;  // wait for the counter to reach the us input in the parameter
}
 8003550:	bf00      	nop
 8003552:	bf00      	nop
 8003554:	370c      	adds	r7, #12
 8003556:	46bd      	mov	sp, r7
 8003558:	bc80      	pop	{r7}
 800355a:	4770      	bx	lr
 800355c:	20001108 	.word	0x20001108

08003560 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8003560:	b480      	push	{r7}
 8003562:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003564:	b672      	cpsid	i
}
 8003566:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8003568:	e7fe      	b.n	8003568 <Error_Handler+0x8>
	...

0800356c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800356c:	b480      	push	{r7}
 800356e:	b085      	sub	sp, #20
 8003570:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003572:	4b15      	ldr	r3, [pc, #84]	; (80035c8 <HAL_MspInit+0x5c>)
 8003574:	699b      	ldr	r3, [r3, #24]
 8003576:	4a14      	ldr	r2, [pc, #80]	; (80035c8 <HAL_MspInit+0x5c>)
 8003578:	f043 0301 	orr.w	r3, r3, #1
 800357c:	6193      	str	r3, [r2, #24]
 800357e:	4b12      	ldr	r3, [pc, #72]	; (80035c8 <HAL_MspInit+0x5c>)
 8003580:	699b      	ldr	r3, [r3, #24]
 8003582:	f003 0301 	and.w	r3, r3, #1
 8003586:	60bb      	str	r3, [r7, #8]
 8003588:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800358a:	4b0f      	ldr	r3, [pc, #60]	; (80035c8 <HAL_MspInit+0x5c>)
 800358c:	69db      	ldr	r3, [r3, #28]
 800358e:	4a0e      	ldr	r2, [pc, #56]	; (80035c8 <HAL_MspInit+0x5c>)
 8003590:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003594:	61d3      	str	r3, [r2, #28]
 8003596:	4b0c      	ldr	r3, [pc, #48]	; (80035c8 <HAL_MspInit+0x5c>)
 8003598:	69db      	ldr	r3, [r3, #28]
 800359a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800359e:	607b      	str	r3, [r7, #4]
 80035a0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80035a2:	4b0a      	ldr	r3, [pc, #40]	; (80035cc <HAL_MspInit+0x60>)
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	60fb      	str	r3, [r7, #12]
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80035ae:	60fb      	str	r3, [r7, #12]
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80035b6:	60fb      	str	r3, [r7, #12]
 80035b8:	4a04      	ldr	r2, [pc, #16]	; (80035cc <HAL_MspInit+0x60>)
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80035be:	bf00      	nop
 80035c0:	3714      	adds	r7, #20
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bc80      	pop	{r7}
 80035c6:	4770      	bx	lr
 80035c8:	40021000 	.word	0x40021000
 80035cc:	40010000 	.word	0x40010000

080035d0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b088      	sub	sp, #32
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035d8:	f107 0310 	add.w	r3, r7, #16
 80035dc:	2200      	movs	r2, #0
 80035de:	601a      	str	r2, [r3, #0]
 80035e0:	605a      	str	r2, [r3, #4]
 80035e2:	609a      	str	r2, [r3, #8]
 80035e4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a15      	ldr	r2, [pc, #84]	; (8003640 <HAL_I2C_MspInit+0x70>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d123      	bne.n	8003638 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80035f0:	4b14      	ldr	r3, [pc, #80]	; (8003644 <HAL_I2C_MspInit+0x74>)
 80035f2:	699b      	ldr	r3, [r3, #24]
 80035f4:	4a13      	ldr	r2, [pc, #76]	; (8003644 <HAL_I2C_MspInit+0x74>)
 80035f6:	f043 0308 	orr.w	r3, r3, #8
 80035fa:	6193      	str	r3, [r2, #24]
 80035fc:	4b11      	ldr	r3, [pc, #68]	; (8003644 <HAL_I2C_MspInit+0x74>)
 80035fe:	699b      	ldr	r3, [r3, #24]
 8003600:	f003 0308 	and.w	r3, r3, #8
 8003604:	60fb      	str	r3, [r7, #12]
 8003606:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003608:	23c0      	movs	r3, #192	; 0xc0
 800360a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800360c:	2312      	movs	r3, #18
 800360e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003610:	2303      	movs	r3, #3
 8003612:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003614:	f107 0310 	add.w	r3, r7, #16
 8003618:	4619      	mov	r1, r3
 800361a:	480b      	ldr	r0, [pc, #44]	; (8003648 <HAL_I2C_MspInit+0x78>)
 800361c:	f000 fc02 	bl	8003e24 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003620:	4b08      	ldr	r3, [pc, #32]	; (8003644 <HAL_I2C_MspInit+0x74>)
 8003622:	69db      	ldr	r3, [r3, #28]
 8003624:	4a07      	ldr	r2, [pc, #28]	; (8003644 <HAL_I2C_MspInit+0x74>)
 8003626:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800362a:	61d3      	str	r3, [r2, #28]
 800362c:	4b05      	ldr	r3, [pc, #20]	; (8003644 <HAL_I2C_MspInit+0x74>)
 800362e:	69db      	ldr	r3, [r3, #28]
 8003630:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003634:	60bb      	str	r3, [r7, #8]
 8003636:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003638:	bf00      	nop
 800363a:	3720      	adds	r7, #32
 800363c:	46bd      	mov	sp, r7
 800363e:	bd80      	pop	{r7, pc}
 8003640:	40005400 	.word	0x40005400
 8003644:	40021000 	.word	0x40021000
 8003648:	40010c00 	.word	0x40010c00

0800364c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b08a      	sub	sp, #40	; 0x28
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003654:	f107 0318 	add.w	r3, r7, #24
 8003658:	2200      	movs	r2, #0
 800365a:	601a      	str	r2, [r3, #0]
 800365c:	605a      	str	r2, [r3, #4]
 800365e:	609a      	str	r2, [r3, #8]
 8003660:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4a37      	ldr	r2, [pc, #220]	; (8003744 <HAL_SPI_MspInit+0xf8>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d130      	bne.n	80036ce <HAL_SPI_MspInit+0x82>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800366c:	4b36      	ldr	r3, [pc, #216]	; (8003748 <HAL_SPI_MspInit+0xfc>)
 800366e:	699b      	ldr	r3, [r3, #24]
 8003670:	4a35      	ldr	r2, [pc, #212]	; (8003748 <HAL_SPI_MspInit+0xfc>)
 8003672:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003676:	6193      	str	r3, [r2, #24]
 8003678:	4b33      	ldr	r3, [pc, #204]	; (8003748 <HAL_SPI_MspInit+0xfc>)
 800367a:	699b      	ldr	r3, [r3, #24]
 800367c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003680:	617b      	str	r3, [r7, #20]
 8003682:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003684:	4b30      	ldr	r3, [pc, #192]	; (8003748 <HAL_SPI_MspInit+0xfc>)
 8003686:	699b      	ldr	r3, [r3, #24]
 8003688:	4a2f      	ldr	r2, [pc, #188]	; (8003748 <HAL_SPI_MspInit+0xfc>)
 800368a:	f043 0304 	orr.w	r3, r3, #4
 800368e:	6193      	str	r3, [r2, #24]
 8003690:	4b2d      	ldr	r3, [pc, #180]	; (8003748 <HAL_SPI_MspInit+0xfc>)
 8003692:	699b      	ldr	r3, [r3, #24]
 8003694:	f003 0304 	and.w	r3, r3, #4
 8003698:	613b      	str	r3, [r7, #16]
 800369a:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800369c:	23a0      	movs	r3, #160	; 0xa0
 800369e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036a0:	2302      	movs	r3, #2
 80036a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80036a4:	2303      	movs	r3, #3
 80036a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036a8:	f107 0318 	add.w	r3, r7, #24
 80036ac:	4619      	mov	r1, r3
 80036ae:	4827      	ldr	r0, [pc, #156]	; (800374c <HAL_SPI_MspInit+0x100>)
 80036b0:	f000 fbb8 	bl	8003e24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80036b4:	2340      	movs	r3, #64	; 0x40
 80036b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80036b8:	2300      	movs	r3, #0
 80036ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036bc:	2300      	movs	r3, #0
 80036be:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036c0:	f107 0318 	add.w	r3, r7, #24
 80036c4:	4619      	mov	r1, r3
 80036c6:	4821      	ldr	r0, [pc, #132]	; (800374c <HAL_SPI_MspInit+0x100>)
 80036c8:	f000 fbac 	bl	8003e24 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80036cc:	e036      	b.n	800373c <HAL_SPI_MspInit+0xf0>
  else if(hspi->Instance==SPI2)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4a1f      	ldr	r2, [pc, #124]	; (8003750 <HAL_SPI_MspInit+0x104>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d131      	bne.n	800373c <HAL_SPI_MspInit+0xf0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80036d8:	4b1b      	ldr	r3, [pc, #108]	; (8003748 <HAL_SPI_MspInit+0xfc>)
 80036da:	69db      	ldr	r3, [r3, #28]
 80036dc:	4a1a      	ldr	r2, [pc, #104]	; (8003748 <HAL_SPI_MspInit+0xfc>)
 80036de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80036e2:	61d3      	str	r3, [r2, #28]
 80036e4:	4b18      	ldr	r3, [pc, #96]	; (8003748 <HAL_SPI_MspInit+0xfc>)
 80036e6:	69db      	ldr	r3, [r3, #28]
 80036e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036ec:	60fb      	str	r3, [r7, #12]
 80036ee:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80036f0:	4b15      	ldr	r3, [pc, #84]	; (8003748 <HAL_SPI_MspInit+0xfc>)
 80036f2:	699b      	ldr	r3, [r3, #24]
 80036f4:	4a14      	ldr	r2, [pc, #80]	; (8003748 <HAL_SPI_MspInit+0xfc>)
 80036f6:	f043 0308 	orr.w	r3, r3, #8
 80036fa:	6193      	str	r3, [r2, #24]
 80036fc:	4b12      	ldr	r3, [pc, #72]	; (8003748 <HAL_SPI_MspInit+0xfc>)
 80036fe:	699b      	ldr	r3, [r3, #24]
 8003700:	f003 0308 	and.w	r3, r3, #8
 8003704:	60bb      	str	r3, [r7, #8]
 8003706:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8003708:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 800370c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800370e:	2302      	movs	r3, #2
 8003710:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003712:	2303      	movs	r3, #3
 8003714:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003716:	f107 0318 	add.w	r3, r7, #24
 800371a:	4619      	mov	r1, r3
 800371c:	480d      	ldr	r0, [pc, #52]	; (8003754 <HAL_SPI_MspInit+0x108>)
 800371e:	f000 fb81 	bl	8003e24 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8003722:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003726:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003728:	2300      	movs	r3, #0
 800372a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800372c:	2300      	movs	r3, #0
 800372e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003730:	f107 0318 	add.w	r3, r7, #24
 8003734:	4619      	mov	r1, r3
 8003736:	4807      	ldr	r0, [pc, #28]	; (8003754 <HAL_SPI_MspInit+0x108>)
 8003738:	f000 fb74 	bl	8003e24 <HAL_GPIO_Init>
}
 800373c:	bf00      	nop
 800373e:	3728      	adds	r7, #40	; 0x28
 8003740:	46bd      	mov	sp, r7
 8003742:	bd80      	pop	{r7, pc}
 8003744:	40013000 	.word	0x40013000
 8003748:	40021000 	.word	0x40021000
 800374c:	40010800 	.word	0x40010800
 8003750:	40003800 	.word	0x40003800
 8003754:	40010c00 	.word	0x40010c00

08003758 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003758:	b480      	push	{r7}
 800375a:	b085      	sub	sp, #20
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003768:	d10b      	bne.n	8003782 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800376a:	4b08      	ldr	r3, [pc, #32]	; (800378c <HAL_TIM_Base_MspInit+0x34>)
 800376c:	69db      	ldr	r3, [r3, #28]
 800376e:	4a07      	ldr	r2, [pc, #28]	; (800378c <HAL_TIM_Base_MspInit+0x34>)
 8003770:	f043 0301 	orr.w	r3, r3, #1
 8003774:	61d3      	str	r3, [r2, #28]
 8003776:	4b05      	ldr	r3, [pc, #20]	; (800378c <HAL_TIM_Base_MspInit+0x34>)
 8003778:	69db      	ldr	r3, [r3, #28]
 800377a:	f003 0301 	and.w	r3, r3, #1
 800377e:	60fb      	str	r3, [r7, #12]
 8003780:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8003782:	bf00      	nop
 8003784:	3714      	adds	r7, #20
 8003786:	46bd      	mov	sp, r7
 8003788:	bc80      	pop	{r7}
 800378a:	4770      	bx	lr
 800378c:	40021000 	.word	0x40021000

08003790 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b088      	sub	sp, #32
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003798:	f107 0310 	add.w	r3, r7, #16
 800379c:	2200      	movs	r2, #0
 800379e:	601a      	str	r2, [r3, #0]
 80037a0:	605a      	str	r2, [r3, #4]
 80037a2:	609a      	str	r2, [r3, #8]
 80037a4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a20      	ldr	r2, [pc, #128]	; (800382c <HAL_UART_MspInit+0x9c>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d139      	bne.n	8003824 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80037b0:	4b1f      	ldr	r3, [pc, #124]	; (8003830 <HAL_UART_MspInit+0xa0>)
 80037b2:	699b      	ldr	r3, [r3, #24]
 80037b4:	4a1e      	ldr	r2, [pc, #120]	; (8003830 <HAL_UART_MspInit+0xa0>)
 80037b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80037ba:	6193      	str	r3, [r2, #24]
 80037bc:	4b1c      	ldr	r3, [pc, #112]	; (8003830 <HAL_UART_MspInit+0xa0>)
 80037be:	699b      	ldr	r3, [r3, #24]
 80037c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037c4:	60fb      	str	r3, [r7, #12]
 80037c6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037c8:	4b19      	ldr	r3, [pc, #100]	; (8003830 <HAL_UART_MspInit+0xa0>)
 80037ca:	699b      	ldr	r3, [r3, #24]
 80037cc:	4a18      	ldr	r2, [pc, #96]	; (8003830 <HAL_UART_MspInit+0xa0>)
 80037ce:	f043 0304 	orr.w	r3, r3, #4
 80037d2:	6193      	str	r3, [r2, #24]
 80037d4:	4b16      	ldr	r3, [pc, #88]	; (8003830 <HAL_UART_MspInit+0xa0>)
 80037d6:	699b      	ldr	r3, [r3, #24]
 80037d8:	f003 0304 	and.w	r3, r3, #4
 80037dc:	60bb      	str	r3, [r7, #8]
 80037de:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80037e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80037e4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037e6:	2302      	movs	r3, #2
 80037e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80037ea:	2303      	movs	r3, #3
 80037ec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037ee:	f107 0310 	add.w	r3, r7, #16
 80037f2:	4619      	mov	r1, r3
 80037f4:	480f      	ldr	r0, [pc, #60]	; (8003834 <HAL_UART_MspInit+0xa4>)
 80037f6:	f000 fb15 	bl	8003e24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80037fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80037fe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003800:	2300      	movs	r3, #0
 8003802:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003804:	2300      	movs	r3, #0
 8003806:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003808:	f107 0310 	add.w	r3, r7, #16
 800380c:	4619      	mov	r1, r3
 800380e:	4809      	ldr	r0, [pc, #36]	; (8003834 <HAL_UART_MspInit+0xa4>)
 8003810:	f000 fb08 	bl	8003e24 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003814:	2200      	movs	r2, #0
 8003816:	2100      	movs	r1, #0
 8003818:	2025      	movs	r0, #37	; 0x25
 800381a:	f000 facc 	bl	8003db6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800381e:	2025      	movs	r0, #37	; 0x25
 8003820:	f000 fae5 	bl	8003dee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003824:	bf00      	nop
 8003826:	3720      	adds	r7, #32
 8003828:	46bd      	mov	sp, r7
 800382a:	bd80      	pop	{r7, pc}
 800382c:	40013800 	.word	0x40013800
 8003830:	40021000 	.word	0x40021000
 8003834:	40010800 	.word	0x40010800

08003838 <SDTimer_Handler>:
volatile uint8_t FatFsCnt = 0;
volatile uint32_t UptimeMillis;
volatile uint8_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 8003838:	b480      	push	{r7}
 800383a:	af00      	add	r7, sp, #0
	if (Timer1 > 0)
 800383c:	4b0d      	ldr	r3, [pc, #52]	; (8003874 <SDTimer_Handler+0x3c>)
 800383e:	781b      	ldrb	r3, [r3, #0]
 8003840:	b2db      	uxtb	r3, r3
 8003842:	2b00      	cmp	r3, #0
 8003844:	d006      	beq.n	8003854 <SDTimer_Handler+0x1c>
		Timer1--;
 8003846:	4b0b      	ldr	r3, [pc, #44]	; (8003874 <SDTimer_Handler+0x3c>)
 8003848:	781b      	ldrb	r3, [r3, #0]
 800384a:	b2db      	uxtb	r3, r3
 800384c:	3b01      	subs	r3, #1
 800384e:	b2da      	uxtb	r2, r3
 8003850:	4b08      	ldr	r3, [pc, #32]	; (8003874 <SDTimer_Handler+0x3c>)
 8003852:	701a      	strb	r2, [r3, #0]

	if (Timer2 > 0)
 8003854:	4b08      	ldr	r3, [pc, #32]	; (8003878 <SDTimer_Handler+0x40>)
 8003856:	781b      	ldrb	r3, [r3, #0]
 8003858:	b2db      	uxtb	r3, r3
 800385a:	2b00      	cmp	r3, #0
 800385c:	d006      	beq.n	800386c <SDTimer_Handler+0x34>
		Timer2--;
 800385e:	4b06      	ldr	r3, [pc, #24]	; (8003878 <SDTimer_Handler+0x40>)
 8003860:	781b      	ldrb	r3, [r3, #0]
 8003862:	b2db      	uxtb	r3, r3
 8003864:	3b01      	subs	r3, #1
 8003866:	b2da      	uxtb	r2, r3
 8003868:	4b03      	ldr	r3, [pc, #12]	; (8003878 <SDTimer_Handler+0x40>)
 800386a:	701a      	strb	r2, [r3, #0]
}
 800386c:	bf00      	nop
 800386e:	46bd      	mov	sp, r7
 8003870:	bc80      	pop	{r7}
 8003872:	4770      	bx	lr
 8003874:	20001161 	.word	0x20001161
 8003878:	20001160 	.word	0x20001160

0800387c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800387c:	b480      	push	{r7}
 800387e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003880:	e7fe      	b.n	8003880 <NMI_Handler+0x4>

08003882 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003882:	b480      	push	{r7}
 8003884:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003886:	e7fe      	b.n	8003886 <HardFault_Handler+0x4>

08003888 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003888:	b480      	push	{r7}
 800388a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800388c:	e7fe      	b.n	800388c <MemManage_Handler+0x4>

0800388e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800388e:	b480      	push	{r7}
 8003890:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003892:	e7fe      	b.n	8003892 <BusFault_Handler+0x4>

08003894 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003894:	b480      	push	{r7}
 8003896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003898:	e7fe      	b.n	8003898 <UsageFault_Handler+0x4>

0800389a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800389a:	b480      	push	{r7}
 800389c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800389e:	bf00      	nop
 80038a0:	46bd      	mov	sp, r7
 80038a2:	bc80      	pop	{r7}
 80038a4:	4770      	bx	lr

080038a6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80038a6:	b480      	push	{r7}
 80038a8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80038aa:	bf00      	nop
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bc80      	pop	{r7}
 80038b0:	4770      	bx	lr

080038b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80038b2:	b480      	push	{r7}
 80038b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80038b6:	bf00      	nop
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bc80      	pop	{r7}
 80038bc:	4770      	bx	lr
	...

080038c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	af00      	add	r7, sp, #0
	UptimeMillis++;
 80038c4:	4b0c      	ldr	r3, [pc, #48]	; (80038f8 <SysTick_Handler+0x38>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	3301      	adds	r3, #1
 80038ca:	4a0b      	ldr	r2, [pc, #44]	; (80038f8 <SysTick_Handler+0x38>)
 80038cc:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN SysTick_IRQn 0 */
	FatFsCnt++;
 80038ce:	4b0b      	ldr	r3, [pc, #44]	; (80038fc <SysTick_Handler+0x3c>)
 80038d0:	781b      	ldrb	r3, [r3, #0]
 80038d2:	b2db      	uxtb	r3, r3
 80038d4:	3301      	adds	r3, #1
 80038d6:	b2da      	uxtb	r2, r3
 80038d8:	4b08      	ldr	r3, [pc, #32]	; (80038fc <SysTick_Handler+0x3c>)
 80038da:	701a      	strb	r2, [r3, #0]
	if (FatFsCnt >= 10)
 80038dc:	4b07      	ldr	r3, [pc, #28]	; (80038fc <SysTick_Handler+0x3c>)
 80038de:	781b      	ldrb	r3, [r3, #0]
 80038e0:	b2db      	uxtb	r3, r3
 80038e2:	2b09      	cmp	r3, #9
 80038e4:	d904      	bls.n	80038f0 <SysTick_Handler+0x30>
	{
		FatFsCnt = 0;
 80038e6:	4b05      	ldr	r3, [pc, #20]	; (80038fc <SysTick_Handler+0x3c>)
 80038e8:	2200      	movs	r2, #0
 80038ea:	701a      	strb	r2, [r3, #0]
		SDTimer_Handler();
 80038ec:	f7ff ffa4 	bl	8003838 <SDTimer_Handler>
	}
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80038f0:	f000 f94a 	bl	8003b88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80038f4:	bf00      	nop
 80038f6:	bd80      	pop	{r7, pc}
 80038f8:	2000115c 	.word	0x2000115c
 80038fc:	200002bd 	.word	0x200002bd

08003900 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8003904:	2001      	movs	r0, #1
 8003906:	f000 fc29 	bl	800415c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800390a:	bf00      	nop
 800390c:	bd80      	pop	{r7, pc}
	...

08003910 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	Uart_isr(&huart1);
 8003914:	4802      	ldr	r0, [pc, #8]	; (8003920 <USART1_IRQHandler+0x10>)
 8003916:	f7fd fa1b 	bl	8000d50 <Uart_isr>
  /* USER CODE END USART1_IRQn 0 */
  //HAL_UART_IRQHandler(&huart1);
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800391a:	bf00      	nop
 800391c:	bd80      	pop	{r7, pc}
 800391e:	bf00      	nop
 8003920:	200005c4 	.word	0x200005c4

08003924 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003924:	b480      	push	{r7}
 8003926:	af00      	add	r7, sp, #0
	return 1;
 8003928:	2301      	movs	r3, #1
}
 800392a:	4618      	mov	r0, r3
 800392c:	46bd      	mov	sp, r7
 800392e:	bc80      	pop	{r7}
 8003930:	4770      	bx	lr

08003932 <_kill>:

int _kill(int pid, int sig)
{
 8003932:	b580      	push	{r7, lr}
 8003934:	b082      	sub	sp, #8
 8003936:	af00      	add	r7, sp, #0
 8003938:	6078      	str	r0, [r7, #4]
 800393a:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800393c:	f006 fd6c 	bl	800a418 <__errno>
 8003940:	4603      	mov	r3, r0
 8003942:	2216      	movs	r2, #22
 8003944:	601a      	str	r2, [r3, #0]
	return -1;
 8003946:	f04f 33ff 	mov.w	r3, #4294967295
}
 800394a:	4618      	mov	r0, r3
 800394c:	3708      	adds	r7, #8
 800394e:	46bd      	mov	sp, r7
 8003950:	bd80      	pop	{r7, pc}

08003952 <_exit>:

void _exit (int status)
{
 8003952:	b580      	push	{r7, lr}
 8003954:	b082      	sub	sp, #8
 8003956:	af00      	add	r7, sp, #0
 8003958:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800395a:	f04f 31ff 	mov.w	r1, #4294967295
 800395e:	6878      	ldr	r0, [r7, #4]
 8003960:	f7ff ffe7 	bl	8003932 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003964:	e7fe      	b.n	8003964 <_exit+0x12>

08003966 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003966:	b580      	push	{r7, lr}
 8003968:	b086      	sub	sp, #24
 800396a:	af00      	add	r7, sp, #0
 800396c:	60f8      	str	r0, [r7, #12]
 800396e:	60b9      	str	r1, [r7, #8]
 8003970:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003972:	2300      	movs	r3, #0
 8003974:	617b      	str	r3, [r7, #20]
 8003976:	e00a      	b.n	800398e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003978:	f3af 8000 	nop.w
 800397c:	4601      	mov	r1, r0
 800397e:	68bb      	ldr	r3, [r7, #8]
 8003980:	1c5a      	adds	r2, r3, #1
 8003982:	60ba      	str	r2, [r7, #8]
 8003984:	b2ca      	uxtb	r2, r1
 8003986:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003988:	697b      	ldr	r3, [r7, #20]
 800398a:	3301      	adds	r3, #1
 800398c:	617b      	str	r3, [r7, #20]
 800398e:	697a      	ldr	r2, [r7, #20]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	429a      	cmp	r2, r3
 8003994:	dbf0      	blt.n	8003978 <_read+0x12>
	}

return len;
 8003996:	687b      	ldr	r3, [r7, #4]
}
 8003998:	4618      	mov	r0, r3
 800399a:	3718      	adds	r7, #24
 800399c:	46bd      	mov	sp, r7
 800399e:	bd80      	pop	{r7, pc}

080039a0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b086      	sub	sp, #24
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	60f8      	str	r0, [r7, #12]
 80039a8:	60b9      	str	r1, [r7, #8]
 80039aa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80039ac:	2300      	movs	r3, #0
 80039ae:	617b      	str	r3, [r7, #20]
 80039b0:	e009      	b.n	80039c6 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80039b2:	68bb      	ldr	r3, [r7, #8]
 80039b4:	1c5a      	adds	r2, r3, #1
 80039b6:	60ba      	str	r2, [r7, #8]
 80039b8:	781b      	ldrb	r3, [r3, #0]
 80039ba:	4618      	mov	r0, r3
 80039bc:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80039c0:	697b      	ldr	r3, [r7, #20]
 80039c2:	3301      	adds	r3, #1
 80039c4:	617b      	str	r3, [r7, #20]
 80039c6:	697a      	ldr	r2, [r7, #20]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	429a      	cmp	r2, r3
 80039cc:	dbf1      	blt.n	80039b2 <_write+0x12>
	}
	return len;
 80039ce:	687b      	ldr	r3, [r7, #4]
}
 80039d0:	4618      	mov	r0, r3
 80039d2:	3718      	adds	r7, #24
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bd80      	pop	{r7, pc}

080039d8 <_close>:

int _close(int file)
{
 80039d8:	b480      	push	{r7}
 80039da:	b083      	sub	sp, #12
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
	return -1;
 80039e0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	370c      	adds	r7, #12
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bc80      	pop	{r7}
 80039ec:	4770      	bx	lr

080039ee <_fstat>:


int _fstat(int file, struct stat *st)
{
 80039ee:	b480      	push	{r7}
 80039f0:	b083      	sub	sp, #12
 80039f2:	af00      	add	r7, sp, #0
 80039f4:	6078      	str	r0, [r7, #4]
 80039f6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80039fe:	605a      	str	r2, [r3, #4]
	return 0;
 8003a00:	2300      	movs	r3, #0
}
 8003a02:	4618      	mov	r0, r3
 8003a04:	370c      	adds	r7, #12
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bc80      	pop	{r7}
 8003a0a:	4770      	bx	lr

08003a0c <_isatty>:

int _isatty(int file)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b083      	sub	sp, #12
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
	return 1;
 8003a14:	2301      	movs	r3, #1
}
 8003a16:	4618      	mov	r0, r3
 8003a18:	370c      	adds	r7, #12
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bc80      	pop	{r7}
 8003a1e:	4770      	bx	lr

08003a20 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003a20:	b480      	push	{r7}
 8003a22:	b085      	sub	sp, #20
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	60f8      	str	r0, [r7, #12]
 8003a28:	60b9      	str	r1, [r7, #8]
 8003a2a:	607a      	str	r2, [r7, #4]
	return 0;
 8003a2c:	2300      	movs	r3, #0
}
 8003a2e:	4618      	mov	r0, r3
 8003a30:	3714      	adds	r7, #20
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bc80      	pop	{r7}
 8003a36:	4770      	bx	lr

08003a38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b086      	sub	sp, #24
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003a40:	4a14      	ldr	r2, [pc, #80]	; (8003a94 <_sbrk+0x5c>)
 8003a42:	4b15      	ldr	r3, [pc, #84]	; (8003a98 <_sbrk+0x60>)
 8003a44:	1ad3      	subs	r3, r2, r3
 8003a46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003a4c:	4b13      	ldr	r3, [pc, #76]	; (8003a9c <_sbrk+0x64>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d102      	bne.n	8003a5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003a54:	4b11      	ldr	r3, [pc, #68]	; (8003a9c <_sbrk+0x64>)
 8003a56:	4a12      	ldr	r2, [pc, #72]	; (8003aa0 <_sbrk+0x68>)
 8003a58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003a5a:	4b10      	ldr	r3, [pc, #64]	; (8003a9c <_sbrk+0x64>)
 8003a5c:	681a      	ldr	r2, [r3, #0]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	4413      	add	r3, r2
 8003a62:	693a      	ldr	r2, [r7, #16]
 8003a64:	429a      	cmp	r2, r3
 8003a66:	d207      	bcs.n	8003a78 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003a68:	f006 fcd6 	bl	800a418 <__errno>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	220c      	movs	r2, #12
 8003a70:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003a72:	f04f 33ff 	mov.w	r3, #4294967295
 8003a76:	e009      	b.n	8003a8c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003a78:	4b08      	ldr	r3, [pc, #32]	; (8003a9c <_sbrk+0x64>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003a7e:	4b07      	ldr	r3, [pc, #28]	; (8003a9c <_sbrk+0x64>)
 8003a80:	681a      	ldr	r2, [r3, #0]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	4413      	add	r3, r2
 8003a86:	4a05      	ldr	r2, [pc, #20]	; (8003a9c <_sbrk+0x64>)
 8003a88:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
}
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	3718      	adds	r7, #24
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bd80      	pop	{r7, pc}
 8003a94:	20005000 	.word	0x20005000
 8003a98:	00000400 	.word	0x00000400
 8003a9c:	200002c0 	.word	0x200002c0
 8003aa0:	200019e0 	.word	0x200019e0

08003aa4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003aa8:	bf00      	nop
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bc80      	pop	{r7}
 8003aae:	4770      	bx	lr

08003ab0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8003ab0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8003ab2:	e003      	b.n	8003abc <LoopCopyDataInit>

08003ab4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8003ab4:	4b0b      	ldr	r3, [pc, #44]	; (8003ae4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8003ab6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8003ab8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8003aba:	3104      	adds	r1, #4

08003abc <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8003abc:	480a      	ldr	r0, [pc, #40]	; (8003ae8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8003abe:	4b0b      	ldr	r3, [pc, #44]	; (8003aec <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8003ac0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8003ac2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8003ac4:	d3f6      	bcc.n	8003ab4 <CopyDataInit>
  ldr r2, =_sbss
 8003ac6:	4a0a      	ldr	r2, [pc, #40]	; (8003af0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8003ac8:	e002      	b.n	8003ad0 <LoopFillZerobss>

08003aca <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8003aca:	2300      	movs	r3, #0
  str r3, [r2], #4
 8003acc:	f842 3b04 	str.w	r3, [r2], #4

08003ad0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8003ad0:	4b08      	ldr	r3, [pc, #32]	; (8003af4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8003ad2:	429a      	cmp	r2, r3
  bcc FillZerobss
 8003ad4:	d3f9      	bcc.n	8003aca <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003ad6:	f7ff ffe5 	bl	8003aa4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003ada:	f006 fca3 	bl	800a424 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003ade:	f7fe fee5 	bl	80028ac <main>
  bx lr
 8003ae2:	4770      	bx	lr
  ldr r3, =_sidata
 8003ae4:	0800e1e4 	.word	0x0800e1e4
  ldr r0, =_sdata
 8003ae8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8003aec:	20000204 	.word	0x20000204
  ldr r2, =_sbss
 8003af0:	20000204 	.word	0x20000204
  ldr r3, = _ebss
 8003af4:	200019dc 	.word	0x200019dc

08003af8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003af8:	e7fe      	b.n	8003af8 <ADC1_2_IRQHandler>
	...

08003afc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003b00:	4b08      	ldr	r3, [pc, #32]	; (8003b24 <HAL_Init+0x28>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a07      	ldr	r2, [pc, #28]	; (8003b24 <HAL_Init+0x28>)
 8003b06:	f043 0310 	orr.w	r3, r3, #16
 8003b0a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003b0c:	2003      	movs	r0, #3
 8003b0e:	f000 f947 	bl	8003da0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003b12:	2000      	movs	r0, #0
 8003b14:	f000 f808 	bl	8003b28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003b18:	f7ff fd28 	bl	800356c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003b1c:	2300      	movs	r3, #0
}
 8003b1e:	4618      	mov	r0, r3
 8003b20:	bd80      	pop	{r7, pc}
 8003b22:	bf00      	nop
 8003b24:	40022000 	.word	0x40022000

08003b28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b082      	sub	sp, #8
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003b30:	4b12      	ldr	r3, [pc, #72]	; (8003b7c <HAL_InitTick+0x54>)
 8003b32:	681a      	ldr	r2, [r3, #0]
 8003b34:	4b12      	ldr	r3, [pc, #72]	; (8003b80 <HAL_InitTick+0x58>)
 8003b36:	781b      	ldrb	r3, [r3, #0]
 8003b38:	4619      	mov	r1, r3
 8003b3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003b3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003b42:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b46:	4618      	mov	r0, r3
 8003b48:	f000 f95f 	bl	8003e0a <HAL_SYSTICK_Config>
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d001      	beq.n	8003b56 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003b52:	2301      	movs	r3, #1
 8003b54:	e00e      	b.n	8003b74 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2b0f      	cmp	r3, #15
 8003b5a:	d80a      	bhi.n	8003b72 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	6879      	ldr	r1, [r7, #4]
 8003b60:	f04f 30ff 	mov.w	r0, #4294967295
 8003b64:	f000 f927 	bl	8003db6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003b68:	4a06      	ldr	r2, [pc, #24]	; (8003b84 <HAL_InitTick+0x5c>)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003b6e:	2300      	movs	r3, #0
 8003b70:	e000      	b.n	8003b74 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003b72:	2301      	movs	r3, #1
}
 8003b74:	4618      	mov	r0, r3
 8003b76:	3708      	adds	r7, #8
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	bd80      	pop	{r7, pc}
 8003b7c:	20000014 	.word	0x20000014
 8003b80:	2000001c 	.word	0x2000001c
 8003b84:	20000018 	.word	0x20000018

08003b88 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003b8c:	4b05      	ldr	r3, [pc, #20]	; (8003ba4 <HAL_IncTick+0x1c>)
 8003b8e:	781b      	ldrb	r3, [r3, #0]
 8003b90:	461a      	mov	r2, r3
 8003b92:	4b05      	ldr	r3, [pc, #20]	; (8003ba8 <HAL_IncTick+0x20>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4413      	add	r3, r2
 8003b98:	4a03      	ldr	r2, [pc, #12]	; (8003ba8 <HAL_IncTick+0x20>)
 8003b9a:	6013      	str	r3, [r2, #0]
}
 8003b9c:	bf00      	nop
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bc80      	pop	{r7}
 8003ba2:	4770      	bx	lr
 8003ba4:	2000001c 	.word	0x2000001c
 8003ba8:	20001164 	.word	0x20001164

08003bac <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003bac:	b480      	push	{r7}
 8003bae:	af00      	add	r7, sp, #0
  return uwTick;
 8003bb0:	4b02      	ldr	r3, [pc, #8]	; (8003bbc <HAL_GetTick+0x10>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
}
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bc80      	pop	{r7}
 8003bba:	4770      	bx	lr
 8003bbc:	20001164 	.word	0x20001164

08003bc0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b084      	sub	sp, #16
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003bc8:	f7ff fff0 	bl	8003bac <HAL_GetTick>
 8003bcc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bd8:	d005      	beq.n	8003be6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003bda:	4b0a      	ldr	r3, [pc, #40]	; (8003c04 <HAL_Delay+0x44>)
 8003bdc:	781b      	ldrb	r3, [r3, #0]
 8003bde:	461a      	mov	r2, r3
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	4413      	add	r3, r2
 8003be4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003be6:	bf00      	nop
 8003be8:	f7ff ffe0 	bl	8003bac <HAL_GetTick>
 8003bec:	4602      	mov	r2, r0
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	1ad3      	subs	r3, r2, r3
 8003bf2:	68fa      	ldr	r2, [r7, #12]
 8003bf4:	429a      	cmp	r2, r3
 8003bf6:	d8f7      	bhi.n	8003be8 <HAL_Delay+0x28>
  {
  }
}
 8003bf8:	bf00      	nop
 8003bfa:	bf00      	nop
 8003bfc:	3710      	adds	r7, #16
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd80      	pop	{r7, pc}
 8003c02:	bf00      	nop
 8003c04:	2000001c 	.word	0x2000001c

08003c08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	b085      	sub	sp, #20
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	f003 0307 	and.w	r3, r3, #7
 8003c16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003c18:	4b0c      	ldr	r3, [pc, #48]	; (8003c4c <__NVIC_SetPriorityGrouping+0x44>)
 8003c1a:	68db      	ldr	r3, [r3, #12]
 8003c1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003c1e:	68ba      	ldr	r2, [r7, #8]
 8003c20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003c24:	4013      	ands	r3, r2
 8003c26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003c30:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003c34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003c3a:	4a04      	ldr	r2, [pc, #16]	; (8003c4c <__NVIC_SetPriorityGrouping+0x44>)
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	60d3      	str	r3, [r2, #12]
}
 8003c40:	bf00      	nop
 8003c42:	3714      	adds	r7, #20
 8003c44:	46bd      	mov	sp, r7
 8003c46:	bc80      	pop	{r7}
 8003c48:	4770      	bx	lr
 8003c4a:	bf00      	nop
 8003c4c:	e000ed00 	.word	0xe000ed00

08003c50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003c50:	b480      	push	{r7}
 8003c52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c54:	4b04      	ldr	r3, [pc, #16]	; (8003c68 <__NVIC_GetPriorityGrouping+0x18>)
 8003c56:	68db      	ldr	r3, [r3, #12]
 8003c58:	0a1b      	lsrs	r3, r3, #8
 8003c5a:	f003 0307 	and.w	r3, r3, #7
}
 8003c5e:	4618      	mov	r0, r3
 8003c60:	46bd      	mov	sp, r7
 8003c62:	bc80      	pop	{r7}
 8003c64:	4770      	bx	lr
 8003c66:	bf00      	nop
 8003c68:	e000ed00 	.word	0xe000ed00

08003c6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	b083      	sub	sp, #12
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	4603      	mov	r3, r0
 8003c74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	db0b      	blt.n	8003c96 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c7e:	79fb      	ldrb	r3, [r7, #7]
 8003c80:	f003 021f 	and.w	r2, r3, #31
 8003c84:	4906      	ldr	r1, [pc, #24]	; (8003ca0 <__NVIC_EnableIRQ+0x34>)
 8003c86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c8a:	095b      	lsrs	r3, r3, #5
 8003c8c:	2001      	movs	r0, #1
 8003c8e:	fa00 f202 	lsl.w	r2, r0, r2
 8003c92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003c96:	bf00      	nop
 8003c98:	370c      	adds	r7, #12
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bc80      	pop	{r7}
 8003c9e:	4770      	bx	lr
 8003ca0:	e000e100 	.word	0xe000e100

08003ca4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b083      	sub	sp, #12
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	4603      	mov	r3, r0
 8003cac:	6039      	str	r1, [r7, #0]
 8003cae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003cb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	db0a      	blt.n	8003cce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	b2da      	uxtb	r2, r3
 8003cbc:	490c      	ldr	r1, [pc, #48]	; (8003cf0 <__NVIC_SetPriority+0x4c>)
 8003cbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cc2:	0112      	lsls	r2, r2, #4
 8003cc4:	b2d2      	uxtb	r2, r2
 8003cc6:	440b      	add	r3, r1
 8003cc8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003ccc:	e00a      	b.n	8003ce4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	b2da      	uxtb	r2, r3
 8003cd2:	4908      	ldr	r1, [pc, #32]	; (8003cf4 <__NVIC_SetPriority+0x50>)
 8003cd4:	79fb      	ldrb	r3, [r7, #7]
 8003cd6:	f003 030f 	and.w	r3, r3, #15
 8003cda:	3b04      	subs	r3, #4
 8003cdc:	0112      	lsls	r2, r2, #4
 8003cde:	b2d2      	uxtb	r2, r2
 8003ce0:	440b      	add	r3, r1
 8003ce2:	761a      	strb	r2, [r3, #24]
}
 8003ce4:	bf00      	nop
 8003ce6:	370c      	adds	r7, #12
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	bc80      	pop	{r7}
 8003cec:	4770      	bx	lr
 8003cee:	bf00      	nop
 8003cf0:	e000e100 	.word	0xe000e100
 8003cf4:	e000ed00 	.word	0xe000ed00

08003cf8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b089      	sub	sp, #36	; 0x24
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	60f8      	str	r0, [r7, #12]
 8003d00:	60b9      	str	r1, [r7, #8]
 8003d02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	f003 0307 	and.w	r3, r3, #7
 8003d0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d0c:	69fb      	ldr	r3, [r7, #28]
 8003d0e:	f1c3 0307 	rsb	r3, r3, #7
 8003d12:	2b04      	cmp	r3, #4
 8003d14:	bf28      	it	cs
 8003d16:	2304      	movcs	r3, #4
 8003d18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d1a:	69fb      	ldr	r3, [r7, #28]
 8003d1c:	3304      	adds	r3, #4
 8003d1e:	2b06      	cmp	r3, #6
 8003d20:	d902      	bls.n	8003d28 <NVIC_EncodePriority+0x30>
 8003d22:	69fb      	ldr	r3, [r7, #28]
 8003d24:	3b03      	subs	r3, #3
 8003d26:	e000      	b.n	8003d2a <NVIC_EncodePriority+0x32>
 8003d28:	2300      	movs	r3, #0
 8003d2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d2c:	f04f 32ff 	mov.w	r2, #4294967295
 8003d30:	69bb      	ldr	r3, [r7, #24]
 8003d32:	fa02 f303 	lsl.w	r3, r2, r3
 8003d36:	43da      	mvns	r2, r3
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	401a      	ands	r2, r3
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003d40:	f04f 31ff 	mov.w	r1, #4294967295
 8003d44:	697b      	ldr	r3, [r7, #20]
 8003d46:	fa01 f303 	lsl.w	r3, r1, r3
 8003d4a:	43d9      	mvns	r1, r3
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d50:	4313      	orrs	r3, r2
         );
}
 8003d52:	4618      	mov	r0, r3
 8003d54:	3724      	adds	r7, #36	; 0x24
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bc80      	pop	{r7}
 8003d5a:	4770      	bx	lr

08003d5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b082      	sub	sp, #8
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	3b01      	subs	r3, #1
 8003d68:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003d6c:	d301      	bcc.n	8003d72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003d6e:	2301      	movs	r3, #1
 8003d70:	e00f      	b.n	8003d92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003d72:	4a0a      	ldr	r2, [pc, #40]	; (8003d9c <SysTick_Config+0x40>)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	3b01      	subs	r3, #1
 8003d78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003d7a:	210f      	movs	r1, #15
 8003d7c:	f04f 30ff 	mov.w	r0, #4294967295
 8003d80:	f7ff ff90 	bl	8003ca4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003d84:	4b05      	ldr	r3, [pc, #20]	; (8003d9c <SysTick_Config+0x40>)
 8003d86:	2200      	movs	r2, #0
 8003d88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003d8a:	4b04      	ldr	r3, [pc, #16]	; (8003d9c <SysTick_Config+0x40>)
 8003d8c:	2207      	movs	r2, #7
 8003d8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003d90:	2300      	movs	r3, #0
}
 8003d92:	4618      	mov	r0, r3
 8003d94:	3708      	adds	r7, #8
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bd80      	pop	{r7, pc}
 8003d9a:	bf00      	nop
 8003d9c:	e000e010 	.word	0xe000e010

08003da0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b082      	sub	sp, #8
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003da8:	6878      	ldr	r0, [r7, #4]
 8003daa:	f7ff ff2d 	bl	8003c08 <__NVIC_SetPriorityGrouping>
}
 8003dae:	bf00      	nop
 8003db0:	3708      	adds	r7, #8
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bd80      	pop	{r7, pc}

08003db6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003db6:	b580      	push	{r7, lr}
 8003db8:	b086      	sub	sp, #24
 8003dba:	af00      	add	r7, sp, #0
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	60b9      	str	r1, [r7, #8]
 8003dc0:	607a      	str	r2, [r7, #4]
 8003dc2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003dc8:	f7ff ff42 	bl	8003c50 <__NVIC_GetPriorityGrouping>
 8003dcc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003dce:	687a      	ldr	r2, [r7, #4]
 8003dd0:	68b9      	ldr	r1, [r7, #8]
 8003dd2:	6978      	ldr	r0, [r7, #20]
 8003dd4:	f7ff ff90 	bl	8003cf8 <NVIC_EncodePriority>
 8003dd8:	4602      	mov	r2, r0
 8003dda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003dde:	4611      	mov	r1, r2
 8003de0:	4618      	mov	r0, r3
 8003de2:	f7ff ff5f 	bl	8003ca4 <__NVIC_SetPriority>
}
 8003de6:	bf00      	nop
 8003de8:	3718      	adds	r7, #24
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd80      	pop	{r7, pc}

08003dee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003dee:	b580      	push	{r7, lr}
 8003df0:	b082      	sub	sp, #8
 8003df2:	af00      	add	r7, sp, #0
 8003df4:	4603      	mov	r3, r0
 8003df6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003df8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	f7ff ff35 	bl	8003c6c <__NVIC_EnableIRQ>
}
 8003e02:	bf00      	nop
 8003e04:	3708      	adds	r7, #8
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}

08003e0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003e0a:	b580      	push	{r7, lr}
 8003e0c:	b082      	sub	sp, #8
 8003e0e:	af00      	add	r7, sp, #0
 8003e10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003e12:	6878      	ldr	r0, [r7, #4]
 8003e14:	f7ff ffa2 	bl	8003d5c <SysTick_Config>
 8003e18:	4603      	mov	r3, r0
}
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	3708      	adds	r7, #8
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bd80      	pop	{r7, pc}
	...

08003e24 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e24:	b480      	push	{r7}
 8003e26:	b08b      	sub	sp, #44	; 0x2c
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
 8003e2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003e2e:	2300      	movs	r3, #0
 8003e30:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003e32:	2300      	movs	r3, #0
 8003e34:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003e36:	e169      	b.n	800410c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003e38:	2201      	movs	r2, #1
 8003e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e40:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	69fa      	ldr	r2, [r7, #28]
 8003e48:	4013      	ands	r3, r2
 8003e4a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003e4c:	69ba      	ldr	r2, [r7, #24]
 8003e4e:	69fb      	ldr	r3, [r7, #28]
 8003e50:	429a      	cmp	r2, r3
 8003e52:	f040 8158 	bne.w	8004106 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	4a9a      	ldr	r2, [pc, #616]	; (80040c4 <HAL_GPIO_Init+0x2a0>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d05e      	beq.n	8003f1e <HAL_GPIO_Init+0xfa>
 8003e60:	4a98      	ldr	r2, [pc, #608]	; (80040c4 <HAL_GPIO_Init+0x2a0>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d875      	bhi.n	8003f52 <HAL_GPIO_Init+0x12e>
 8003e66:	4a98      	ldr	r2, [pc, #608]	; (80040c8 <HAL_GPIO_Init+0x2a4>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d058      	beq.n	8003f1e <HAL_GPIO_Init+0xfa>
 8003e6c:	4a96      	ldr	r2, [pc, #600]	; (80040c8 <HAL_GPIO_Init+0x2a4>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d86f      	bhi.n	8003f52 <HAL_GPIO_Init+0x12e>
 8003e72:	4a96      	ldr	r2, [pc, #600]	; (80040cc <HAL_GPIO_Init+0x2a8>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d052      	beq.n	8003f1e <HAL_GPIO_Init+0xfa>
 8003e78:	4a94      	ldr	r2, [pc, #592]	; (80040cc <HAL_GPIO_Init+0x2a8>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d869      	bhi.n	8003f52 <HAL_GPIO_Init+0x12e>
 8003e7e:	4a94      	ldr	r2, [pc, #592]	; (80040d0 <HAL_GPIO_Init+0x2ac>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d04c      	beq.n	8003f1e <HAL_GPIO_Init+0xfa>
 8003e84:	4a92      	ldr	r2, [pc, #584]	; (80040d0 <HAL_GPIO_Init+0x2ac>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d863      	bhi.n	8003f52 <HAL_GPIO_Init+0x12e>
 8003e8a:	4a92      	ldr	r2, [pc, #584]	; (80040d4 <HAL_GPIO_Init+0x2b0>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d046      	beq.n	8003f1e <HAL_GPIO_Init+0xfa>
 8003e90:	4a90      	ldr	r2, [pc, #576]	; (80040d4 <HAL_GPIO_Init+0x2b0>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d85d      	bhi.n	8003f52 <HAL_GPIO_Init+0x12e>
 8003e96:	2b12      	cmp	r3, #18
 8003e98:	d82a      	bhi.n	8003ef0 <HAL_GPIO_Init+0xcc>
 8003e9a:	2b12      	cmp	r3, #18
 8003e9c:	d859      	bhi.n	8003f52 <HAL_GPIO_Init+0x12e>
 8003e9e:	a201      	add	r2, pc, #4	; (adr r2, 8003ea4 <HAL_GPIO_Init+0x80>)
 8003ea0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ea4:	08003f1f 	.word	0x08003f1f
 8003ea8:	08003ef9 	.word	0x08003ef9
 8003eac:	08003f0b 	.word	0x08003f0b
 8003eb0:	08003f4d 	.word	0x08003f4d
 8003eb4:	08003f53 	.word	0x08003f53
 8003eb8:	08003f53 	.word	0x08003f53
 8003ebc:	08003f53 	.word	0x08003f53
 8003ec0:	08003f53 	.word	0x08003f53
 8003ec4:	08003f53 	.word	0x08003f53
 8003ec8:	08003f53 	.word	0x08003f53
 8003ecc:	08003f53 	.word	0x08003f53
 8003ed0:	08003f53 	.word	0x08003f53
 8003ed4:	08003f53 	.word	0x08003f53
 8003ed8:	08003f53 	.word	0x08003f53
 8003edc:	08003f53 	.word	0x08003f53
 8003ee0:	08003f53 	.word	0x08003f53
 8003ee4:	08003f53 	.word	0x08003f53
 8003ee8:	08003f01 	.word	0x08003f01
 8003eec:	08003f15 	.word	0x08003f15
 8003ef0:	4a79      	ldr	r2, [pc, #484]	; (80040d8 <HAL_GPIO_Init+0x2b4>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d013      	beq.n	8003f1e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003ef6:	e02c      	b.n	8003f52 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	68db      	ldr	r3, [r3, #12]
 8003efc:	623b      	str	r3, [r7, #32]
          break;
 8003efe:	e029      	b.n	8003f54 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	68db      	ldr	r3, [r3, #12]
 8003f04:	3304      	adds	r3, #4
 8003f06:	623b      	str	r3, [r7, #32]
          break;
 8003f08:	e024      	b.n	8003f54 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	68db      	ldr	r3, [r3, #12]
 8003f0e:	3308      	adds	r3, #8
 8003f10:	623b      	str	r3, [r7, #32]
          break;
 8003f12:	e01f      	b.n	8003f54 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	68db      	ldr	r3, [r3, #12]
 8003f18:	330c      	adds	r3, #12
 8003f1a:	623b      	str	r3, [r7, #32]
          break;
 8003f1c:	e01a      	b.n	8003f54 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	689b      	ldr	r3, [r3, #8]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d102      	bne.n	8003f2c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003f26:	2304      	movs	r3, #4
 8003f28:	623b      	str	r3, [r7, #32]
          break;
 8003f2a:	e013      	b.n	8003f54 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	689b      	ldr	r3, [r3, #8]
 8003f30:	2b01      	cmp	r3, #1
 8003f32:	d105      	bne.n	8003f40 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003f34:	2308      	movs	r3, #8
 8003f36:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	69fa      	ldr	r2, [r7, #28]
 8003f3c:	611a      	str	r2, [r3, #16]
          break;
 8003f3e:	e009      	b.n	8003f54 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003f40:	2308      	movs	r3, #8
 8003f42:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	69fa      	ldr	r2, [r7, #28]
 8003f48:	615a      	str	r2, [r3, #20]
          break;
 8003f4a:	e003      	b.n	8003f54 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	623b      	str	r3, [r7, #32]
          break;
 8003f50:	e000      	b.n	8003f54 <HAL_GPIO_Init+0x130>
          break;
 8003f52:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003f54:	69bb      	ldr	r3, [r7, #24]
 8003f56:	2bff      	cmp	r3, #255	; 0xff
 8003f58:	d801      	bhi.n	8003f5e <HAL_GPIO_Init+0x13a>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	e001      	b.n	8003f62 <HAL_GPIO_Init+0x13e>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	3304      	adds	r3, #4
 8003f62:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003f64:	69bb      	ldr	r3, [r7, #24]
 8003f66:	2bff      	cmp	r3, #255	; 0xff
 8003f68:	d802      	bhi.n	8003f70 <HAL_GPIO_Init+0x14c>
 8003f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f6c:	009b      	lsls	r3, r3, #2
 8003f6e:	e002      	b.n	8003f76 <HAL_GPIO_Init+0x152>
 8003f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f72:	3b08      	subs	r3, #8
 8003f74:	009b      	lsls	r3, r3, #2
 8003f76:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003f78:	697b      	ldr	r3, [r7, #20]
 8003f7a:	681a      	ldr	r2, [r3, #0]
 8003f7c:	210f      	movs	r1, #15
 8003f7e:	693b      	ldr	r3, [r7, #16]
 8003f80:	fa01 f303 	lsl.w	r3, r1, r3
 8003f84:	43db      	mvns	r3, r3
 8003f86:	401a      	ands	r2, r3
 8003f88:	6a39      	ldr	r1, [r7, #32]
 8003f8a:	693b      	ldr	r3, [r7, #16]
 8003f8c:	fa01 f303 	lsl.w	r3, r1, r3
 8003f90:	431a      	orrs	r2, r3
 8003f92:	697b      	ldr	r3, [r7, #20]
 8003f94:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	f000 80b1 	beq.w	8004106 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003fa4:	4b4d      	ldr	r3, [pc, #308]	; (80040dc <HAL_GPIO_Init+0x2b8>)
 8003fa6:	699b      	ldr	r3, [r3, #24]
 8003fa8:	4a4c      	ldr	r2, [pc, #304]	; (80040dc <HAL_GPIO_Init+0x2b8>)
 8003faa:	f043 0301 	orr.w	r3, r3, #1
 8003fae:	6193      	str	r3, [r2, #24]
 8003fb0:	4b4a      	ldr	r3, [pc, #296]	; (80040dc <HAL_GPIO_Init+0x2b8>)
 8003fb2:	699b      	ldr	r3, [r3, #24]
 8003fb4:	f003 0301 	and.w	r3, r3, #1
 8003fb8:	60bb      	str	r3, [r7, #8]
 8003fba:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003fbc:	4a48      	ldr	r2, [pc, #288]	; (80040e0 <HAL_GPIO_Init+0x2bc>)
 8003fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc0:	089b      	lsrs	r3, r3, #2
 8003fc2:	3302      	adds	r3, #2
 8003fc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fc8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fcc:	f003 0303 	and.w	r3, r3, #3
 8003fd0:	009b      	lsls	r3, r3, #2
 8003fd2:	220f      	movs	r2, #15
 8003fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8003fd8:	43db      	mvns	r3, r3
 8003fda:	68fa      	ldr	r2, [r7, #12]
 8003fdc:	4013      	ands	r3, r2
 8003fde:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	4a40      	ldr	r2, [pc, #256]	; (80040e4 <HAL_GPIO_Init+0x2c0>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d013      	beq.n	8004010 <HAL_GPIO_Init+0x1ec>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	4a3f      	ldr	r2, [pc, #252]	; (80040e8 <HAL_GPIO_Init+0x2c4>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d00d      	beq.n	800400c <HAL_GPIO_Init+0x1e8>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	4a3e      	ldr	r2, [pc, #248]	; (80040ec <HAL_GPIO_Init+0x2c8>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d007      	beq.n	8004008 <HAL_GPIO_Init+0x1e4>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	4a3d      	ldr	r2, [pc, #244]	; (80040f0 <HAL_GPIO_Init+0x2cc>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d101      	bne.n	8004004 <HAL_GPIO_Init+0x1e0>
 8004000:	2303      	movs	r3, #3
 8004002:	e006      	b.n	8004012 <HAL_GPIO_Init+0x1ee>
 8004004:	2304      	movs	r3, #4
 8004006:	e004      	b.n	8004012 <HAL_GPIO_Init+0x1ee>
 8004008:	2302      	movs	r3, #2
 800400a:	e002      	b.n	8004012 <HAL_GPIO_Init+0x1ee>
 800400c:	2301      	movs	r3, #1
 800400e:	e000      	b.n	8004012 <HAL_GPIO_Init+0x1ee>
 8004010:	2300      	movs	r3, #0
 8004012:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004014:	f002 0203 	and.w	r2, r2, #3
 8004018:	0092      	lsls	r2, r2, #2
 800401a:	4093      	lsls	r3, r2
 800401c:	68fa      	ldr	r2, [r7, #12]
 800401e:	4313      	orrs	r3, r2
 8004020:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8004022:	492f      	ldr	r1, [pc, #188]	; (80040e0 <HAL_GPIO_Init+0x2bc>)
 8004024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004026:	089b      	lsrs	r3, r3, #2
 8004028:	3302      	adds	r3, #2
 800402a:	68fa      	ldr	r2, [r7, #12]
 800402c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	685b      	ldr	r3, [r3, #4]
 8004034:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004038:	2b00      	cmp	r3, #0
 800403a:	d006      	beq.n	800404a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800403c:	4b2d      	ldr	r3, [pc, #180]	; (80040f4 <HAL_GPIO_Init+0x2d0>)
 800403e:	681a      	ldr	r2, [r3, #0]
 8004040:	492c      	ldr	r1, [pc, #176]	; (80040f4 <HAL_GPIO_Init+0x2d0>)
 8004042:	69bb      	ldr	r3, [r7, #24]
 8004044:	4313      	orrs	r3, r2
 8004046:	600b      	str	r3, [r1, #0]
 8004048:	e006      	b.n	8004058 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800404a:	4b2a      	ldr	r3, [pc, #168]	; (80040f4 <HAL_GPIO_Init+0x2d0>)
 800404c:	681a      	ldr	r2, [r3, #0]
 800404e:	69bb      	ldr	r3, [r7, #24]
 8004050:	43db      	mvns	r3, r3
 8004052:	4928      	ldr	r1, [pc, #160]	; (80040f4 <HAL_GPIO_Init+0x2d0>)
 8004054:	4013      	ands	r3, r2
 8004056:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004060:	2b00      	cmp	r3, #0
 8004062:	d006      	beq.n	8004072 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004064:	4b23      	ldr	r3, [pc, #140]	; (80040f4 <HAL_GPIO_Init+0x2d0>)
 8004066:	685a      	ldr	r2, [r3, #4]
 8004068:	4922      	ldr	r1, [pc, #136]	; (80040f4 <HAL_GPIO_Init+0x2d0>)
 800406a:	69bb      	ldr	r3, [r7, #24]
 800406c:	4313      	orrs	r3, r2
 800406e:	604b      	str	r3, [r1, #4]
 8004070:	e006      	b.n	8004080 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004072:	4b20      	ldr	r3, [pc, #128]	; (80040f4 <HAL_GPIO_Init+0x2d0>)
 8004074:	685a      	ldr	r2, [r3, #4]
 8004076:	69bb      	ldr	r3, [r7, #24]
 8004078:	43db      	mvns	r3, r3
 800407a:	491e      	ldr	r1, [pc, #120]	; (80040f4 <HAL_GPIO_Init+0x2d0>)
 800407c:	4013      	ands	r3, r2
 800407e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004088:	2b00      	cmp	r3, #0
 800408a:	d006      	beq.n	800409a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800408c:	4b19      	ldr	r3, [pc, #100]	; (80040f4 <HAL_GPIO_Init+0x2d0>)
 800408e:	689a      	ldr	r2, [r3, #8]
 8004090:	4918      	ldr	r1, [pc, #96]	; (80040f4 <HAL_GPIO_Init+0x2d0>)
 8004092:	69bb      	ldr	r3, [r7, #24]
 8004094:	4313      	orrs	r3, r2
 8004096:	608b      	str	r3, [r1, #8]
 8004098:	e006      	b.n	80040a8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800409a:	4b16      	ldr	r3, [pc, #88]	; (80040f4 <HAL_GPIO_Init+0x2d0>)
 800409c:	689a      	ldr	r2, [r3, #8]
 800409e:	69bb      	ldr	r3, [r7, #24]
 80040a0:	43db      	mvns	r3, r3
 80040a2:	4914      	ldr	r1, [pc, #80]	; (80040f4 <HAL_GPIO_Init+0x2d0>)
 80040a4:	4013      	ands	r3, r2
 80040a6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d021      	beq.n	80040f8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80040b4:	4b0f      	ldr	r3, [pc, #60]	; (80040f4 <HAL_GPIO_Init+0x2d0>)
 80040b6:	68da      	ldr	r2, [r3, #12]
 80040b8:	490e      	ldr	r1, [pc, #56]	; (80040f4 <HAL_GPIO_Init+0x2d0>)
 80040ba:	69bb      	ldr	r3, [r7, #24]
 80040bc:	4313      	orrs	r3, r2
 80040be:	60cb      	str	r3, [r1, #12]
 80040c0:	e021      	b.n	8004106 <HAL_GPIO_Init+0x2e2>
 80040c2:	bf00      	nop
 80040c4:	10320000 	.word	0x10320000
 80040c8:	10310000 	.word	0x10310000
 80040cc:	10220000 	.word	0x10220000
 80040d0:	10210000 	.word	0x10210000
 80040d4:	10120000 	.word	0x10120000
 80040d8:	10110000 	.word	0x10110000
 80040dc:	40021000 	.word	0x40021000
 80040e0:	40010000 	.word	0x40010000
 80040e4:	40010800 	.word	0x40010800
 80040e8:	40010c00 	.word	0x40010c00
 80040ec:	40011000 	.word	0x40011000
 80040f0:	40011400 	.word	0x40011400
 80040f4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80040f8:	4b0b      	ldr	r3, [pc, #44]	; (8004128 <HAL_GPIO_Init+0x304>)
 80040fa:	68da      	ldr	r2, [r3, #12]
 80040fc:	69bb      	ldr	r3, [r7, #24]
 80040fe:	43db      	mvns	r3, r3
 8004100:	4909      	ldr	r1, [pc, #36]	; (8004128 <HAL_GPIO_Init+0x304>)
 8004102:	4013      	ands	r3, r2
 8004104:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8004106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004108:	3301      	adds	r3, #1
 800410a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	681a      	ldr	r2, [r3, #0]
 8004110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004112:	fa22 f303 	lsr.w	r3, r2, r3
 8004116:	2b00      	cmp	r3, #0
 8004118:	f47f ae8e 	bne.w	8003e38 <HAL_GPIO_Init+0x14>
  }
}
 800411c:	bf00      	nop
 800411e:	bf00      	nop
 8004120:	372c      	adds	r7, #44	; 0x2c
 8004122:	46bd      	mov	sp, r7
 8004124:	bc80      	pop	{r7}
 8004126:	4770      	bx	lr
 8004128:	40010400 	.word	0x40010400

0800412c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800412c:	b480      	push	{r7}
 800412e:	b083      	sub	sp, #12
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
 8004134:	460b      	mov	r3, r1
 8004136:	807b      	strh	r3, [r7, #2]
 8004138:	4613      	mov	r3, r2
 800413a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800413c:	787b      	ldrb	r3, [r7, #1]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d003      	beq.n	800414a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004142:	887a      	ldrh	r2, [r7, #2]
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004148:	e003      	b.n	8004152 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800414a:	887b      	ldrh	r3, [r7, #2]
 800414c:	041a      	lsls	r2, r3, #16
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	611a      	str	r2, [r3, #16]
}
 8004152:	bf00      	nop
 8004154:	370c      	adds	r7, #12
 8004156:	46bd      	mov	sp, r7
 8004158:	bc80      	pop	{r7}
 800415a:	4770      	bx	lr

0800415c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b082      	sub	sp, #8
 8004160:	af00      	add	r7, sp, #0
 8004162:	4603      	mov	r3, r0
 8004164:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004166:	4b08      	ldr	r3, [pc, #32]	; (8004188 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004168:	695a      	ldr	r2, [r3, #20]
 800416a:	88fb      	ldrh	r3, [r7, #6]
 800416c:	4013      	ands	r3, r2
 800416e:	2b00      	cmp	r3, #0
 8004170:	d006      	beq.n	8004180 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004172:	4a05      	ldr	r2, [pc, #20]	; (8004188 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004174:	88fb      	ldrh	r3, [r7, #6]
 8004176:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004178:	88fb      	ldrh	r3, [r7, #6]
 800417a:	4618      	mov	r0, r3
 800417c:	f7fc ff12 	bl	8000fa4 <HAL_GPIO_EXTI_Callback>
  }
}
 8004180:	bf00      	nop
 8004182:	3708      	adds	r7, #8
 8004184:	46bd      	mov	sp, r7
 8004186:	bd80      	pop	{r7, pc}
 8004188:	40010400 	.word	0x40010400

0800418c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b084      	sub	sp, #16
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d101      	bne.n	800419e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800419a:	2301      	movs	r3, #1
 800419c:	e12b      	b.n	80043f6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041a4:	b2db      	uxtb	r3, r3
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d106      	bne.n	80041b8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2200      	movs	r2, #0
 80041ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80041b2:	6878      	ldr	r0, [r7, #4]
 80041b4:	f7ff fa0c 	bl	80035d0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2224      	movs	r2, #36	; 0x24
 80041bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	681a      	ldr	r2, [r3, #0]
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f022 0201 	bic.w	r2, r2, #1
 80041ce:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	681a      	ldr	r2, [r3, #0]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80041de:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	681a      	ldr	r2, [r3, #0]
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80041ee:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80041f0:	f000 fce4 	bl	8004bbc <HAL_RCC_GetPCLK1Freq>
 80041f4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	4a81      	ldr	r2, [pc, #516]	; (8004400 <HAL_I2C_Init+0x274>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d807      	bhi.n	8004210 <HAL_I2C_Init+0x84>
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	4a80      	ldr	r2, [pc, #512]	; (8004404 <HAL_I2C_Init+0x278>)
 8004204:	4293      	cmp	r3, r2
 8004206:	bf94      	ite	ls
 8004208:	2301      	movls	r3, #1
 800420a:	2300      	movhi	r3, #0
 800420c:	b2db      	uxtb	r3, r3
 800420e:	e006      	b.n	800421e <HAL_I2C_Init+0x92>
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	4a7d      	ldr	r2, [pc, #500]	; (8004408 <HAL_I2C_Init+0x27c>)
 8004214:	4293      	cmp	r3, r2
 8004216:	bf94      	ite	ls
 8004218:	2301      	movls	r3, #1
 800421a:	2300      	movhi	r3, #0
 800421c:	b2db      	uxtb	r3, r3
 800421e:	2b00      	cmp	r3, #0
 8004220:	d001      	beq.n	8004226 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004222:	2301      	movs	r3, #1
 8004224:	e0e7      	b.n	80043f6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	4a78      	ldr	r2, [pc, #480]	; (800440c <HAL_I2C_Init+0x280>)
 800422a:	fba2 2303 	umull	r2, r3, r2, r3
 800422e:	0c9b      	lsrs	r3, r3, #18
 8004230:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	68ba      	ldr	r2, [r7, #8]
 8004242:	430a      	orrs	r2, r1
 8004244:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	6a1b      	ldr	r3, [r3, #32]
 800424c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	4a6a      	ldr	r2, [pc, #424]	; (8004400 <HAL_I2C_Init+0x274>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d802      	bhi.n	8004260 <HAL_I2C_Init+0xd4>
 800425a:	68bb      	ldr	r3, [r7, #8]
 800425c:	3301      	adds	r3, #1
 800425e:	e009      	b.n	8004274 <HAL_I2C_Init+0xe8>
 8004260:	68bb      	ldr	r3, [r7, #8]
 8004262:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004266:	fb02 f303 	mul.w	r3, r2, r3
 800426a:	4a69      	ldr	r2, [pc, #420]	; (8004410 <HAL_I2C_Init+0x284>)
 800426c:	fba2 2303 	umull	r2, r3, r2, r3
 8004270:	099b      	lsrs	r3, r3, #6
 8004272:	3301      	adds	r3, #1
 8004274:	687a      	ldr	r2, [r7, #4]
 8004276:	6812      	ldr	r2, [r2, #0]
 8004278:	430b      	orrs	r3, r1
 800427a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	69db      	ldr	r3, [r3, #28]
 8004282:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004286:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	495c      	ldr	r1, [pc, #368]	; (8004400 <HAL_I2C_Init+0x274>)
 8004290:	428b      	cmp	r3, r1
 8004292:	d819      	bhi.n	80042c8 <HAL_I2C_Init+0x13c>
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	1e59      	subs	r1, r3, #1
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	005b      	lsls	r3, r3, #1
 800429e:	fbb1 f3f3 	udiv	r3, r1, r3
 80042a2:	1c59      	adds	r1, r3, #1
 80042a4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80042a8:	400b      	ands	r3, r1
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d00a      	beq.n	80042c4 <HAL_I2C_Init+0x138>
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	1e59      	subs	r1, r3, #1
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	005b      	lsls	r3, r3, #1
 80042b8:	fbb1 f3f3 	udiv	r3, r1, r3
 80042bc:	3301      	adds	r3, #1
 80042be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042c2:	e051      	b.n	8004368 <HAL_I2C_Init+0x1dc>
 80042c4:	2304      	movs	r3, #4
 80042c6:	e04f      	b.n	8004368 <HAL_I2C_Init+0x1dc>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	689b      	ldr	r3, [r3, #8]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d111      	bne.n	80042f4 <HAL_I2C_Init+0x168>
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	1e58      	subs	r0, r3, #1
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6859      	ldr	r1, [r3, #4]
 80042d8:	460b      	mov	r3, r1
 80042da:	005b      	lsls	r3, r3, #1
 80042dc:	440b      	add	r3, r1
 80042de:	fbb0 f3f3 	udiv	r3, r0, r3
 80042e2:	3301      	adds	r3, #1
 80042e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	bf0c      	ite	eq
 80042ec:	2301      	moveq	r3, #1
 80042ee:	2300      	movne	r3, #0
 80042f0:	b2db      	uxtb	r3, r3
 80042f2:	e012      	b.n	800431a <HAL_I2C_Init+0x18e>
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	1e58      	subs	r0, r3, #1
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6859      	ldr	r1, [r3, #4]
 80042fc:	460b      	mov	r3, r1
 80042fe:	009b      	lsls	r3, r3, #2
 8004300:	440b      	add	r3, r1
 8004302:	0099      	lsls	r1, r3, #2
 8004304:	440b      	add	r3, r1
 8004306:	fbb0 f3f3 	udiv	r3, r0, r3
 800430a:	3301      	adds	r3, #1
 800430c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004310:	2b00      	cmp	r3, #0
 8004312:	bf0c      	ite	eq
 8004314:	2301      	moveq	r3, #1
 8004316:	2300      	movne	r3, #0
 8004318:	b2db      	uxtb	r3, r3
 800431a:	2b00      	cmp	r3, #0
 800431c:	d001      	beq.n	8004322 <HAL_I2C_Init+0x196>
 800431e:	2301      	movs	r3, #1
 8004320:	e022      	b.n	8004368 <HAL_I2C_Init+0x1dc>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	689b      	ldr	r3, [r3, #8]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d10e      	bne.n	8004348 <HAL_I2C_Init+0x1bc>
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	1e58      	subs	r0, r3, #1
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6859      	ldr	r1, [r3, #4]
 8004332:	460b      	mov	r3, r1
 8004334:	005b      	lsls	r3, r3, #1
 8004336:	440b      	add	r3, r1
 8004338:	fbb0 f3f3 	udiv	r3, r0, r3
 800433c:	3301      	adds	r3, #1
 800433e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004342:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004346:	e00f      	b.n	8004368 <HAL_I2C_Init+0x1dc>
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	1e58      	subs	r0, r3, #1
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6859      	ldr	r1, [r3, #4]
 8004350:	460b      	mov	r3, r1
 8004352:	009b      	lsls	r3, r3, #2
 8004354:	440b      	add	r3, r1
 8004356:	0099      	lsls	r1, r3, #2
 8004358:	440b      	add	r3, r1
 800435a:	fbb0 f3f3 	udiv	r3, r0, r3
 800435e:	3301      	adds	r3, #1
 8004360:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004364:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004368:	6879      	ldr	r1, [r7, #4]
 800436a:	6809      	ldr	r1, [r1, #0]
 800436c:	4313      	orrs	r3, r2
 800436e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	69da      	ldr	r2, [r3, #28]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6a1b      	ldr	r3, [r3, #32]
 8004382:	431a      	orrs	r2, r3
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	430a      	orrs	r2, r1
 800438a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	689b      	ldr	r3, [r3, #8]
 8004392:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004396:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800439a:	687a      	ldr	r2, [r7, #4]
 800439c:	6911      	ldr	r1, [r2, #16]
 800439e:	687a      	ldr	r2, [r7, #4]
 80043a0:	68d2      	ldr	r2, [r2, #12]
 80043a2:	4311      	orrs	r1, r2
 80043a4:	687a      	ldr	r2, [r7, #4]
 80043a6:	6812      	ldr	r2, [r2, #0]
 80043a8:	430b      	orrs	r3, r1
 80043aa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	68db      	ldr	r3, [r3, #12]
 80043b2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	695a      	ldr	r2, [r3, #20]
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	699b      	ldr	r3, [r3, #24]
 80043be:	431a      	orrs	r2, r3
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	430a      	orrs	r2, r1
 80043c6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	681a      	ldr	r2, [r3, #0]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f042 0201 	orr.w	r2, r2, #1
 80043d6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2200      	movs	r2, #0
 80043dc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2220      	movs	r2, #32
 80043e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2200      	movs	r2, #0
 80043ea:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2200      	movs	r2, #0
 80043f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80043f4:	2300      	movs	r3, #0
}
 80043f6:	4618      	mov	r0, r3
 80043f8:	3710      	adds	r7, #16
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bd80      	pop	{r7, pc}
 80043fe:	bf00      	nop
 8004400:	000186a0 	.word	0x000186a0
 8004404:	001e847f 	.word	0x001e847f
 8004408:	003d08ff 	.word	0x003d08ff
 800440c:	431bde83 	.word	0x431bde83
 8004410:	10624dd3 	.word	0x10624dd3

08004414 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b086      	sub	sp, #24
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d101      	bne.n	8004426 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004422:	2301      	movs	r3, #1
 8004424:	e26c      	b.n	8004900 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f003 0301 	and.w	r3, r3, #1
 800442e:	2b00      	cmp	r3, #0
 8004430:	f000 8087 	beq.w	8004542 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004434:	4b92      	ldr	r3, [pc, #584]	; (8004680 <HAL_RCC_OscConfig+0x26c>)
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	f003 030c 	and.w	r3, r3, #12
 800443c:	2b04      	cmp	r3, #4
 800443e:	d00c      	beq.n	800445a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004440:	4b8f      	ldr	r3, [pc, #572]	; (8004680 <HAL_RCC_OscConfig+0x26c>)
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	f003 030c 	and.w	r3, r3, #12
 8004448:	2b08      	cmp	r3, #8
 800444a:	d112      	bne.n	8004472 <HAL_RCC_OscConfig+0x5e>
 800444c:	4b8c      	ldr	r3, [pc, #560]	; (8004680 <HAL_RCC_OscConfig+0x26c>)
 800444e:	685b      	ldr	r3, [r3, #4]
 8004450:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004454:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004458:	d10b      	bne.n	8004472 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800445a:	4b89      	ldr	r3, [pc, #548]	; (8004680 <HAL_RCC_OscConfig+0x26c>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004462:	2b00      	cmp	r3, #0
 8004464:	d06c      	beq.n	8004540 <HAL_RCC_OscConfig+0x12c>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d168      	bne.n	8004540 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800446e:	2301      	movs	r3, #1
 8004470:	e246      	b.n	8004900 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800447a:	d106      	bne.n	800448a <HAL_RCC_OscConfig+0x76>
 800447c:	4b80      	ldr	r3, [pc, #512]	; (8004680 <HAL_RCC_OscConfig+0x26c>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4a7f      	ldr	r2, [pc, #508]	; (8004680 <HAL_RCC_OscConfig+0x26c>)
 8004482:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004486:	6013      	str	r3, [r2, #0]
 8004488:	e02e      	b.n	80044e8 <HAL_RCC_OscConfig+0xd4>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d10c      	bne.n	80044ac <HAL_RCC_OscConfig+0x98>
 8004492:	4b7b      	ldr	r3, [pc, #492]	; (8004680 <HAL_RCC_OscConfig+0x26c>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a7a      	ldr	r2, [pc, #488]	; (8004680 <HAL_RCC_OscConfig+0x26c>)
 8004498:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800449c:	6013      	str	r3, [r2, #0]
 800449e:	4b78      	ldr	r3, [pc, #480]	; (8004680 <HAL_RCC_OscConfig+0x26c>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4a77      	ldr	r2, [pc, #476]	; (8004680 <HAL_RCC_OscConfig+0x26c>)
 80044a4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80044a8:	6013      	str	r3, [r2, #0]
 80044aa:	e01d      	b.n	80044e8 <HAL_RCC_OscConfig+0xd4>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	685b      	ldr	r3, [r3, #4]
 80044b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80044b4:	d10c      	bne.n	80044d0 <HAL_RCC_OscConfig+0xbc>
 80044b6:	4b72      	ldr	r3, [pc, #456]	; (8004680 <HAL_RCC_OscConfig+0x26c>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4a71      	ldr	r2, [pc, #452]	; (8004680 <HAL_RCC_OscConfig+0x26c>)
 80044bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80044c0:	6013      	str	r3, [r2, #0]
 80044c2:	4b6f      	ldr	r3, [pc, #444]	; (8004680 <HAL_RCC_OscConfig+0x26c>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4a6e      	ldr	r2, [pc, #440]	; (8004680 <HAL_RCC_OscConfig+0x26c>)
 80044c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044cc:	6013      	str	r3, [r2, #0]
 80044ce:	e00b      	b.n	80044e8 <HAL_RCC_OscConfig+0xd4>
 80044d0:	4b6b      	ldr	r3, [pc, #428]	; (8004680 <HAL_RCC_OscConfig+0x26c>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4a6a      	ldr	r2, [pc, #424]	; (8004680 <HAL_RCC_OscConfig+0x26c>)
 80044d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044da:	6013      	str	r3, [r2, #0]
 80044dc:	4b68      	ldr	r3, [pc, #416]	; (8004680 <HAL_RCC_OscConfig+0x26c>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a67      	ldr	r2, [pc, #412]	; (8004680 <HAL_RCC_OscConfig+0x26c>)
 80044e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80044e6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d013      	beq.n	8004518 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044f0:	f7ff fb5c 	bl	8003bac <HAL_GetTick>
 80044f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044f6:	e008      	b.n	800450a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80044f8:	f7ff fb58 	bl	8003bac <HAL_GetTick>
 80044fc:	4602      	mov	r2, r0
 80044fe:	693b      	ldr	r3, [r7, #16]
 8004500:	1ad3      	subs	r3, r2, r3
 8004502:	2b64      	cmp	r3, #100	; 0x64
 8004504:	d901      	bls.n	800450a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004506:	2303      	movs	r3, #3
 8004508:	e1fa      	b.n	8004900 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800450a:	4b5d      	ldr	r3, [pc, #372]	; (8004680 <HAL_RCC_OscConfig+0x26c>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004512:	2b00      	cmp	r3, #0
 8004514:	d0f0      	beq.n	80044f8 <HAL_RCC_OscConfig+0xe4>
 8004516:	e014      	b.n	8004542 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004518:	f7ff fb48 	bl	8003bac <HAL_GetTick>
 800451c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800451e:	e008      	b.n	8004532 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004520:	f7ff fb44 	bl	8003bac <HAL_GetTick>
 8004524:	4602      	mov	r2, r0
 8004526:	693b      	ldr	r3, [r7, #16]
 8004528:	1ad3      	subs	r3, r2, r3
 800452a:	2b64      	cmp	r3, #100	; 0x64
 800452c:	d901      	bls.n	8004532 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800452e:	2303      	movs	r3, #3
 8004530:	e1e6      	b.n	8004900 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004532:	4b53      	ldr	r3, [pc, #332]	; (8004680 <HAL_RCC_OscConfig+0x26c>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800453a:	2b00      	cmp	r3, #0
 800453c:	d1f0      	bne.n	8004520 <HAL_RCC_OscConfig+0x10c>
 800453e:	e000      	b.n	8004542 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004540:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f003 0302 	and.w	r3, r3, #2
 800454a:	2b00      	cmp	r3, #0
 800454c:	d063      	beq.n	8004616 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800454e:	4b4c      	ldr	r3, [pc, #304]	; (8004680 <HAL_RCC_OscConfig+0x26c>)
 8004550:	685b      	ldr	r3, [r3, #4]
 8004552:	f003 030c 	and.w	r3, r3, #12
 8004556:	2b00      	cmp	r3, #0
 8004558:	d00b      	beq.n	8004572 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800455a:	4b49      	ldr	r3, [pc, #292]	; (8004680 <HAL_RCC_OscConfig+0x26c>)
 800455c:	685b      	ldr	r3, [r3, #4]
 800455e:	f003 030c 	and.w	r3, r3, #12
 8004562:	2b08      	cmp	r3, #8
 8004564:	d11c      	bne.n	80045a0 <HAL_RCC_OscConfig+0x18c>
 8004566:	4b46      	ldr	r3, [pc, #280]	; (8004680 <HAL_RCC_OscConfig+0x26c>)
 8004568:	685b      	ldr	r3, [r3, #4]
 800456a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800456e:	2b00      	cmp	r3, #0
 8004570:	d116      	bne.n	80045a0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004572:	4b43      	ldr	r3, [pc, #268]	; (8004680 <HAL_RCC_OscConfig+0x26c>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f003 0302 	and.w	r3, r3, #2
 800457a:	2b00      	cmp	r3, #0
 800457c:	d005      	beq.n	800458a <HAL_RCC_OscConfig+0x176>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	691b      	ldr	r3, [r3, #16]
 8004582:	2b01      	cmp	r3, #1
 8004584:	d001      	beq.n	800458a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004586:	2301      	movs	r3, #1
 8004588:	e1ba      	b.n	8004900 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800458a:	4b3d      	ldr	r3, [pc, #244]	; (8004680 <HAL_RCC_OscConfig+0x26c>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	695b      	ldr	r3, [r3, #20]
 8004596:	00db      	lsls	r3, r3, #3
 8004598:	4939      	ldr	r1, [pc, #228]	; (8004680 <HAL_RCC_OscConfig+0x26c>)
 800459a:	4313      	orrs	r3, r2
 800459c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800459e:	e03a      	b.n	8004616 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	691b      	ldr	r3, [r3, #16]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d020      	beq.n	80045ea <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80045a8:	4b36      	ldr	r3, [pc, #216]	; (8004684 <HAL_RCC_OscConfig+0x270>)
 80045aa:	2201      	movs	r2, #1
 80045ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045ae:	f7ff fafd 	bl	8003bac <HAL_GetTick>
 80045b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045b4:	e008      	b.n	80045c8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045b6:	f7ff faf9 	bl	8003bac <HAL_GetTick>
 80045ba:	4602      	mov	r2, r0
 80045bc:	693b      	ldr	r3, [r7, #16]
 80045be:	1ad3      	subs	r3, r2, r3
 80045c0:	2b02      	cmp	r3, #2
 80045c2:	d901      	bls.n	80045c8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80045c4:	2303      	movs	r3, #3
 80045c6:	e19b      	b.n	8004900 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045c8:	4b2d      	ldr	r3, [pc, #180]	; (8004680 <HAL_RCC_OscConfig+0x26c>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f003 0302 	and.w	r3, r3, #2
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d0f0      	beq.n	80045b6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045d4:	4b2a      	ldr	r3, [pc, #168]	; (8004680 <HAL_RCC_OscConfig+0x26c>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	695b      	ldr	r3, [r3, #20]
 80045e0:	00db      	lsls	r3, r3, #3
 80045e2:	4927      	ldr	r1, [pc, #156]	; (8004680 <HAL_RCC_OscConfig+0x26c>)
 80045e4:	4313      	orrs	r3, r2
 80045e6:	600b      	str	r3, [r1, #0]
 80045e8:	e015      	b.n	8004616 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80045ea:	4b26      	ldr	r3, [pc, #152]	; (8004684 <HAL_RCC_OscConfig+0x270>)
 80045ec:	2200      	movs	r2, #0
 80045ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045f0:	f7ff fadc 	bl	8003bac <HAL_GetTick>
 80045f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045f6:	e008      	b.n	800460a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045f8:	f7ff fad8 	bl	8003bac <HAL_GetTick>
 80045fc:	4602      	mov	r2, r0
 80045fe:	693b      	ldr	r3, [r7, #16]
 8004600:	1ad3      	subs	r3, r2, r3
 8004602:	2b02      	cmp	r3, #2
 8004604:	d901      	bls.n	800460a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004606:	2303      	movs	r3, #3
 8004608:	e17a      	b.n	8004900 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800460a:	4b1d      	ldr	r3, [pc, #116]	; (8004680 <HAL_RCC_OscConfig+0x26c>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f003 0302 	and.w	r3, r3, #2
 8004612:	2b00      	cmp	r3, #0
 8004614:	d1f0      	bne.n	80045f8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f003 0308 	and.w	r3, r3, #8
 800461e:	2b00      	cmp	r3, #0
 8004620:	d03a      	beq.n	8004698 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	699b      	ldr	r3, [r3, #24]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d019      	beq.n	800465e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800462a:	4b17      	ldr	r3, [pc, #92]	; (8004688 <HAL_RCC_OscConfig+0x274>)
 800462c:	2201      	movs	r2, #1
 800462e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004630:	f7ff fabc 	bl	8003bac <HAL_GetTick>
 8004634:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004636:	e008      	b.n	800464a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004638:	f7ff fab8 	bl	8003bac <HAL_GetTick>
 800463c:	4602      	mov	r2, r0
 800463e:	693b      	ldr	r3, [r7, #16]
 8004640:	1ad3      	subs	r3, r2, r3
 8004642:	2b02      	cmp	r3, #2
 8004644:	d901      	bls.n	800464a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004646:	2303      	movs	r3, #3
 8004648:	e15a      	b.n	8004900 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800464a:	4b0d      	ldr	r3, [pc, #52]	; (8004680 <HAL_RCC_OscConfig+0x26c>)
 800464c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800464e:	f003 0302 	and.w	r3, r3, #2
 8004652:	2b00      	cmp	r3, #0
 8004654:	d0f0      	beq.n	8004638 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004656:	2001      	movs	r0, #1
 8004658:	f000 fad8 	bl	8004c0c <RCC_Delay>
 800465c:	e01c      	b.n	8004698 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800465e:	4b0a      	ldr	r3, [pc, #40]	; (8004688 <HAL_RCC_OscConfig+0x274>)
 8004660:	2200      	movs	r2, #0
 8004662:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004664:	f7ff faa2 	bl	8003bac <HAL_GetTick>
 8004668:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800466a:	e00f      	b.n	800468c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800466c:	f7ff fa9e 	bl	8003bac <HAL_GetTick>
 8004670:	4602      	mov	r2, r0
 8004672:	693b      	ldr	r3, [r7, #16]
 8004674:	1ad3      	subs	r3, r2, r3
 8004676:	2b02      	cmp	r3, #2
 8004678:	d908      	bls.n	800468c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800467a:	2303      	movs	r3, #3
 800467c:	e140      	b.n	8004900 <HAL_RCC_OscConfig+0x4ec>
 800467e:	bf00      	nop
 8004680:	40021000 	.word	0x40021000
 8004684:	42420000 	.word	0x42420000
 8004688:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800468c:	4b9e      	ldr	r3, [pc, #632]	; (8004908 <HAL_RCC_OscConfig+0x4f4>)
 800468e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004690:	f003 0302 	and.w	r3, r3, #2
 8004694:	2b00      	cmp	r3, #0
 8004696:	d1e9      	bne.n	800466c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f003 0304 	and.w	r3, r3, #4
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	f000 80a6 	beq.w	80047f2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80046a6:	2300      	movs	r3, #0
 80046a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80046aa:	4b97      	ldr	r3, [pc, #604]	; (8004908 <HAL_RCC_OscConfig+0x4f4>)
 80046ac:	69db      	ldr	r3, [r3, #28]
 80046ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d10d      	bne.n	80046d2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046b6:	4b94      	ldr	r3, [pc, #592]	; (8004908 <HAL_RCC_OscConfig+0x4f4>)
 80046b8:	69db      	ldr	r3, [r3, #28]
 80046ba:	4a93      	ldr	r2, [pc, #588]	; (8004908 <HAL_RCC_OscConfig+0x4f4>)
 80046bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046c0:	61d3      	str	r3, [r2, #28]
 80046c2:	4b91      	ldr	r3, [pc, #580]	; (8004908 <HAL_RCC_OscConfig+0x4f4>)
 80046c4:	69db      	ldr	r3, [r3, #28]
 80046c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046ca:	60bb      	str	r3, [r7, #8]
 80046cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80046ce:	2301      	movs	r3, #1
 80046d0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046d2:	4b8e      	ldr	r3, [pc, #568]	; (800490c <HAL_RCC_OscConfig+0x4f8>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d118      	bne.n	8004710 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80046de:	4b8b      	ldr	r3, [pc, #556]	; (800490c <HAL_RCC_OscConfig+0x4f8>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4a8a      	ldr	r2, [pc, #552]	; (800490c <HAL_RCC_OscConfig+0x4f8>)
 80046e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80046ea:	f7ff fa5f 	bl	8003bac <HAL_GetTick>
 80046ee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046f0:	e008      	b.n	8004704 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046f2:	f7ff fa5b 	bl	8003bac <HAL_GetTick>
 80046f6:	4602      	mov	r2, r0
 80046f8:	693b      	ldr	r3, [r7, #16]
 80046fa:	1ad3      	subs	r3, r2, r3
 80046fc:	2b64      	cmp	r3, #100	; 0x64
 80046fe:	d901      	bls.n	8004704 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004700:	2303      	movs	r3, #3
 8004702:	e0fd      	b.n	8004900 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004704:	4b81      	ldr	r3, [pc, #516]	; (800490c <HAL_RCC_OscConfig+0x4f8>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800470c:	2b00      	cmp	r3, #0
 800470e:	d0f0      	beq.n	80046f2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	68db      	ldr	r3, [r3, #12]
 8004714:	2b01      	cmp	r3, #1
 8004716:	d106      	bne.n	8004726 <HAL_RCC_OscConfig+0x312>
 8004718:	4b7b      	ldr	r3, [pc, #492]	; (8004908 <HAL_RCC_OscConfig+0x4f4>)
 800471a:	6a1b      	ldr	r3, [r3, #32]
 800471c:	4a7a      	ldr	r2, [pc, #488]	; (8004908 <HAL_RCC_OscConfig+0x4f4>)
 800471e:	f043 0301 	orr.w	r3, r3, #1
 8004722:	6213      	str	r3, [r2, #32]
 8004724:	e02d      	b.n	8004782 <HAL_RCC_OscConfig+0x36e>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	68db      	ldr	r3, [r3, #12]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d10c      	bne.n	8004748 <HAL_RCC_OscConfig+0x334>
 800472e:	4b76      	ldr	r3, [pc, #472]	; (8004908 <HAL_RCC_OscConfig+0x4f4>)
 8004730:	6a1b      	ldr	r3, [r3, #32]
 8004732:	4a75      	ldr	r2, [pc, #468]	; (8004908 <HAL_RCC_OscConfig+0x4f4>)
 8004734:	f023 0301 	bic.w	r3, r3, #1
 8004738:	6213      	str	r3, [r2, #32]
 800473a:	4b73      	ldr	r3, [pc, #460]	; (8004908 <HAL_RCC_OscConfig+0x4f4>)
 800473c:	6a1b      	ldr	r3, [r3, #32]
 800473e:	4a72      	ldr	r2, [pc, #456]	; (8004908 <HAL_RCC_OscConfig+0x4f4>)
 8004740:	f023 0304 	bic.w	r3, r3, #4
 8004744:	6213      	str	r3, [r2, #32]
 8004746:	e01c      	b.n	8004782 <HAL_RCC_OscConfig+0x36e>
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	68db      	ldr	r3, [r3, #12]
 800474c:	2b05      	cmp	r3, #5
 800474e:	d10c      	bne.n	800476a <HAL_RCC_OscConfig+0x356>
 8004750:	4b6d      	ldr	r3, [pc, #436]	; (8004908 <HAL_RCC_OscConfig+0x4f4>)
 8004752:	6a1b      	ldr	r3, [r3, #32]
 8004754:	4a6c      	ldr	r2, [pc, #432]	; (8004908 <HAL_RCC_OscConfig+0x4f4>)
 8004756:	f043 0304 	orr.w	r3, r3, #4
 800475a:	6213      	str	r3, [r2, #32]
 800475c:	4b6a      	ldr	r3, [pc, #424]	; (8004908 <HAL_RCC_OscConfig+0x4f4>)
 800475e:	6a1b      	ldr	r3, [r3, #32]
 8004760:	4a69      	ldr	r2, [pc, #420]	; (8004908 <HAL_RCC_OscConfig+0x4f4>)
 8004762:	f043 0301 	orr.w	r3, r3, #1
 8004766:	6213      	str	r3, [r2, #32]
 8004768:	e00b      	b.n	8004782 <HAL_RCC_OscConfig+0x36e>
 800476a:	4b67      	ldr	r3, [pc, #412]	; (8004908 <HAL_RCC_OscConfig+0x4f4>)
 800476c:	6a1b      	ldr	r3, [r3, #32]
 800476e:	4a66      	ldr	r2, [pc, #408]	; (8004908 <HAL_RCC_OscConfig+0x4f4>)
 8004770:	f023 0301 	bic.w	r3, r3, #1
 8004774:	6213      	str	r3, [r2, #32]
 8004776:	4b64      	ldr	r3, [pc, #400]	; (8004908 <HAL_RCC_OscConfig+0x4f4>)
 8004778:	6a1b      	ldr	r3, [r3, #32]
 800477a:	4a63      	ldr	r2, [pc, #396]	; (8004908 <HAL_RCC_OscConfig+0x4f4>)
 800477c:	f023 0304 	bic.w	r3, r3, #4
 8004780:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	68db      	ldr	r3, [r3, #12]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d015      	beq.n	80047b6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800478a:	f7ff fa0f 	bl	8003bac <HAL_GetTick>
 800478e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004790:	e00a      	b.n	80047a8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004792:	f7ff fa0b 	bl	8003bac <HAL_GetTick>
 8004796:	4602      	mov	r2, r0
 8004798:	693b      	ldr	r3, [r7, #16]
 800479a:	1ad3      	subs	r3, r2, r3
 800479c:	f241 3288 	movw	r2, #5000	; 0x1388
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d901      	bls.n	80047a8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80047a4:	2303      	movs	r3, #3
 80047a6:	e0ab      	b.n	8004900 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047a8:	4b57      	ldr	r3, [pc, #348]	; (8004908 <HAL_RCC_OscConfig+0x4f4>)
 80047aa:	6a1b      	ldr	r3, [r3, #32]
 80047ac:	f003 0302 	and.w	r3, r3, #2
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d0ee      	beq.n	8004792 <HAL_RCC_OscConfig+0x37e>
 80047b4:	e014      	b.n	80047e0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047b6:	f7ff f9f9 	bl	8003bac <HAL_GetTick>
 80047ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047bc:	e00a      	b.n	80047d4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047be:	f7ff f9f5 	bl	8003bac <HAL_GetTick>
 80047c2:	4602      	mov	r2, r0
 80047c4:	693b      	ldr	r3, [r7, #16]
 80047c6:	1ad3      	subs	r3, r2, r3
 80047c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d901      	bls.n	80047d4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80047d0:	2303      	movs	r3, #3
 80047d2:	e095      	b.n	8004900 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047d4:	4b4c      	ldr	r3, [pc, #304]	; (8004908 <HAL_RCC_OscConfig+0x4f4>)
 80047d6:	6a1b      	ldr	r3, [r3, #32]
 80047d8:	f003 0302 	and.w	r3, r3, #2
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d1ee      	bne.n	80047be <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80047e0:	7dfb      	ldrb	r3, [r7, #23]
 80047e2:	2b01      	cmp	r3, #1
 80047e4:	d105      	bne.n	80047f2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047e6:	4b48      	ldr	r3, [pc, #288]	; (8004908 <HAL_RCC_OscConfig+0x4f4>)
 80047e8:	69db      	ldr	r3, [r3, #28]
 80047ea:	4a47      	ldr	r2, [pc, #284]	; (8004908 <HAL_RCC_OscConfig+0x4f4>)
 80047ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047f0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	69db      	ldr	r3, [r3, #28]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	f000 8081 	beq.w	80048fe <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80047fc:	4b42      	ldr	r3, [pc, #264]	; (8004908 <HAL_RCC_OscConfig+0x4f4>)
 80047fe:	685b      	ldr	r3, [r3, #4]
 8004800:	f003 030c 	and.w	r3, r3, #12
 8004804:	2b08      	cmp	r3, #8
 8004806:	d061      	beq.n	80048cc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	69db      	ldr	r3, [r3, #28]
 800480c:	2b02      	cmp	r3, #2
 800480e:	d146      	bne.n	800489e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004810:	4b3f      	ldr	r3, [pc, #252]	; (8004910 <HAL_RCC_OscConfig+0x4fc>)
 8004812:	2200      	movs	r2, #0
 8004814:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004816:	f7ff f9c9 	bl	8003bac <HAL_GetTick>
 800481a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800481c:	e008      	b.n	8004830 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800481e:	f7ff f9c5 	bl	8003bac <HAL_GetTick>
 8004822:	4602      	mov	r2, r0
 8004824:	693b      	ldr	r3, [r7, #16]
 8004826:	1ad3      	subs	r3, r2, r3
 8004828:	2b02      	cmp	r3, #2
 800482a:	d901      	bls.n	8004830 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800482c:	2303      	movs	r3, #3
 800482e:	e067      	b.n	8004900 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004830:	4b35      	ldr	r3, [pc, #212]	; (8004908 <HAL_RCC_OscConfig+0x4f4>)
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004838:	2b00      	cmp	r3, #0
 800483a:	d1f0      	bne.n	800481e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6a1b      	ldr	r3, [r3, #32]
 8004840:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004844:	d108      	bne.n	8004858 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004846:	4b30      	ldr	r3, [pc, #192]	; (8004908 <HAL_RCC_OscConfig+0x4f4>)
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	689b      	ldr	r3, [r3, #8]
 8004852:	492d      	ldr	r1, [pc, #180]	; (8004908 <HAL_RCC_OscConfig+0x4f4>)
 8004854:	4313      	orrs	r3, r2
 8004856:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004858:	4b2b      	ldr	r3, [pc, #172]	; (8004908 <HAL_RCC_OscConfig+0x4f4>)
 800485a:	685b      	ldr	r3, [r3, #4]
 800485c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6a19      	ldr	r1, [r3, #32]
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004868:	430b      	orrs	r3, r1
 800486a:	4927      	ldr	r1, [pc, #156]	; (8004908 <HAL_RCC_OscConfig+0x4f4>)
 800486c:	4313      	orrs	r3, r2
 800486e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004870:	4b27      	ldr	r3, [pc, #156]	; (8004910 <HAL_RCC_OscConfig+0x4fc>)
 8004872:	2201      	movs	r2, #1
 8004874:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004876:	f7ff f999 	bl	8003bac <HAL_GetTick>
 800487a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800487c:	e008      	b.n	8004890 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800487e:	f7ff f995 	bl	8003bac <HAL_GetTick>
 8004882:	4602      	mov	r2, r0
 8004884:	693b      	ldr	r3, [r7, #16]
 8004886:	1ad3      	subs	r3, r2, r3
 8004888:	2b02      	cmp	r3, #2
 800488a:	d901      	bls.n	8004890 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800488c:	2303      	movs	r3, #3
 800488e:	e037      	b.n	8004900 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004890:	4b1d      	ldr	r3, [pc, #116]	; (8004908 <HAL_RCC_OscConfig+0x4f4>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004898:	2b00      	cmp	r3, #0
 800489a:	d0f0      	beq.n	800487e <HAL_RCC_OscConfig+0x46a>
 800489c:	e02f      	b.n	80048fe <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800489e:	4b1c      	ldr	r3, [pc, #112]	; (8004910 <HAL_RCC_OscConfig+0x4fc>)
 80048a0:	2200      	movs	r2, #0
 80048a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048a4:	f7ff f982 	bl	8003bac <HAL_GetTick>
 80048a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80048aa:	e008      	b.n	80048be <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048ac:	f7ff f97e 	bl	8003bac <HAL_GetTick>
 80048b0:	4602      	mov	r2, r0
 80048b2:	693b      	ldr	r3, [r7, #16]
 80048b4:	1ad3      	subs	r3, r2, r3
 80048b6:	2b02      	cmp	r3, #2
 80048b8:	d901      	bls.n	80048be <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80048ba:	2303      	movs	r3, #3
 80048bc:	e020      	b.n	8004900 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80048be:	4b12      	ldr	r3, [pc, #72]	; (8004908 <HAL_RCC_OscConfig+0x4f4>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d1f0      	bne.n	80048ac <HAL_RCC_OscConfig+0x498>
 80048ca:	e018      	b.n	80048fe <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	69db      	ldr	r3, [r3, #28]
 80048d0:	2b01      	cmp	r3, #1
 80048d2:	d101      	bne.n	80048d8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80048d4:	2301      	movs	r3, #1
 80048d6:	e013      	b.n	8004900 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80048d8:	4b0b      	ldr	r3, [pc, #44]	; (8004908 <HAL_RCC_OscConfig+0x4f4>)
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6a1b      	ldr	r3, [r3, #32]
 80048e8:	429a      	cmp	r2, r3
 80048ea:	d106      	bne.n	80048fa <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048f6:	429a      	cmp	r2, r3
 80048f8:	d001      	beq.n	80048fe <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80048fa:	2301      	movs	r3, #1
 80048fc:	e000      	b.n	8004900 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80048fe:	2300      	movs	r3, #0
}
 8004900:	4618      	mov	r0, r3
 8004902:	3718      	adds	r7, #24
 8004904:	46bd      	mov	sp, r7
 8004906:	bd80      	pop	{r7, pc}
 8004908:	40021000 	.word	0x40021000
 800490c:	40007000 	.word	0x40007000
 8004910:	42420060 	.word	0x42420060

08004914 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b084      	sub	sp, #16
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
 800491c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d101      	bne.n	8004928 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004924:	2301      	movs	r3, #1
 8004926:	e0d0      	b.n	8004aca <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004928:	4b6a      	ldr	r3, [pc, #424]	; (8004ad4 <HAL_RCC_ClockConfig+0x1c0>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f003 0307 	and.w	r3, r3, #7
 8004930:	683a      	ldr	r2, [r7, #0]
 8004932:	429a      	cmp	r2, r3
 8004934:	d910      	bls.n	8004958 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004936:	4b67      	ldr	r3, [pc, #412]	; (8004ad4 <HAL_RCC_ClockConfig+0x1c0>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f023 0207 	bic.w	r2, r3, #7
 800493e:	4965      	ldr	r1, [pc, #404]	; (8004ad4 <HAL_RCC_ClockConfig+0x1c0>)
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	4313      	orrs	r3, r2
 8004944:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004946:	4b63      	ldr	r3, [pc, #396]	; (8004ad4 <HAL_RCC_ClockConfig+0x1c0>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f003 0307 	and.w	r3, r3, #7
 800494e:	683a      	ldr	r2, [r7, #0]
 8004950:	429a      	cmp	r2, r3
 8004952:	d001      	beq.n	8004958 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004954:	2301      	movs	r3, #1
 8004956:	e0b8      	b.n	8004aca <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f003 0302 	and.w	r3, r3, #2
 8004960:	2b00      	cmp	r3, #0
 8004962:	d020      	beq.n	80049a6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f003 0304 	and.w	r3, r3, #4
 800496c:	2b00      	cmp	r3, #0
 800496e:	d005      	beq.n	800497c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004970:	4b59      	ldr	r3, [pc, #356]	; (8004ad8 <HAL_RCC_ClockConfig+0x1c4>)
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	4a58      	ldr	r2, [pc, #352]	; (8004ad8 <HAL_RCC_ClockConfig+0x1c4>)
 8004976:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800497a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f003 0308 	and.w	r3, r3, #8
 8004984:	2b00      	cmp	r3, #0
 8004986:	d005      	beq.n	8004994 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004988:	4b53      	ldr	r3, [pc, #332]	; (8004ad8 <HAL_RCC_ClockConfig+0x1c4>)
 800498a:	685b      	ldr	r3, [r3, #4]
 800498c:	4a52      	ldr	r2, [pc, #328]	; (8004ad8 <HAL_RCC_ClockConfig+0x1c4>)
 800498e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004992:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004994:	4b50      	ldr	r3, [pc, #320]	; (8004ad8 <HAL_RCC_ClockConfig+0x1c4>)
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	689b      	ldr	r3, [r3, #8]
 80049a0:	494d      	ldr	r1, [pc, #308]	; (8004ad8 <HAL_RCC_ClockConfig+0x1c4>)
 80049a2:	4313      	orrs	r3, r2
 80049a4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f003 0301 	and.w	r3, r3, #1
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d040      	beq.n	8004a34 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	2b01      	cmp	r3, #1
 80049b8:	d107      	bne.n	80049ca <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049ba:	4b47      	ldr	r3, [pc, #284]	; (8004ad8 <HAL_RCC_ClockConfig+0x1c4>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d115      	bne.n	80049f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049c6:	2301      	movs	r3, #1
 80049c8:	e07f      	b.n	8004aca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	2b02      	cmp	r3, #2
 80049d0:	d107      	bne.n	80049e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049d2:	4b41      	ldr	r3, [pc, #260]	; (8004ad8 <HAL_RCC_ClockConfig+0x1c4>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d109      	bne.n	80049f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049de:	2301      	movs	r3, #1
 80049e0:	e073      	b.n	8004aca <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049e2:	4b3d      	ldr	r3, [pc, #244]	; (8004ad8 <HAL_RCC_ClockConfig+0x1c4>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f003 0302 	and.w	r3, r3, #2
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d101      	bne.n	80049f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049ee:	2301      	movs	r3, #1
 80049f0:	e06b      	b.n	8004aca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80049f2:	4b39      	ldr	r3, [pc, #228]	; (8004ad8 <HAL_RCC_ClockConfig+0x1c4>)
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	f023 0203 	bic.w	r2, r3, #3
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	685b      	ldr	r3, [r3, #4]
 80049fe:	4936      	ldr	r1, [pc, #216]	; (8004ad8 <HAL_RCC_ClockConfig+0x1c4>)
 8004a00:	4313      	orrs	r3, r2
 8004a02:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004a04:	f7ff f8d2 	bl	8003bac <HAL_GetTick>
 8004a08:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a0a:	e00a      	b.n	8004a22 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a0c:	f7ff f8ce 	bl	8003bac <HAL_GetTick>
 8004a10:	4602      	mov	r2, r0
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	1ad3      	subs	r3, r2, r3
 8004a16:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d901      	bls.n	8004a22 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004a1e:	2303      	movs	r3, #3
 8004a20:	e053      	b.n	8004aca <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a22:	4b2d      	ldr	r3, [pc, #180]	; (8004ad8 <HAL_RCC_ClockConfig+0x1c4>)
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	f003 020c 	and.w	r2, r3, #12
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	009b      	lsls	r3, r3, #2
 8004a30:	429a      	cmp	r2, r3
 8004a32:	d1eb      	bne.n	8004a0c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004a34:	4b27      	ldr	r3, [pc, #156]	; (8004ad4 <HAL_RCC_ClockConfig+0x1c0>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f003 0307 	and.w	r3, r3, #7
 8004a3c:	683a      	ldr	r2, [r7, #0]
 8004a3e:	429a      	cmp	r2, r3
 8004a40:	d210      	bcs.n	8004a64 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a42:	4b24      	ldr	r3, [pc, #144]	; (8004ad4 <HAL_RCC_ClockConfig+0x1c0>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f023 0207 	bic.w	r2, r3, #7
 8004a4a:	4922      	ldr	r1, [pc, #136]	; (8004ad4 <HAL_RCC_ClockConfig+0x1c0>)
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a52:	4b20      	ldr	r3, [pc, #128]	; (8004ad4 <HAL_RCC_ClockConfig+0x1c0>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f003 0307 	and.w	r3, r3, #7
 8004a5a:	683a      	ldr	r2, [r7, #0]
 8004a5c:	429a      	cmp	r2, r3
 8004a5e:	d001      	beq.n	8004a64 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004a60:	2301      	movs	r3, #1
 8004a62:	e032      	b.n	8004aca <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f003 0304 	and.w	r3, r3, #4
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d008      	beq.n	8004a82 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a70:	4b19      	ldr	r3, [pc, #100]	; (8004ad8 <HAL_RCC_ClockConfig+0x1c4>)
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	68db      	ldr	r3, [r3, #12]
 8004a7c:	4916      	ldr	r1, [pc, #88]	; (8004ad8 <HAL_RCC_ClockConfig+0x1c4>)
 8004a7e:	4313      	orrs	r3, r2
 8004a80:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f003 0308 	and.w	r3, r3, #8
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d009      	beq.n	8004aa2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004a8e:	4b12      	ldr	r3, [pc, #72]	; (8004ad8 <HAL_RCC_ClockConfig+0x1c4>)
 8004a90:	685b      	ldr	r3, [r3, #4]
 8004a92:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	691b      	ldr	r3, [r3, #16]
 8004a9a:	00db      	lsls	r3, r3, #3
 8004a9c:	490e      	ldr	r1, [pc, #56]	; (8004ad8 <HAL_RCC_ClockConfig+0x1c4>)
 8004a9e:	4313      	orrs	r3, r2
 8004aa0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004aa2:	f000 f821 	bl	8004ae8 <HAL_RCC_GetSysClockFreq>
 8004aa6:	4602      	mov	r2, r0
 8004aa8:	4b0b      	ldr	r3, [pc, #44]	; (8004ad8 <HAL_RCC_ClockConfig+0x1c4>)
 8004aaa:	685b      	ldr	r3, [r3, #4]
 8004aac:	091b      	lsrs	r3, r3, #4
 8004aae:	f003 030f 	and.w	r3, r3, #15
 8004ab2:	490a      	ldr	r1, [pc, #40]	; (8004adc <HAL_RCC_ClockConfig+0x1c8>)
 8004ab4:	5ccb      	ldrb	r3, [r1, r3]
 8004ab6:	fa22 f303 	lsr.w	r3, r2, r3
 8004aba:	4a09      	ldr	r2, [pc, #36]	; (8004ae0 <HAL_RCC_ClockConfig+0x1cc>)
 8004abc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004abe:	4b09      	ldr	r3, [pc, #36]	; (8004ae4 <HAL_RCC_ClockConfig+0x1d0>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	f7ff f830 	bl	8003b28 <HAL_InitTick>

  return HAL_OK;
 8004ac8:	2300      	movs	r3, #0
}
 8004aca:	4618      	mov	r0, r3
 8004acc:	3710      	adds	r7, #16
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	bd80      	pop	{r7, pc}
 8004ad2:	bf00      	nop
 8004ad4:	40022000 	.word	0x40022000
 8004ad8:	40021000 	.word	0x40021000
 8004adc:	0800d890 	.word	0x0800d890
 8004ae0:	20000014 	.word	0x20000014
 8004ae4:	20000018 	.word	0x20000018

08004ae8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ae8:	b490      	push	{r4, r7}
 8004aea:	b08a      	sub	sp, #40	; 0x28
 8004aec:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004aee:	4b2a      	ldr	r3, [pc, #168]	; (8004b98 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004af0:	1d3c      	adds	r4, r7, #4
 8004af2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004af4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004af8:	f240 2301 	movw	r3, #513	; 0x201
 8004afc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004afe:	2300      	movs	r3, #0
 8004b00:	61fb      	str	r3, [r7, #28]
 8004b02:	2300      	movs	r3, #0
 8004b04:	61bb      	str	r3, [r7, #24]
 8004b06:	2300      	movs	r3, #0
 8004b08:	627b      	str	r3, [r7, #36]	; 0x24
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004b0e:	2300      	movs	r3, #0
 8004b10:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004b12:	4b22      	ldr	r3, [pc, #136]	; (8004b9c <HAL_RCC_GetSysClockFreq+0xb4>)
 8004b14:	685b      	ldr	r3, [r3, #4]
 8004b16:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004b18:	69fb      	ldr	r3, [r7, #28]
 8004b1a:	f003 030c 	and.w	r3, r3, #12
 8004b1e:	2b04      	cmp	r3, #4
 8004b20:	d002      	beq.n	8004b28 <HAL_RCC_GetSysClockFreq+0x40>
 8004b22:	2b08      	cmp	r3, #8
 8004b24:	d003      	beq.n	8004b2e <HAL_RCC_GetSysClockFreq+0x46>
 8004b26:	e02d      	b.n	8004b84 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004b28:	4b1d      	ldr	r3, [pc, #116]	; (8004ba0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004b2a:	623b      	str	r3, [r7, #32]
      break;
 8004b2c:	e02d      	b.n	8004b8a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004b2e:	69fb      	ldr	r3, [r7, #28]
 8004b30:	0c9b      	lsrs	r3, r3, #18
 8004b32:	f003 030f 	and.w	r3, r3, #15
 8004b36:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004b3a:	4413      	add	r3, r2
 8004b3c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004b40:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004b42:	69fb      	ldr	r3, [r7, #28]
 8004b44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d013      	beq.n	8004b74 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004b4c:	4b13      	ldr	r3, [pc, #76]	; (8004b9c <HAL_RCC_GetSysClockFreq+0xb4>)
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	0c5b      	lsrs	r3, r3, #17
 8004b52:	f003 0301 	and.w	r3, r3, #1
 8004b56:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004b5a:	4413      	add	r3, r2
 8004b5c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004b60:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004b62:	697b      	ldr	r3, [r7, #20]
 8004b64:	4a0e      	ldr	r2, [pc, #56]	; (8004ba0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004b66:	fb02 f203 	mul.w	r2, r2, r3
 8004b6a:	69bb      	ldr	r3, [r7, #24]
 8004b6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b70:	627b      	str	r3, [r7, #36]	; 0x24
 8004b72:	e004      	b.n	8004b7e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004b74:	697b      	ldr	r3, [r7, #20]
 8004b76:	4a0b      	ldr	r2, [pc, #44]	; (8004ba4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004b78:	fb02 f303 	mul.w	r3, r2, r3
 8004b7c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b80:	623b      	str	r3, [r7, #32]
      break;
 8004b82:	e002      	b.n	8004b8a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004b84:	4b06      	ldr	r3, [pc, #24]	; (8004ba0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004b86:	623b      	str	r3, [r7, #32]
      break;
 8004b88:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004b8a:	6a3b      	ldr	r3, [r7, #32]
}
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	3728      	adds	r7, #40	; 0x28
 8004b90:	46bd      	mov	sp, r7
 8004b92:	bc90      	pop	{r4, r7}
 8004b94:	4770      	bx	lr
 8004b96:	bf00      	nop
 8004b98:	0800d838 	.word	0x0800d838
 8004b9c:	40021000 	.word	0x40021000
 8004ba0:	007a1200 	.word	0x007a1200
 8004ba4:	003d0900 	.word	0x003d0900

08004ba8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ba8:	b480      	push	{r7}
 8004baa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004bac:	4b02      	ldr	r3, [pc, #8]	; (8004bb8 <HAL_RCC_GetHCLKFreq+0x10>)
 8004bae:	681b      	ldr	r3, [r3, #0]
}
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	bc80      	pop	{r7}
 8004bb6:	4770      	bx	lr
 8004bb8:	20000014 	.word	0x20000014

08004bbc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004bc0:	f7ff fff2 	bl	8004ba8 <HAL_RCC_GetHCLKFreq>
 8004bc4:	4602      	mov	r2, r0
 8004bc6:	4b05      	ldr	r3, [pc, #20]	; (8004bdc <HAL_RCC_GetPCLK1Freq+0x20>)
 8004bc8:	685b      	ldr	r3, [r3, #4]
 8004bca:	0a1b      	lsrs	r3, r3, #8
 8004bcc:	f003 0307 	and.w	r3, r3, #7
 8004bd0:	4903      	ldr	r1, [pc, #12]	; (8004be0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004bd2:	5ccb      	ldrb	r3, [r1, r3]
 8004bd4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004bd8:	4618      	mov	r0, r3
 8004bda:	bd80      	pop	{r7, pc}
 8004bdc:	40021000 	.word	0x40021000
 8004be0:	0800d8a0 	.word	0x0800d8a0

08004be4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004be8:	f7ff ffde 	bl	8004ba8 <HAL_RCC_GetHCLKFreq>
 8004bec:	4602      	mov	r2, r0
 8004bee:	4b05      	ldr	r3, [pc, #20]	; (8004c04 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004bf0:	685b      	ldr	r3, [r3, #4]
 8004bf2:	0adb      	lsrs	r3, r3, #11
 8004bf4:	f003 0307 	and.w	r3, r3, #7
 8004bf8:	4903      	ldr	r1, [pc, #12]	; (8004c08 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004bfa:	5ccb      	ldrb	r3, [r1, r3]
 8004bfc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c00:	4618      	mov	r0, r3
 8004c02:	bd80      	pop	{r7, pc}
 8004c04:	40021000 	.word	0x40021000
 8004c08:	0800d8a0 	.word	0x0800d8a0

08004c0c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	b085      	sub	sp, #20
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004c14:	4b0a      	ldr	r3, [pc, #40]	; (8004c40 <RCC_Delay+0x34>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4a0a      	ldr	r2, [pc, #40]	; (8004c44 <RCC_Delay+0x38>)
 8004c1a:	fba2 2303 	umull	r2, r3, r2, r3
 8004c1e:	0a5b      	lsrs	r3, r3, #9
 8004c20:	687a      	ldr	r2, [r7, #4]
 8004c22:	fb02 f303 	mul.w	r3, r2, r3
 8004c26:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004c28:	bf00      	nop
  }
  while (Delay --);
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	1e5a      	subs	r2, r3, #1
 8004c2e:	60fa      	str	r2, [r7, #12]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d1f9      	bne.n	8004c28 <RCC_Delay+0x1c>
}
 8004c34:	bf00      	nop
 8004c36:	bf00      	nop
 8004c38:	3714      	adds	r7, #20
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	bc80      	pop	{r7}
 8004c3e:	4770      	bx	lr
 8004c40:	20000014 	.word	0x20000014
 8004c44:	10624dd3 	.word	0x10624dd3

08004c48 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b082      	sub	sp, #8
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d101      	bne.n	8004c5a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004c56:	2301      	movs	r3, #1
 8004c58:	e076      	b.n	8004d48 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d108      	bne.n	8004c74 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c6a:	d009      	beq.n	8004c80 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2200      	movs	r2, #0
 8004c70:	61da      	str	r2, [r3, #28]
 8004c72:	e005      	b.n	8004c80 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2200      	movs	r2, #0
 8004c78:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2200      	movs	r2, #0
 8004c84:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004c8c:	b2db      	uxtb	r3, r3
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d106      	bne.n	8004ca0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2200      	movs	r2, #0
 8004c96:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004c9a:	6878      	ldr	r0, [r7, #4]
 8004c9c:	f7fe fcd6 	bl	800364c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2202      	movs	r2, #2
 8004ca4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	681a      	ldr	r2, [r3, #0]
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004cb6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	689b      	ldr	r3, [r3, #8]
 8004cc4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004cc8:	431a      	orrs	r2, r3
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	68db      	ldr	r3, [r3, #12]
 8004cce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004cd2:	431a      	orrs	r2, r3
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	691b      	ldr	r3, [r3, #16]
 8004cd8:	f003 0302 	and.w	r3, r3, #2
 8004cdc:	431a      	orrs	r2, r3
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	695b      	ldr	r3, [r3, #20]
 8004ce2:	f003 0301 	and.w	r3, r3, #1
 8004ce6:	431a      	orrs	r2, r3
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	699b      	ldr	r3, [r3, #24]
 8004cec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004cf0:	431a      	orrs	r2, r3
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	69db      	ldr	r3, [r3, #28]
 8004cf6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004cfa:	431a      	orrs	r2, r3
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6a1b      	ldr	r3, [r3, #32]
 8004d00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d04:	ea42 0103 	orr.w	r1, r2, r3
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d0c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	430a      	orrs	r2, r1
 8004d16:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	699b      	ldr	r3, [r3, #24]
 8004d1c:	0c1a      	lsrs	r2, r3, #16
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f002 0204 	and.w	r2, r2, #4
 8004d26:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	69da      	ldr	r2, [r3, #28]
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004d36:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2201      	movs	r2, #1
 8004d42:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004d46:	2300      	movs	r3, #0
}
 8004d48:	4618      	mov	r0, r3
 8004d4a:	3708      	adds	r7, #8
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	bd80      	pop	{r7, pc}

08004d50 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b088      	sub	sp, #32
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	60f8      	str	r0, [r7, #12]
 8004d58:	60b9      	str	r1, [r7, #8]
 8004d5a:	603b      	str	r3, [r7, #0]
 8004d5c:	4613      	mov	r3, r2
 8004d5e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004d60:	2300      	movs	r3, #0
 8004d62:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004d6a:	2b01      	cmp	r3, #1
 8004d6c:	d101      	bne.n	8004d72 <HAL_SPI_Transmit+0x22>
 8004d6e:	2302      	movs	r3, #2
 8004d70:	e126      	b.n	8004fc0 <HAL_SPI_Transmit+0x270>
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	2201      	movs	r2, #1
 8004d76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004d7a:	f7fe ff17 	bl	8003bac <HAL_GetTick>
 8004d7e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004d80:	88fb      	ldrh	r3, [r7, #6]
 8004d82:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004d8a:	b2db      	uxtb	r3, r3
 8004d8c:	2b01      	cmp	r3, #1
 8004d8e:	d002      	beq.n	8004d96 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004d90:	2302      	movs	r3, #2
 8004d92:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004d94:	e10b      	b.n	8004fae <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004d96:	68bb      	ldr	r3, [r7, #8]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d002      	beq.n	8004da2 <HAL_SPI_Transmit+0x52>
 8004d9c:	88fb      	ldrh	r3, [r7, #6]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d102      	bne.n	8004da8 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004da2:	2301      	movs	r3, #1
 8004da4:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004da6:	e102      	b.n	8004fae <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	2203      	movs	r2, #3
 8004dac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	2200      	movs	r2, #0
 8004db4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	68ba      	ldr	r2, [r7, #8]
 8004dba:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	88fa      	ldrh	r2, [r7, #6]
 8004dc0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	88fa      	ldrh	r2, [r7, #6]
 8004dc6:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	2200      	movs	r2, #0
 8004dcc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	2200      	movs	r2, #0
 8004dde:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	2200      	movs	r2, #0
 8004de4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	689b      	ldr	r3, [r3, #8]
 8004dea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004dee:	d10f      	bne.n	8004e10 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	681a      	ldr	r2, [r3, #0]
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004dfe:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	681a      	ldr	r2, [r3, #0]
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004e0e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e1a:	2b40      	cmp	r3, #64	; 0x40
 8004e1c:	d007      	beq.n	8004e2e <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	681a      	ldr	r2, [r3, #0]
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004e2c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	68db      	ldr	r3, [r3, #12]
 8004e32:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e36:	d14b      	bne.n	8004ed0 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	685b      	ldr	r3, [r3, #4]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d002      	beq.n	8004e46 <HAL_SPI_Transmit+0xf6>
 8004e40:	8afb      	ldrh	r3, [r7, #22]
 8004e42:	2b01      	cmp	r3, #1
 8004e44:	d13e      	bne.n	8004ec4 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e4a:	881a      	ldrh	r2, [r3, #0]
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e56:	1c9a      	adds	r2, r3, #2
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e60:	b29b      	uxth	r3, r3
 8004e62:	3b01      	subs	r3, #1
 8004e64:	b29a      	uxth	r2, r3
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004e6a:	e02b      	b.n	8004ec4 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	689b      	ldr	r3, [r3, #8]
 8004e72:	f003 0302 	and.w	r3, r3, #2
 8004e76:	2b02      	cmp	r3, #2
 8004e78:	d112      	bne.n	8004ea0 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e7e:	881a      	ldrh	r2, [r3, #0]
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e8a:	1c9a      	adds	r2, r3, #2
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e94:	b29b      	uxth	r3, r3
 8004e96:	3b01      	subs	r3, #1
 8004e98:	b29a      	uxth	r2, r3
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	86da      	strh	r2, [r3, #54]	; 0x36
 8004e9e:	e011      	b.n	8004ec4 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004ea0:	f7fe fe84 	bl	8003bac <HAL_GetTick>
 8004ea4:	4602      	mov	r2, r0
 8004ea6:	69bb      	ldr	r3, [r7, #24]
 8004ea8:	1ad3      	subs	r3, r2, r3
 8004eaa:	683a      	ldr	r2, [r7, #0]
 8004eac:	429a      	cmp	r2, r3
 8004eae:	d803      	bhi.n	8004eb8 <HAL_SPI_Transmit+0x168>
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004eb6:	d102      	bne.n	8004ebe <HAL_SPI_Transmit+0x16e>
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d102      	bne.n	8004ec4 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004ebe:	2303      	movs	r3, #3
 8004ec0:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004ec2:	e074      	b.n	8004fae <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ec8:	b29b      	uxth	r3, r3
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d1ce      	bne.n	8004e6c <HAL_SPI_Transmit+0x11c>
 8004ece:	e04c      	b.n	8004f6a <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	685b      	ldr	r3, [r3, #4]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d002      	beq.n	8004ede <HAL_SPI_Transmit+0x18e>
 8004ed8:	8afb      	ldrh	r3, [r7, #22]
 8004eda:	2b01      	cmp	r3, #1
 8004edc:	d140      	bne.n	8004f60 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	330c      	adds	r3, #12
 8004ee8:	7812      	ldrb	r2, [r2, #0]
 8004eea:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ef0:	1c5a      	adds	r2, r3, #1
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004efa:	b29b      	uxth	r3, r3
 8004efc:	3b01      	subs	r3, #1
 8004efe:	b29a      	uxth	r2, r3
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004f04:	e02c      	b.n	8004f60 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	689b      	ldr	r3, [r3, #8]
 8004f0c:	f003 0302 	and.w	r3, r3, #2
 8004f10:	2b02      	cmp	r3, #2
 8004f12:	d113      	bne.n	8004f3c <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	330c      	adds	r3, #12
 8004f1e:	7812      	ldrb	r2, [r2, #0]
 8004f20:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f26:	1c5a      	adds	r2, r3, #1
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f30:	b29b      	uxth	r3, r3
 8004f32:	3b01      	subs	r3, #1
 8004f34:	b29a      	uxth	r2, r3
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	86da      	strh	r2, [r3, #54]	; 0x36
 8004f3a:	e011      	b.n	8004f60 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004f3c:	f7fe fe36 	bl	8003bac <HAL_GetTick>
 8004f40:	4602      	mov	r2, r0
 8004f42:	69bb      	ldr	r3, [r7, #24]
 8004f44:	1ad3      	subs	r3, r2, r3
 8004f46:	683a      	ldr	r2, [r7, #0]
 8004f48:	429a      	cmp	r2, r3
 8004f4a:	d803      	bhi.n	8004f54 <HAL_SPI_Transmit+0x204>
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f52:	d102      	bne.n	8004f5a <HAL_SPI_Transmit+0x20a>
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d102      	bne.n	8004f60 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004f5a:	2303      	movs	r3, #3
 8004f5c:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004f5e:	e026      	b.n	8004fae <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f64:	b29b      	uxth	r3, r3
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d1cd      	bne.n	8004f06 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004f6a:	69ba      	ldr	r2, [r7, #24]
 8004f6c:	6839      	ldr	r1, [r7, #0]
 8004f6e:	68f8      	ldr	r0, [r7, #12]
 8004f70:	f000 fbc4 	bl	80056fc <SPI_EndRxTxTransaction>
 8004f74:	4603      	mov	r3, r0
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d002      	beq.n	8004f80 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	2220      	movs	r2, #32
 8004f7e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	689b      	ldr	r3, [r3, #8]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d10a      	bne.n	8004f9e <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004f88:	2300      	movs	r3, #0
 8004f8a:	613b      	str	r3, [r7, #16]
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	68db      	ldr	r3, [r3, #12]
 8004f92:	613b      	str	r3, [r7, #16]
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	689b      	ldr	r3, [r3, #8]
 8004f9a:	613b      	str	r3, [r7, #16]
 8004f9c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d002      	beq.n	8004fac <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	77fb      	strb	r3, [r7, #31]
 8004faa:	e000      	b.n	8004fae <HAL_SPI_Transmit+0x25e>
  }

error:
 8004fac:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	2201      	movs	r2, #1
 8004fb2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	2200      	movs	r2, #0
 8004fba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004fbe:	7ffb      	ldrb	r3, [r7, #31]
}
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	3720      	adds	r7, #32
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	bd80      	pop	{r7, pc}

08004fc8 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b088      	sub	sp, #32
 8004fcc:	af02      	add	r7, sp, #8
 8004fce:	60f8      	str	r0, [r7, #12]
 8004fd0:	60b9      	str	r1, [r7, #8]
 8004fd2:	603b      	str	r3, [r7, #0]
 8004fd4:	4613      	mov	r3, r2
 8004fd6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004fd8:	2300      	movs	r3, #0
 8004fda:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	685b      	ldr	r3, [r3, #4]
 8004fe0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004fe4:	d112      	bne.n	800500c <HAL_SPI_Receive+0x44>
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	689b      	ldr	r3, [r3, #8]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d10e      	bne.n	800500c <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	2204      	movs	r2, #4
 8004ff2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004ff6:	88fa      	ldrh	r2, [r7, #6]
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	9300      	str	r3, [sp, #0]
 8004ffc:	4613      	mov	r3, r2
 8004ffe:	68ba      	ldr	r2, [r7, #8]
 8005000:	68b9      	ldr	r1, [r7, #8]
 8005002:	68f8      	ldr	r0, [r7, #12]
 8005004:	f000 f8f1 	bl	80051ea <HAL_SPI_TransmitReceive>
 8005008:	4603      	mov	r3, r0
 800500a:	e0ea      	b.n	80051e2 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005012:	2b01      	cmp	r3, #1
 8005014:	d101      	bne.n	800501a <HAL_SPI_Receive+0x52>
 8005016:	2302      	movs	r3, #2
 8005018:	e0e3      	b.n	80051e2 <HAL_SPI_Receive+0x21a>
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	2201      	movs	r2, #1
 800501e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005022:	f7fe fdc3 	bl	8003bac <HAL_GetTick>
 8005026:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800502e:	b2db      	uxtb	r3, r3
 8005030:	2b01      	cmp	r3, #1
 8005032:	d002      	beq.n	800503a <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8005034:	2302      	movs	r3, #2
 8005036:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005038:	e0ca      	b.n	80051d0 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800503a:	68bb      	ldr	r3, [r7, #8]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d002      	beq.n	8005046 <HAL_SPI_Receive+0x7e>
 8005040:	88fb      	ldrh	r3, [r7, #6]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d102      	bne.n	800504c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005046:	2301      	movs	r3, #1
 8005048:	75fb      	strb	r3, [r7, #23]
    goto error;
 800504a:	e0c1      	b.n	80051d0 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	2204      	movs	r2, #4
 8005050:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	2200      	movs	r2, #0
 8005058:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	68ba      	ldr	r2, [r7, #8]
 800505e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	88fa      	ldrh	r2, [r7, #6]
 8005064:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	88fa      	ldrh	r2, [r7, #6]
 800506a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	2200      	movs	r2, #0
 8005070:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	2200      	movs	r2, #0
 8005076:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	2200      	movs	r2, #0
 800507c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	2200      	movs	r2, #0
 8005082:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	2200      	movs	r2, #0
 8005088:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	689b      	ldr	r3, [r3, #8]
 800508e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005092:	d10f      	bne.n	80050b4 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	681a      	ldr	r2, [r3, #0]
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80050a2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	681a      	ldr	r2, [r3, #0]
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80050b2:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050be:	2b40      	cmp	r3, #64	; 0x40
 80050c0:	d007      	beq.n	80050d2 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	681a      	ldr	r2, [r3, #0]
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80050d0:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	68db      	ldr	r3, [r3, #12]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d162      	bne.n	80051a0 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80050da:	e02e      	b.n	800513a <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	689b      	ldr	r3, [r3, #8]
 80050e2:	f003 0301 	and.w	r3, r3, #1
 80050e6:	2b01      	cmp	r3, #1
 80050e8:	d115      	bne.n	8005116 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f103 020c 	add.w	r2, r3, #12
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050f6:	7812      	ldrb	r2, [r2, #0]
 80050f8:	b2d2      	uxtb	r2, r2
 80050fa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005100:	1c5a      	adds	r2, r3, #1
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800510a:	b29b      	uxth	r3, r3
 800510c:	3b01      	subs	r3, #1
 800510e:	b29a      	uxth	r2, r3
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005114:	e011      	b.n	800513a <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005116:	f7fe fd49 	bl	8003bac <HAL_GetTick>
 800511a:	4602      	mov	r2, r0
 800511c:	693b      	ldr	r3, [r7, #16]
 800511e:	1ad3      	subs	r3, r2, r3
 8005120:	683a      	ldr	r2, [r7, #0]
 8005122:	429a      	cmp	r2, r3
 8005124:	d803      	bhi.n	800512e <HAL_SPI_Receive+0x166>
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	f1b3 3fff 	cmp.w	r3, #4294967295
 800512c:	d102      	bne.n	8005134 <HAL_SPI_Receive+0x16c>
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d102      	bne.n	800513a <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8005134:	2303      	movs	r3, #3
 8005136:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005138:	e04a      	b.n	80051d0 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800513e:	b29b      	uxth	r3, r3
 8005140:	2b00      	cmp	r3, #0
 8005142:	d1cb      	bne.n	80050dc <HAL_SPI_Receive+0x114>
 8005144:	e031      	b.n	80051aa <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	689b      	ldr	r3, [r3, #8]
 800514c:	f003 0301 	and.w	r3, r3, #1
 8005150:	2b01      	cmp	r3, #1
 8005152:	d113      	bne.n	800517c <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	68da      	ldr	r2, [r3, #12]
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800515e:	b292      	uxth	r2, r2
 8005160:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005166:	1c9a      	adds	r2, r3, #2
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005170:	b29b      	uxth	r3, r3
 8005172:	3b01      	subs	r3, #1
 8005174:	b29a      	uxth	r2, r3
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	87da      	strh	r2, [r3, #62]	; 0x3e
 800517a:	e011      	b.n	80051a0 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800517c:	f7fe fd16 	bl	8003bac <HAL_GetTick>
 8005180:	4602      	mov	r2, r0
 8005182:	693b      	ldr	r3, [r7, #16]
 8005184:	1ad3      	subs	r3, r2, r3
 8005186:	683a      	ldr	r2, [r7, #0]
 8005188:	429a      	cmp	r2, r3
 800518a:	d803      	bhi.n	8005194 <HAL_SPI_Receive+0x1cc>
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005192:	d102      	bne.n	800519a <HAL_SPI_Receive+0x1d2>
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d102      	bne.n	80051a0 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800519a:	2303      	movs	r3, #3
 800519c:	75fb      	strb	r3, [r7, #23]
          goto error;
 800519e:	e017      	b.n	80051d0 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051a4:	b29b      	uxth	r3, r3
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d1cd      	bne.n	8005146 <HAL_SPI_Receive+0x17e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80051aa:	693a      	ldr	r2, [r7, #16]
 80051ac:	6839      	ldr	r1, [r7, #0]
 80051ae:	68f8      	ldr	r0, [r7, #12]
 80051b0:	f000 fa52 	bl	8005658 <SPI_EndRxTransaction>
 80051b4:	4603      	mov	r3, r0
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d002      	beq.n	80051c0 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	2220      	movs	r2, #32
 80051be:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d002      	beq.n	80051ce <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80051c8:	2301      	movs	r3, #1
 80051ca:	75fb      	strb	r3, [r7, #23]
 80051cc:	e000      	b.n	80051d0 <HAL_SPI_Receive+0x208>
  }

error :
 80051ce:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	2201      	movs	r2, #1
 80051d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	2200      	movs	r2, #0
 80051dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80051e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80051e2:	4618      	mov	r0, r3
 80051e4:	3718      	adds	r7, #24
 80051e6:	46bd      	mov	sp, r7
 80051e8:	bd80      	pop	{r7, pc}

080051ea <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80051ea:	b580      	push	{r7, lr}
 80051ec:	b08c      	sub	sp, #48	; 0x30
 80051ee:	af00      	add	r7, sp, #0
 80051f0:	60f8      	str	r0, [r7, #12]
 80051f2:	60b9      	str	r1, [r7, #8]
 80051f4:	607a      	str	r2, [r7, #4]
 80051f6:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80051f8:	2301      	movs	r3, #1
 80051fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80051fc:	2300      	movs	r3, #0
 80051fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005208:	2b01      	cmp	r3, #1
 800520a:	d101      	bne.n	8005210 <HAL_SPI_TransmitReceive+0x26>
 800520c:	2302      	movs	r3, #2
 800520e:	e18a      	b.n	8005526 <HAL_SPI_TransmitReceive+0x33c>
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	2201      	movs	r2, #1
 8005214:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005218:	f7fe fcc8 	bl	8003bac <HAL_GetTick>
 800521c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005224:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	685b      	ldr	r3, [r3, #4]
 800522c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800522e:	887b      	ldrh	r3, [r7, #2]
 8005230:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005232:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005236:	2b01      	cmp	r3, #1
 8005238:	d00f      	beq.n	800525a <HAL_SPI_TransmitReceive+0x70>
 800523a:	69fb      	ldr	r3, [r7, #28]
 800523c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005240:	d107      	bne.n	8005252 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	689b      	ldr	r3, [r3, #8]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d103      	bne.n	8005252 <HAL_SPI_TransmitReceive+0x68>
 800524a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800524e:	2b04      	cmp	r3, #4
 8005250:	d003      	beq.n	800525a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005252:	2302      	movs	r3, #2
 8005254:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005258:	e15b      	b.n	8005512 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800525a:	68bb      	ldr	r3, [r7, #8]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d005      	beq.n	800526c <HAL_SPI_TransmitReceive+0x82>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d002      	beq.n	800526c <HAL_SPI_TransmitReceive+0x82>
 8005266:	887b      	ldrh	r3, [r7, #2]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d103      	bne.n	8005274 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800526c:	2301      	movs	r3, #1
 800526e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005272:	e14e      	b.n	8005512 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800527a:	b2db      	uxtb	r3, r3
 800527c:	2b04      	cmp	r3, #4
 800527e:	d003      	beq.n	8005288 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	2205      	movs	r2, #5
 8005284:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	2200      	movs	r2, #0
 800528c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	687a      	ldr	r2, [r7, #4]
 8005292:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	887a      	ldrh	r2, [r7, #2]
 8005298:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	887a      	ldrh	r2, [r7, #2]
 800529e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	68ba      	ldr	r2, [r7, #8]
 80052a4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	887a      	ldrh	r2, [r7, #2]
 80052aa:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	887a      	ldrh	r2, [r7, #2]
 80052b0:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	2200      	movs	r2, #0
 80052b6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	2200      	movs	r2, #0
 80052bc:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052c8:	2b40      	cmp	r3, #64	; 0x40
 80052ca:	d007      	beq.n	80052dc <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	681a      	ldr	r2, [r3, #0]
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80052da:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	68db      	ldr	r3, [r3, #12]
 80052e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80052e4:	d178      	bne.n	80053d8 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	685b      	ldr	r3, [r3, #4]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d002      	beq.n	80052f4 <HAL_SPI_TransmitReceive+0x10a>
 80052ee:	8b7b      	ldrh	r3, [r7, #26]
 80052f0:	2b01      	cmp	r3, #1
 80052f2:	d166      	bne.n	80053c2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052f8:	881a      	ldrh	r2, [r3, #0]
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005304:	1c9a      	adds	r2, r3, #2
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800530e:	b29b      	uxth	r3, r3
 8005310:	3b01      	subs	r3, #1
 8005312:	b29a      	uxth	r2, r3
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005318:	e053      	b.n	80053c2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	689b      	ldr	r3, [r3, #8]
 8005320:	f003 0302 	and.w	r3, r3, #2
 8005324:	2b02      	cmp	r3, #2
 8005326:	d11b      	bne.n	8005360 <HAL_SPI_TransmitReceive+0x176>
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800532c:	b29b      	uxth	r3, r3
 800532e:	2b00      	cmp	r3, #0
 8005330:	d016      	beq.n	8005360 <HAL_SPI_TransmitReceive+0x176>
 8005332:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005334:	2b01      	cmp	r3, #1
 8005336:	d113      	bne.n	8005360 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800533c:	881a      	ldrh	r2, [r3, #0]
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005348:	1c9a      	adds	r2, r3, #2
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005352:	b29b      	uxth	r3, r3
 8005354:	3b01      	subs	r3, #1
 8005356:	b29a      	uxth	r2, r3
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800535c:	2300      	movs	r3, #0
 800535e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	689b      	ldr	r3, [r3, #8]
 8005366:	f003 0301 	and.w	r3, r3, #1
 800536a:	2b01      	cmp	r3, #1
 800536c:	d119      	bne.n	80053a2 <HAL_SPI_TransmitReceive+0x1b8>
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005372:	b29b      	uxth	r3, r3
 8005374:	2b00      	cmp	r3, #0
 8005376:	d014      	beq.n	80053a2 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	68da      	ldr	r2, [r3, #12]
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005382:	b292      	uxth	r2, r2
 8005384:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800538a:	1c9a      	adds	r2, r3, #2
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005394:	b29b      	uxth	r3, r3
 8005396:	3b01      	subs	r3, #1
 8005398:	b29a      	uxth	r2, r3
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800539e:	2301      	movs	r3, #1
 80053a0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80053a2:	f7fe fc03 	bl	8003bac <HAL_GetTick>
 80053a6:	4602      	mov	r2, r0
 80053a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053aa:	1ad3      	subs	r3, r2, r3
 80053ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80053ae:	429a      	cmp	r2, r3
 80053b0:	d807      	bhi.n	80053c2 <HAL_SPI_TransmitReceive+0x1d8>
 80053b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053b8:	d003      	beq.n	80053c2 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80053ba:	2303      	movs	r3, #3
 80053bc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80053c0:	e0a7      	b.n	8005512 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80053c6:	b29b      	uxth	r3, r3
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d1a6      	bne.n	800531a <HAL_SPI_TransmitReceive+0x130>
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053d0:	b29b      	uxth	r3, r3
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d1a1      	bne.n	800531a <HAL_SPI_TransmitReceive+0x130>
 80053d6:	e07c      	b.n	80054d2 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	685b      	ldr	r3, [r3, #4]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d002      	beq.n	80053e6 <HAL_SPI_TransmitReceive+0x1fc>
 80053e0:	8b7b      	ldrh	r3, [r7, #26]
 80053e2:	2b01      	cmp	r3, #1
 80053e4:	d16b      	bne.n	80054be <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	330c      	adds	r3, #12
 80053f0:	7812      	ldrb	r2, [r2, #0]
 80053f2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053f8:	1c5a      	adds	r2, r3, #1
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005402:	b29b      	uxth	r3, r3
 8005404:	3b01      	subs	r3, #1
 8005406:	b29a      	uxth	r2, r3
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800540c:	e057      	b.n	80054be <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	689b      	ldr	r3, [r3, #8]
 8005414:	f003 0302 	and.w	r3, r3, #2
 8005418:	2b02      	cmp	r3, #2
 800541a:	d11c      	bne.n	8005456 <HAL_SPI_TransmitReceive+0x26c>
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005420:	b29b      	uxth	r3, r3
 8005422:	2b00      	cmp	r3, #0
 8005424:	d017      	beq.n	8005456 <HAL_SPI_TransmitReceive+0x26c>
 8005426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005428:	2b01      	cmp	r3, #1
 800542a:	d114      	bne.n	8005456 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	330c      	adds	r3, #12
 8005436:	7812      	ldrb	r2, [r2, #0]
 8005438:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800543e:	1c5a      	adds	r2, r3, #1
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005448:	b29b      	uxth	r3, r3
 800544a:	3b01      	subs	r3, #1
 800544c:	b29a      	uxth	r2, r3
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005452:	2300      	movs	r3, #0
 8005454:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	689b      	ldr	r3, [r3, #8]
 800545c:	f003 0301 	and.w	r3, r3, #1
 8005460:	2b01      	cmp	r3, #1
 8005462:	d119      	bne.n	8005498 <HAL_SPI_TransmitReceive+0x2ae>
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005468:	b29b      	uxth	r3, r3
 800546a:	2b00      	cmp	r3, #0
 800546c:	d014      	beq.n	8005498 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	68da      	ldr	r2, [r3, #12]
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005478:	b2d2      	uxtb	r2, r2
 800547a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005480:	1c5a      	adds	r2, r3, #1
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800548a:	b29b      	uxth	r3, r3
 800548c:	3b01      	subs	r3, #1
 800548e:	b29a      	uxth	r2, r3
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005494:	2301      	movs	r3, #1
 8005496:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005498:	f7fe fb88 	bl	8003bac <HAL_GetTick>
 800549c:	4602      	mov	r2, r0
 800549e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054a0:	1ad3      	subs	r3, r2, r3
 80054a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80054a4:	429a      	cmp	r2, r3
 80054a6:	d803      	bhi.n	80054b0 <HAL_SPI_TransmitReceive+0x2c6>
 80054a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054ae:	d102      	bne.n	80054b6 <HAL_SPI_TransmitReceive+0x2cc>
 80054b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d103      	bne.n	80054be <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80054b6:	2303      	movs	r3, #3
 80054b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80054bc:	e029      	b.n	8005512 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80054c2:	b29b      	uxth	r3, r3
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d1a2      	bne.n	800540e <HAL_SPI_TransmitReceive+0x224>
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80054cc:	b29b      	uxth	r3, r3
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d19d      	bne.n	800540e <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80054d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054d4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80054d6:	68f8      	ldr	r0, [r7, #12]
 80054d8:	f000 f910 	bl	80056fc <SPI_EndRxTxTransaction>
 80054dc:	4603      	mov	r3, r0
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d006      	beq.n	80054f0 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80054e2:	2301      	movs	r3, #1
 80054e4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	2220      	movs	r2, #32
 80054ec:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80054ee:	e010      	b.n	8005512 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	689b      	ldr	r3, [r3, #8]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d10b      	bne.n	8005510 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80054f8:	2300      	movs	r3, #0
 80054fa:	617b      	str	r3, [r7, #20]
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	68db      	ldr	r3, [r3, #12]
 8005502:	617b      	str	r3, [r7, #20]
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	689b      	ldr	r3, [r3, #8]
 800550a:	617b      	str	r3, [r7, #20]
 800550c:	697b      	ldr	r3, [r7, #20]
 800550e:	e000      	b.n	8005512 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005510:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	2201      	movs	r2, #1
 8005516:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	2200      	movs	r2, #0
 800551e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005522:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005526:	4618      	mov	r0, r3
 8005528:	3730      	adds	r7, #48	; 0x30
 800552a:	46bd      	mov	sp, r7
 800552c:	bd80      	pop	{r7, pc}

0800552e <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800552e:	b480      	push	{r7}
 8005530:	b083      	sub	sp, #12
 8005532:	af00      	add	r7, sp, #0
 8005534:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800553c:	b2db      	uxtb	r3, r3
}
 800553e:	4618      	mov	r0, r3
 8005540:	370c      	adds	r7, #12
 8005542:	46bd      	mov	sp, r7
 8005544:	bc80      	pop	{r7}
 8005546:	4770      	bx	lr

08005548 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b088      	sub	sp, #32
 800554c:	af00      	add	r7, sp, #0
 800554e:	60f8      	str	r0, [r7, #12]
 8005550:	60b9      	str	r1, [r7, #8]
 8005552:	603b      	str	r3, [r7, #0]
 8005554:	4613      	mov	r3, r2
 8005556:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005558:	f7fe fb28 	bl	8003bac <HAL_GetTick>
 800555c:	4602      	mov	r2, r0
 800555e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005560:	1a9b      	subs	r3, r3, r2
 8005562:	683a      	ldr	r2, [r7, #0]
 8005564:	4413      	add	r3, r2
 8005566:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005568:	f7fe fb20 	bl	8003bac <HAL_GetTick>
 800556c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800556e:	4b39      	ldr	r3, [pc, #228]	; (8005654 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	015b      	lsls	r3, r3, #5
 8005574:	0d1b      	lsrs	r3, r3, #20
 8005576:	69fa      	ldr	r2, [r7, #28]
 8005578:	fb02 f303 	mul.w	r3, r2, r3
 800557c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800557e:	e054      	b.n	800562a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005586:	d050      	beq.n	800562a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005588:	f7fe fb10 	bl	8003bac <HAL_GetTick>
 800558c:	4602      	mov	r2, r0
 800558e:	69bb      	ldr	r3, [r7, #24]
 8005590:	1ad3      	subs	r3, r2, r3
 8005592:	69fa      	ldr	r2, [r7, #28]
 8005594:	429a      	cmp	r2, r3
 8005596:	d902      	bls.n	800559e <SPI_WaitFlagStateUntilTimeout+0x56>
 8005598:	69fb      	ldr	r3, [r7, #28]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d13d      	bne.n	800561a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	685a      	ldr	r2, [r3, #4]
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80055ac:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	685b      	ldr	r3, [r3, #4]
 80055b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80055b6:	d111      	bne.n	80055dc <SPI_WaitFlagStateUntilTimeout+0x94>
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	689b      	ldr	r3, [r3, #8]
 80055bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80055c0:	d004      	beq.n	80055cc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	689b      	ldr	r3, [r3, #8]
 80055c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055ca:	d107      	bne.n	80055dc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	681a      	ldr	r2, [r3, #0]
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80055da:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055e4:	d10f      	bne.n	8005606 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	681a      	ldr	r2, [r3, #0]
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80055f4:	601a      	str	r2, [r3, #0]
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	681a      	ldr	r2, [r3, #0]
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005604:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	2201      	movs	r2, #1
 800560a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	2200      	movs	r2, #0
 8005612:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005616:	2303      	movs	r3, #3
 8005618:	e017      	b.n	800564a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800561a:	697b      	ldr	r3, [r7, #20]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d101      	bne.n	8005624 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005620:	2300      	movs	r3, #0
 8005622:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005624:	697b      	ldr	r3, [r7, #20]
 8005626:	3b01      	subs	r3, #1
 8005628:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	689a      	ldr	r2, [r3, #8]
 8005630:	68bb      	ldr	r3, [r7, #8]
 8005632:	4013      	ands	r3, r2
 8005634:	68ba      	ldr	r2, [r7, #8]
 8005636:	429a      	cmp	r2, r3
 8005638:	bf0c      	ite	eq
 800563a:	2301      	moveq	r3, #1
 800563c:	2300      	movne	r3, #0
 800563e:	b2db      	uxtb	r3, r3
 8005640:	461a      	mov	r2, r3
 8005642:	79fb      	ldrb	r3, [r7, #7]
 8005644:	429a      	cmp	r2, r3
 8005646:	d19b      	bne.n	8005580 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005648:	2300      	movs	r3, #0
}
 800564a:	4618      	mov	r0, r3
 800564c:	3720      	adds	r7, #32
 800564e:	46bd      	mov	sp, r7
 8005650:	bd80      	pop	{r7, pc}
 8005652:	bf00      	nop
 8005654:	20000014 	.word	0x20000014

08005658 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b086      	sub	sp, #24
 800565c:	af02      	add	r7, sp, #8
 800565e:	60f8      	str	r0, [r7, #12]
 8005660:	60b9      	str	r1, [r7, #8]
 8005662:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	685b      	ldr	r3, [r3, #4]
 8005668:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800566c:	d111      	bne.n	8005692 <SPI_EndRxTransaction+0x3a>
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	689b      	ldr	r3, [r3, #8]
 8005672:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005676:	d004      	beq.n	8005682 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	689b      	ldr	r3, [r3, #8]
 800567c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005680:	d107      	bne.n	8005692 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	681a      	ldr	r2, [r3, #0]
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005690:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	685b      	ldr	r3, [r3, #4]
 8005696:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800569a:	d117      	bne.n	80056cc <SPI_EndRxTransaction+0x74>
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	689b      	ldr	r3, [r3, #8]
 80056a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056a4:	d112      	bne.n	80056cc <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	9300      	str	r3, [sp, #0]
 80056aa:	68bb      	ldr	r3, [r7, #8]
 80056ac:	2200      	movs	r2, #0
 80056ae:	2101      	movs	r1, #1
 80056b0:	68f8      	ldr	r0, [r7, #12]
 80056b2:	f7ff ff49 	bl	8005548 <SPI_WaitFlagStateUntilTimeout>
 80056b6:	4603      	mov	r3, r0
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d01a      	beq.n	80056f2 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056c0:	f043 0220 	orr.w	r2, r3, #32
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80056c8:	2303      	movs	r3, #3
 80056ca:	e013      	b.n	80056f4 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	9300      	str	r3, [sp, #0]
 80056d0:	68bb      	ldr	r3, [r7, #8]
 80056d2:	2200      	movs	r2, #0
 80056d4:	2180      	movs	r1, #128	; 0x80
 80056d6:	68f8      	ldr	r0, [r7, #12]
 80056d8:	f7ff ff36 	bl	8005548 <SPI_WaitFlagStateUntilTimeout>
 80056dc:	4603      	mov	r3, r0
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d007      	beq.n	80056f2 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056e6:	f043 0220 	orr.w	r2, r3, #32
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80056ee:	2303      	movs	r3, #3
 80056f0:	e000      	b.n	80056f4 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 80056f2:	2300      	movs	r3, #0
}
 80056f4:	4618      	mov	r0, r3
 80056f6:	3710      	adds	r7, #16
 80056f8:	46bd      	mov	sp, r7
 80056fa:	bd80      	pop	{r7, pc}

080056fc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b086      	sub	sp, #24
 8005700:	af02      	add	r7, sp, #8
 8005702:	60f8      	str	r0, [r7, #12]
 8005704:	60b9      	str	r1, [r7, #8]
 8005706:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	9300      	str	r3, [sp, #0]
 800570c:	68bb      	ldr	r3, [r7, #8]
 800570e:	2200      	movs	r2, #0
 8005710:	2180      	movs	r1, #128	; 0x80
 8005712:	68f8      	ldr	r0, [r7, #12]
 8005714:	f7ff ff18 	bl	8005548 <SPI_WaitFlagStateUntilTimeout>
 8005718:	4603      	mov	r3, r0
 800571a:	2b00      	cmp	r3, #0
 800571c:	d007      	beq.n	800572e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005722:	f043 0220 	orr.w	r2, r3, #32
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800572a:	2303      	movs	r3, #3
 800572c:	e000      	b.n	8005730 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800572e:	2300      	movs	r3, #0
}
 8005730:	4618      	mov	r0, r3
 8005732:	3710      	adds	r7, #16
 8005734:	46bd      	mov	sp, r7
 8005736:	bd80      	pop	{r7, pc}

08005738 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b082      	sub	sp, #8
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d101      	bne.n	800574a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005746:	2301      	movs	r3, #1
 8005748:	e041      	b.n	80057ce <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005750:	b2db      	uxtb	r3, r3
 8005752:	2b00      	cmp	r3, #0
 8005754:	d106      	bne.n	8005764 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2200      	movs	r2, #0
 800575a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800575e:	6878      	ldr	r0, [r7, #4]
 8005760:	f7fd fffa 	bl	8003758 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2202      	movs	r2, #2
 8005768:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681a      	ldr	r2, [r3, #0]
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	3304      	adds	r3, #4
 8005774:	4619      	mov	r1, r3
 8005776:	4610      	mov	r0, r2
 8005778:	f000 f93c 	bl	80059f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2201      	movs	r2, #1
 8005780:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2201      	movs	r2, #1
 8005788:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2201      	movs	r2, #1
 8005790:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2201      	movs	r2, #1
 8005798:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2201      	movs	r2, #1
 80057a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2201      	movs	r2, #1
 80057a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2201      	movs	r2, #1
 80057b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2201      	movs	r2, #1
 80057b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2201      	movs	r2, #1
 80057c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2201      	movs	r2, #1
 80057c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80057cc:	2300      	movs	r3, #0
}
 80057ce:	4618      	mov	r0, r3
 80057d0:	3708      	adds	r7, #8
 80057d2:	46bd      	mov	sp, r7
 80057d4:	bd80      	pop	{r7, pc}
	...

080057d8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80057d8:	b480      	push	{r7}
 80057da:	b085      	sub	sp, #20
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057e6:	b2db      	uxtb	r3, r3
 80057e8:	2b01      	cmp	r3, #1
 80057ea:	d001      	beq.n	80057f0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80057ec:	2301      	movs	r3, #1
 80057ee:	e032      	b.n	8005856 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2202      	movs	r2, #2
 80057f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	4a18      	ldr	r2, [pc, #96]	; (8005860 <HAL_TIM_Base_Start+0x88>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d00e      	beq.n	8005820 <HAL_TIM_Base_Start+0x48>
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800580a:	d009      	beq.n	8005820 <HAL_TIM_Base_Start+0x48>
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	4a14      	ldr	r2, [pc, #80]	; (8005864 <HAL_TIM_Base_Start+0x8c>)
 8005812:	4293      	cmp	r3, r2
 8005814:	d004      	beq.n	8005820 <HAL_TIM_Base_Start+0x48>
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	4a13      	ldr	r2, [pc, #76]	; (8005868 <HAL_TIM_Base_Start+0x90>)
 800581c:	4293      	cmp	r3, r2
 800581e:	d111      	bne.n	8005844 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	689b      	ldr	r3, [r3, #8]
 8005826:	f003 0307 	and.w	r3, r3, #7
 800582a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	2b06      	cmp	r3, #6
 8005830:	d010      	beq.n	8005854 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	681a      	ldr	r2, [r3, #0]
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f042 0201 	orr.w	r2, r2, #1
 8005840:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005842:	e007      	b.n	8005854 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	681a      	ldr	r2, [r3, #0]
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f042 0201 	orr.w	r2, r2, #1
 8005852:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005854:	2300      	movs	r3, #0
}
 8005856:	4618      	mov	r0, r3
 8005858:	3714      	adds	r7, #20
 800585a:	46bd      	mov	sp, r7
 800585c:	bc80      	pop	{r7}
 800585e:	4770      	bx	lr
 8005860:	40012c00 	.word	0x40012c00
 8005864:	40000400 	.word	0x40000400
 8005868:	40000800 	.word	0x40000800

0800586c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800586c:	b580      	push	{r7, lr}
 800586e:	b084      	sub	sp, #16
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
 8005874:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800587c:	2b01      	cmp	r3, #1
 800587e:	d101      	bne.n	8005884 <HAL_TIM_ConfigClockSource+0x18>
 8005880:	2302      	movs	r3, #2
 8005882:	e0b3      	b.n	80059ec <HAL_TIM_ConfigClockSource+0x180>
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2201      	movs	r2, #1
 8005888:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2202      	movs	r2, #2
 8005890:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	689b      	ldr	r3, [r3, #8]
 800589a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80058a2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80058aa:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	68fa      	ldr	r2, [r7, #12]
 80058b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80058bc:	d03e      	beq.n	800593c <HAL_TIM_ConfigClockSource+0xd0>
 80058be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80058c2:	f200 8087 	bhi.w	80059d4 <HAL_TIM_ConfigClockSource+0x168>
 80058c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058ca:	f000 8085 	beq.w	80059d8 <HAL_TIM_ConfigClockSource+0x16c>
 80058ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058d2:	d87f      	bhi.n	80059d4 <HAL_TIM_ConfigClockSource+0x168>
 80058d4:	2b70      	cmp	r3, #112	; 0x70
 80058d6:	d01a      	beq.n	800590e <HAL_TIM_ConfigClockSource+0xa2>
 80058d8:	2b70      	cmp	r3, #112	; 0x70
 80058da:	d87b      	bhi.n	80059d4 <HAL_TIM_ConfigClockSource+0x168>
 80058dc:	2b60      	cmp	r3, #96	; 0x60
 80058de:	d050      	beq.n	8005982 <HAL_TIM_ConfigClockSource+0x116>
 80058e0:	2b60      	cmp	r3, #96	; 0x60
 80058e2:	d877      	bhi.n	80059d4 <HAL_TIM_ConfigClockSource+0x168>
 80058e4:	2b50      	cmp	r3, #80	; 0x50
 80058e6:	d03c      	beq.n	8005962 <HAL_TIM_ConfigClockSource+0xf6>
 80058e8:	2b50      	cmp	r3, #80	; 0x50
 80058ea:	d873      	bhi.n	80059d4 <HAL_TIM_ConfigClockSource+0x168>
 80058ec:	2b40      	cmp	r3, #64	; 0x40
 80058ee:	d058      	beq.n	80059a2 <HAL_TIM_ConfigClockSource+0x136>
 80058f0:	2b40      	cmp	r3, #64	; 0x40
 80058f2:	d86f      	bhi.n	80059d4 <HAL_TIM_ConfigClockSource+0x168>
 80058f4:	2b30      	cmp	r3, #48	; 0x30
 80058f6:	d064      	beq.n	80059c2 <HAL_TIM_ConfigClockSource+0x156>
 80058f8:	2b30      	cmp	r3, #48	; 0x30
 80058fa:	d86b      	bhi.n	80059d4 <HAL_TIM_ConfigClockSource+0x168>
 80058fc:	2b20      	cmp	r3, #32
 80058fe:	d060      	beq.n	80059c2 <HAL_TIM_ConfigClockSource+0x156>
 8005900:	2b20      	cmp	r3, #32
 8005902:	d867      	bhi.n	80059d4 <HAL_TIM_ConfigClockSource+0x168>
 8005904:	2b00      	cmp	r3, #0
 8005906:	d05c      	beq.n	80059c2 <HAL_TIM_ConfigClockSource+0x156>
 8005908:	2b10      	cmp	r3, #16
 800590a:	d05a      	beq.n	80059c2 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800590c:	e062      	b.n	80059d4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6818      	ldr	r0, [r3, #0]
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	6899      	ldr	r1, [r3, #8]
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	685a      	ldr	r2, [r3, #4]
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	68db      	ldr	r3, [r3, #12]
 800591e:	f000 f942 	bl	8005ba6 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	689b      	ldr	r3, [r3, #8]
 8005928:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005930:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	68fa      	ldr	r2, [r7, #12]
 8005938:	609a      	str	r2, [r3, #8]
      break;
 800593a:	e04e      	b.n	80059da <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6818      	ldr	r0, [r3, #0]
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	6899      	ldr	r1, [r3, #8]
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	685a      	ldr	r2, [r3, #4]
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	68db      	ldr	r3, [r3, #12]
 800594c:	f000 f92b 	bl	8005ba6 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	689a      	ldr	r2, [r3, #8]
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800595e:	609a      	str	r2, [r3, #8]
      break;
 8005960:	e03b      	b.n	80059da <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6818      	ldr	r0, [r3, #0]
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	6859      	ldr	r1, [r3, #4]
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	68db      	ldr	r3, [r3, #12]
 800596e:	461a      	mov	r2, r3
 8005970:	f000 f8a2 	bl	8005ab8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	2150      	movs	r1, #80	; 0x50
 800597a:	4618      	mov	r0, r3
 800597c:	f000 f8f9 	bl	8005b72 <TIM_ITRx_SetConfig>
      break;
 8005980:	e02b      	b.n	80059da <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6818      	ldr	r0, [r3, #0]
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	6859      	ldr	r1, [r3, #4]
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	68db      	ldr	r3, [r3, #12]
 800598e:	461a      	mov	r2, r3
 8005990:	f000 f8c0 	bl	8005b14 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	2160      	movs	r1, #96	; 0x60
 800599a:	4618      	mov	r0, r3
 800599c:	f000 f8e9 	bl	8005b72 <TIM_ITRx_SetConfig>
      break;
 80059a0:	e01b      	b.n	80059da <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6818      	ldr	r0, [r3, #0]
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	6859      	ldr	r1, [r3, #4]
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	68db      	ldr	r3, [r3, #12]
 80059ae:	461a      	mov	r2, r3
 80059b0:	f000 f882 	bl	8005ab8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	2140      	movs	r1, #64	; 0x40
 80059ba:	4618      	mov	r0, r3
 80059bc:	f000 f8d9 	bl	8005b72 <TIM_ITRx_SetConfig>
      break;
 80059c0:	e00b      	b.n	80059da <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681a      	ldr	r2, [r3, #0]
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	4619      	mov	r1, r3
 80059cc:	4610      	mov	r0, r2
 80059ce:	f000 f8d0 	bl	8005b72 <TIM_ITRx_SetConfig>
        break;
 80059d2:	e002      	b.n	80059da <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80059d4:	bf00      	nop
 80059d6:	e000      	b.n	80059da <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80059d8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	2201      	movs	r2, #1
 80059de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2200      	movs	r2, #0
 80059e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80059ea:	2300      	movs	r3, #0
}
 80059ec:	4618      	mov	r0, r3
 80059ee:	3710      	adds	r7, #16
 80059f0:	46bd      	mov	sp, r7
 80059f2:	bd80      	pop	{r7, pc}

080059f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80059f4:	b480      	push	{r7}
 80059f6:	b085      	sub	sp, #20
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
 80059fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	4a29      	ldr	r2, [pc, #164]	; (8005aac <TIM_Base_SetConfig+0xb8>)
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	d00b      	beq.n	8005a24 <TIM_Base_SetConfig+0x30>
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a12:	d007      	beq.n	8005a24 <TIM_Base_SetConfig+0x30>
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	4a26      	ldr	r2, [pc, #152]	; (8005ab0 <TIM_Base_SetConfig+0xbc>)
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	d003      	beq.n	8005a24 <TIM_Base_SetConfig+0x30>
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	4a25      	ldr	r2, [pc, #148]	; (8005ab4 <TIM_Base_SetConfig+0xc0>)
 8005a20:	4293      	cmp	r3, r2
 8005a22:	d108      	bne.n	8005a36 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a2a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	685b      	ldr	r3, [r3, #4]
 8005a30:	68fa      	ldr	r2, [r7, #12]
 8005a32:	4313      	orrs	r3, r2
 8005a34:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	4a1c      	ldr	r2, [pc, #112]	; (8005aac <TIM_Base_SetConfig+0xb8>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d00b      	beq.n	8005a56 <TIM_Base_SetConfig+0x62>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a44:	d007      	beq.n	8005a56 <TIM_Base_SetConfig+0x62>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	4a19      	ldr	r2, [pc, #100]	; (8005ab0 <TIM_Base_SetConfig+0xbc>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d003      	beq.n	8005a56 <TIM_Base_SetConfig+0x62>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	4a18      	ldr	r2, [pc, #96]	; (8005ab4 <TIM_Base_SetConfig+0xc0>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d108      	bne.n	8005a68 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	68db      	ldr	r3, [r3, #12]
 8005a62:	68fa      	ldr	r2, [r7, #12]
 8005a64:	4313      	orrs	r3, r2
 8005a66:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	695b      	ldr	r3, [r3, #20]
 8005a72:	4313      	orrs	r3, r2
 8005a74:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	68fa      	ldr	r2, [r7, #12]
 8005a7a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	689a      	ldr	r2, [r3, #8]
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	681a      	ldr	r2, [r3, #0]
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	4a07      	ldr	r2, [pc, #28]	; (8005aac <TIM_Base_SetConfig+0xb8>)
 8005a90:	4293      	cmp	r3, r2
 8005a92:	d103      	bne.n	8005a9c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	691a      	ldr	r2, [r3, #16]
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2201      	movs	r2, #1
 8005aa0:	615a      	str	r2, [r3, #20]
}
 8005aa2:	bf00      	nop
 8005aa4:	3714      	adds	r7, #20
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	bc80      	pop	{r7}
 8005aaa:	4770      	bx	lr
 8005aac:	40012c00 	.word	0x40012c00
 8005ab0:	40000400 	.word	0x40000400
 8005ab4:	40000800 	.word	0x40000800

08005ab8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ab8:	b480      	push	{r7}
 8005aba:	b087      	sub	sp, #28
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	60f8      	str	r0, [r7, #12]
 8005ac0:	60b9      	str	r1, [r7, #8]
 8005ac2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	6a1b      	ldr	r3, [r3, #32]
 8005ac8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	6a1b      	ldr	r3, [r3, #32]
 8005ace:	f023 0201 	bic.w	r2, r3, #1
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	699b      	ldr	r3, [r3, #24]
 8005ada:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005adc:	693b      	ldr	r3, [r7, #16]
 8005ade:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005ae2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	011b      	lsls	r3, r3, #4
 8005ae8:	693a      	ldr	r2, [r7, #16]
 8005aea:	4313      	orrs	r3, r2
 8005aec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005aee:	697b      	ldr	r3, [r7, #20]
 8005af0:	f023 030a 	bic.w	r3, r3, #10
 8005af4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005af6:	697a      	ldr	r2, [r7, #20]
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	4313      	orrs	r3, r2
 8005afc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	693a      	ldr	r2, [r7, #16]
 8005b02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	697a      	ldr	r2, [r7, #20]
 8005b08:	621a      	str	r2, [r3, #32]
}
 8005b0a:	bf00      	nop
 8005b0c:	371c      	adds	r7, #28
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	bc80      	pop	{r7}
 8005b12:	4770      	bx	lr

08005b14 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b14:	b480      	push	{r7}
 8005b16:	b087      	sub	sp, #28
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	60f8      	str	r0, [r7, #12]
 8005b1c:	60b9      	str	r1, [r7, #8]
 8005b1e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	6a1b      	ldr	r3, [r3, #32]
 8005b24:	f023 0210 	bic.w	r2, r3, #16
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	699b      	ldr	r3, [r3, #24]
 8005b30:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	6a1b      	ldr	r3, [r3, #32]
 8005b36:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005b38:	697b      	ldr	r3, [r7, #20]
 8005b3a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005b3e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	031b      	lsls	r3, r3, #12
 8005b44:	697a      	ldr	r2, [r7, #20]
 8005b46:	4313      	orrs	r3, r2
 8005b48:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005b4a:	693b      	ldr	r3, [r7, #16]
 8005b4c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005b50:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005b52:	68bb      	ldr	r3, [r7, #8]
 8005b54:	011b      	lsls	r3, r3, #4
 8005b56:	693a      	ldr	r2, [r7, #16]
 8005b58:	4313      	orrs	r3, r2
 8005b5a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	697a      	ldr	r2, [r7, #20]
 8005b60:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	693a      	ldr	r2, [r7, #16]
 8005b66:	621a      	str	r2, [r3, #32]
}
 8005b68:	bf00      	nop
 8005b6a:	371c      	adds	r7, #28
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	bc80      	pop	{r7}
 8005b70:	4770      	bx	lr

08005b72 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005b72:	b480      	push	{r7}
 8005b74:	b085      	sub	sp, #20
 8005b76:	af00      	add	r7, sp, #0
 8005b78:	6078      	str	r0, [r7, #4]
 8005b7a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	689b      	ldr	r3, [r3, #8]
 8005b80:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b88:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005b8a:	683a      	ldr	r2, [r7, #0]
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	4313      	orrs	r3, r2
 8005b90:	f043 0307 	orr.w	r3, r3, #7
 8005b94:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	68fa      	ldr	r2, [r7, #12]
 8005b9a:	609a      	str	r2, [r3, #8]
}
 8005b9c:	bf00      	nop
 8005b9e:	3714      	adds	r7, #20
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	bc80      	pop	{r7}
 8005ba4:	4770      	bx	lr

08005ba6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005ba6:	b480      	push	{r7}
 8005ba8:	b087      	sub	sp, #28
 8005baa:	af00      	add	r7, sp, #0
 8005bac:	60f8      	str	r0, [r7, #12]
 8005bae:	60b9      	str	r1, [r7, #8]
 8005bb0:	607a      	str	r2, [r7, #4]
 8005bb2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	689b      	ldr	r3, [r3, #8]
 8005bb8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005bba:	697b      	ldr	r3, [r7, #20]
 8005bbc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005bc0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	021a      	lsls	r2, r3, #8
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	431a      	orrs	r2, r3
 8005bca:	68bb      	ldr	r3, [r7, #8]
 8005bcc:	4313      	orrs	r3, r2
 8005bce:	697a      	ldr	r2, [r7, #20]
 8005bd0:	4313      	orrs	r3, r2
 8005bd2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	697a      	ldr	r2, [r7, #20]
 8005bd8:	609a      	str	r2, [r3, #8]
}
 8005bda:	bf00      	nop
 8005bdc:	371c      	adds	r7, #28
 8005bde:	46bd      	mov	sp, r7
 8005be0:	bc80      	pop	{r7}
 8005be2:	4770      	bx	lr

08005be4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005be4:	b480      	push	{r7}
 8005be6:	b085      	sub	sp, #20
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
 8005bec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005bf4:	2b01      	cmp	r3, #1
 8005bf6:	d101      	bne.n	8005bfc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005bf8:	2302      	movs	r3, #2
 8005bfa:	e046      	b.n	8005c8a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2201      	movs	r2, #1
 8005c00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2202      	movs	r2, #2
 8005c08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	685b      	ldr	r3, [r3, #4]
 8005c12:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	689b      	ldr	r3, [r3, #8]
 8005c1a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c22:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	68fa      	ldr	r2, [r7, #12]
 8005c2a:	4313      	orrs	r3, r2
 8005c2c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	68fa      	ldr	r2, [r7, #12]
 8005c34:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	4a16      	ldr	r2, [pc, #88]	; (8005c94 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	d00e      	beq.n	8005c5e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c48:	d009      	beq.n	8005c5e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	4a12      	ldr	r2, [pc, #72]	; (8005c98 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d004      	beq.n	8005c5e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	4a10      	ldr	r2, [pc, #64]	; (8005c9c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d10c      	bne.n	8005c78 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005c5e:	68bb      	ldr	r3, [r7, #8]
 8005c60:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c64:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	685b      	ldr	r3, [r3, #4]
 8005c6a:	68ba      	ldr	r2, [r7, #8]
 8005c6c:	4313      	orrs	r3, r2
 8005c6e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	68ba      	ldr	r2, [r7, #8]
 8005c76:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2201      	movs	r2, #1
 8005c7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2200      	movs	r2, #0
 8005c84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005c88:	2300      	movs	r3, #0
}
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	3714      	adds	r7, #20
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	bc80      	pop	{r7}
 8005c92:	4770      	bx	lr
 8005c94:	40012c00 	.word	0x40012c00
 8005c98:	40000400 	.word	0x40000400
 8005c9c:	40000800 	.word	0x40000800

08005ca0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b082      	sub	sp, #8
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d101      	bne.n	8005cb2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005cae:	2301      	movs	r3, #1
 8005cb0:	e03f      	b.n	8005d32 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005cb8:	b2db      	uxtb	r3, r3
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d106      	bne.n	8005ccc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005cc6:	6878      	ldr	r0, [r7, #4]
 8005cc8:	f7fd fd62 	bl	8003790 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2224      	movs	r2, #36	; 0x24
 8005cd0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	68da      	ldr	r2, [r3, #12]
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005ce2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005ce4:	6878      	ldr	r0, [r7, #4]
 8005ce6:	f000 f905 	bl	8005ef4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	691a      	ldr	r2, [r3, #16]
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005cf8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	695a      	ldr	r2, [r3, #20]
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005d08:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	68da      	ldr	r2, [r3, #12]
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005d18:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2220      	movs	r2, #32
 8005d24:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2220      	movs	r2, #32
 8005d2c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005d30:	2300      	movs	r3, #0
}
 8005d32:	4618      	mov	r0, r3
 8005d34:	3708      	adds	r7, #8
 8005d36:	46bd      	mov	sp, r7
 8005d38:	bd80      	pop	{r7, pc}

08005d3a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d3a:	b580      	push	{r7, lr}
 8005d3c:	b08a      	sub	sp, #40	; 0x28
 8005d3e:	af02      	add	r7, sp, #8
 8005d40:	60f8      	str	r0, [r7, #12]
 8005d42:	60b9      	str	r1, [r7, #8]
 8005d44:	603b      	str	r3, [r7, #0]
 8005d46:	4613      	mov	r3, r2
 8005d48:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005d54:	b2db      	uxtb	r3, r3
 8005d56:	2b20      	cmp	r3, #32
 8005d58:	d17c      	bne.n	8005e54 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d5a:	68bb      	ldr	r3, [r7, #8]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d002      	beq.n	8005d66 <HAL_UART_Transmit+0x2c>
 8005d60:	88fb      	ldrh	r3, [r7, #6]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d101      	bne.n	8005d6a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005d66:	2301      	movs	r3, #1
 8005d68:	e075      	b.n	8005e56 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005d70:	2b01      	cmp	r3, #1
 8005d72:	d101      	bne.n	8005d78 <HAL_UART_Transmit+0x3e>
 8005d74:	2302      	movs	r3, #2
 8005d76:	e06e      	b.n	8005e56 <HAL_UART_Transmit+0x11c>
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	2201      	movs	r2, #1
 8005d7c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	2200      	movs	r2, #0
 8005d84:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	2221      	movs	r2, #33	; 0x21
 8005d8a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8005d8e:	f7fd ff0d 	bl	8003bac <HAL_GetTick>
 8005d92:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	88fa      	ldrh	r2, [r7, #6]
 8005d98:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	88fa      	ldrh	r2, [r7, #6]
 8005d9e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	689b      	ldr	r3, [r3, #8]
 8005da4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005da8:	d108      	bne.n	8005dbc <HAL_UART_Transmit+0x82>
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	691b      	ldr	r3, [r3, #16]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d104      	bne.n	8005dbc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005db2:	2300      	movs	r3, #0
 8005db4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005db6:	68bb      	ldr	r3, [r7, #8]
 8005db8:	61bb      	str	r3, [r7, #24]
 8005dba:	e003      	b.n	8005dc4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005dbc:	68bb      	ldr	r3, [r7, #8]
 8005dbe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8005dcc:	e02a      	b.n	8005e24 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	9300      	str	r3, [sp, #0]
 8005dd2:	697b      	ldr	r3, [r7, #20]
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	2180      	movs	r1, #128	; 0x80
 8005dd8:	68f8      	ldr	r0, [r7, #12]
 8005dda:	f000 f840 	bl	8005e5e <UART_WaitOnFlagUntilTimeout>
 8005dde:	4603      	mov	r3, r0
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d001      	beq.n	8005de8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005de4:	2303      	movs	r3, #3
 8005de6:	e036      	b.n	8005e56 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005de8:	69fb      	ldr	r3, [r7, #28]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d10b      	bne.n	8005e06 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005dee:	69bb      	ldr	r3, [r7, #24]
 8005df0:	881b      	ldrh	r3, [r3, #0]
 8005df2:	461a      	mov	r2, r3
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005dfc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005dfe:	69bb      	ldr	r3, [r7, #24]
 8005e00:	3302      	adds	r3, #2
 8005e02:	61bb      	str	r3, [r7, #24]
 8005e04:	e007      	b.n	8005e16 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005e06:	69fb      	ldr	r3, [r7, #28]
 8005e08:	781a      	ldrb	r2, [r3, #0]
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005e10:	69fb      	ldr	r3, [r7, #28]
 8005e12:	3301      	adds	r3, #1
 8005e14:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005e1a:	b29b      	uxth	r3, r3
 8005e1c:	3b01      	subs	r3, #1
 8005e1e:	b29a      	uxth	r2, r3
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005e28:	b29b      	uxth	r3, r3
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d1cf      	bne.n	8005dce <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	9300      	str	r3, [sp, #0]
 8005e32:	697b      	ldr	r3, [r7, #20]
 8005e34:	2200      	movs	r2, #0
 8005e36:	2140      	movs	r1, #64	; 0x40
 8005e38:	68f8      	ldr	r0, [r7, #12]
 8005e3a:	f000 f810 	bl	8005e5e <UART_WaitOnFlagUntilTimeout>
 8005e3e:	4603      	mov	r3, r0
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d001      	beq.n	8005e48 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005e44:	2303      	movs	r3, #3
 8005e46:	e006      	b.n	8005e56 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	2220      	movs	r2, #32
 8005e4c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8005e50:	2300      	movs	r3, #0
 8005e52:	e000      	b.n	8005e56 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005e54:	2302      	movs	r3, #2
  }
}
 8005e56:	4618      	mov	r0, r3
 8005e58:	3720      	adds	r7, #32
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	bd80      	pop	{r7, pc}

08005e5e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005e5e:	b580      	push	{r7, lr}
 8005e60:	b084      	sub	sp, #16
 8005e62:	af00      	add	r7, sp, #0
 8005e64:	60f8      	str	r0, [r7, #12]
 8005e66:	60b9      	str	r1, [r7, #8]
 8005e68:	603b      	str	r3, [r7, #0]
 8005e6a:	4613      	mov	r3, r2
 8005e6c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e6e:	e02c      	b.n	8005eca <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e70:	69bb      	ldr	r3, [r7, #24]
 8005e72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e76:	d028      	beq.n	8005eca <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005e78:	69bb      	ldr	r3, [r7, #24]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d007      	beq.n	8005e8e <UART_WaitOnFlagUntilTimeout+0x30>
 8005e7e:	f7fd fe95 	bl	8003bac <HAL_GetTick>
 8005e82:	4602      	mov	r2, r0
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	1ad3      	subs	r3, r2, r3
 8005e88:	69ba      	ldr	r2, [r7, #24]
 8005e8a:	429a      	cmp	r2, r3
 8005e8c:	d21d      	bcs.n	8005eca <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	68da      	ldr	r2, [r3, #12]
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005e9c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	695a      	ldr	r2, [r3, #20]
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f022 0201 	bic.w	r2, r2, #1
 8005eac:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	2220      	movs	r2, #32
 8005eb2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	2220      	movs	r2, #32
 8005eba:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8005ec6:	2303      	movs	r3, #3
 8005ec8:	e00f      	b.n	8005eea <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	681a      	ldr	r2, [r3, #0]
 8005ed0:	68bb      	ldr	r3, [r7, #8]
 8005ed2:	4013      	ands	r3, r2
 8005ed4:	68ba      	ldr	r2, [r7, #8]
 8005ed6:	429a      	cmp	r2, r3
 8005ed8:	bf0c      	ite	eq
 8005eda:	2301      	moveq	r3, #1
 8005edc:	2300      	movne	r3, #0
 8005ede:	b2db      	uxtb	r3, r3
 8005ee0:	461a      	mov	r2, r3
 8005ee2:	79fb      	ldrb	r3, [r7, #7]
 8005ee4:	429a      	cmp	r2, r3
 8005ee6:	d0c3      	beq.n	8005e70 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005ee8:	2300      	movs	r3, #0
}
 8005eea:	4618      	mov	r0, r3
 8005eec:	3710      	adds	r7, #16
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	bd80      	pop	{r7, pc}
	...

08005ef4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b084      	sub	sp, #16
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	691b      	ldr	r3, [r3, #16]
 8005f02:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	68da      	ldr	r2, [r3, #12]
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	430a      	orrs	r2, r1
 8005f10:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	689a      	ldr	r2, [r3, #8]
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	691b      	ldr	r3, [r3, #16]
 8005f1a:	431a      	orrs	r2, r3
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	695b      	ldr	r3, [r3, #20]
 8005f20:	4313      	orrs	r3, r2
 8005f22:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	68db      	ldr	r3, [r3, #12]
 8005f2a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005f2e:	f023 030c 	bic.w	r3, r3, #12
 8005f32:	687a      	ldr	r2, [r7, #4]
 8005f34:	6812      	ldr	r2, [r2, #0]
 8005f36:	68b9      	ldr	r1, [r7, #8]
 8005f38:	430b      	orrs	r3, r1
 8005f3a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	695b      	ldr	r3, [r3, #20]
 8005f42:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	699a      	ldr	r2, [r3, #24]
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	430a      	orrs	r2, r1
 8005f50:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	4a2c      	ldr	r2, [pc, #176]	; (8006008 <UART_SetConfig+0x114>)
 8005f58:	4293      	cmp	r3, r2
 8005f5a:	d103      	bne.n	8005f64 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005f5c:	f7fe fe42 	bl	8004be4 <HAL_RCC_GetPCLK2Freq>
 8005f60:	60f8      	str	r0, [r7, #12]
 8005f62:	e002      	b.n	8005f6a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005f64:	f7fe fe2a 	bl	8004bbc <HAL_RCC_GetPCLK1Freq>
 8005f68:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005f6a:	68fa      	ldr	r2, [r7, #12]
 8005f6c:	4613      	mov	r3, r2
 8005f6e:	009b      	lsls	r3, r3, #2
 8005f70:	4413      	add	r3, r2
 8005f72:	009a      	lsls	r2, r3, #2
 8005f74:	441a      	add	r2, r3
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	685b      	ldr	r3, [r3, #4]
 8005f7a:	009b      	lsls	r3, r3, #2
 8005f7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f80:	4a22      	ldr	r2, [pc, #136]	; (800600c <UART_SetConfig+0x118>)
 8005f82:	fba2 2303 	umull	r2, r3, r2, r3
 8005f86:	095b      	lsrs	r3, r3, #5
 8005f88:	0119      	lsls	r1, r3, #4
 8005f8a:	68fa      	ldr	r2, [r7, #12]
 8005f8c:	4613      	mov	r3, r2
 8005f8e:	009b      	lsls	r3, r3, #2
 8005f90:	4413      	add	r3, r2
 8005f92:	009a      	lsls	r2, r3, #2
 8005f94:	441a      	add	r2, r3
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	685b      	ldr	r3, [r3, #4]
 8005f9a:	009b      	lsls	r3, r3, #2
 8005f9c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005fa0:	4b1a      	ldr	r3, [pc, #104]	; (800600c <UART_SetConfig+0x118>)
 8005fa2:	fba3 0302 	umull	r0, r3, r3, r2
 8005fa6:	095b      	lsrs	r3, r3, #5
 8005fa8:	2064      	movs	r0, #100	; 0x64
 8005faa:	fb00 f303 	mul.w	r3, r0, r3
 8005fae:	1ad3      	subs	r3, r2, r3
 8005fb0:	011b      	lsls	r3, r3, #4
 8005fb2:	3332      	adds	r3, #50	; 0x32
 8005fb4:	4a15      	ldr	r2, [pc, #84]	; (800600c <UART_SetConfig+0x118>)
 8005fb6:	fba2 2303 	umull	r2, r3, r2, r3
 8005fba:	095b      	lsrs	r3, r3, #5
 8005fbc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005fc0:	4419      	add	r1, r3
 8005fc2:	68fa      	ldr	r2, [r7, #12]
 8005fc4:	4613      	mov	r3, r2
 8005fc6:	009b      	lsls	r3, r3, #2
 8005fc8:	4413      	add	r3, r2
 8005fca:	009a      	lsls	r2, r3, #2
 8005fcc:	441a      	add	r2, r3
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	685b      	ldr	r3, [r3, #4]
 8005fd2:	009b      	lsls	r3, r3, #2
 8005fd4:	fbb2 f2f3 	udiv	r2, r2, r3
 8005fd8:	4b0c      	ldr	r3, [pc, #48]	; (800600c <UART_SetConfig+0x118>)
 8005fda:	fba3 0302 	umull	r0, r3, r3, r2
 8005fde:	095b      	lsrs	r3, r3, #5
 8005fe0:	2064      	movs	r0, #100	; 0x64
 8005fe2:	fb00 f303 	mul.w	r3, r0, r3
 8005fe6:	1ad3      	subs	r3, r2, r3
 8005fe8:	011b      	lsls	r3, r3, #4
 8005fea:	3332      	adds	r3, #50	; 0x32
 8005fec:	4a07      	ldr	r2, [pc, #28]	; (800600c <UART_SetConfig+0x118>)
 8005fee:	fba2 2303 	umull	r2, r3, r2, r3
 8005ff2:	095b      	lsrs	r3, r3, #5
 8005ff4:	f003 020f 	and.w	r2, r3, #15
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	440a      	add	r2, r1
 8005ffe:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006000:	bf00      	nop
 8006002:	3710      	adds	r7, #16
 8006004:	46bd      	mov	sp, r7
 8006006:	bd80      	pop	{r7, pc}
 8006008:	40013800 	.word	0x40013800
 800600c:	51eb851f 	.word	0x51eb851f

08006010 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8006010:	b580      	push	{r7, lr}
 8006012:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8006014:	4904      	ldr	r1, [pc, #16]	; (8006028 <MX_FATFS_Init+0x18>)
 8006016:	4805      	ldr	r0, [pc, #20]	; (800602c <MX_FATFS_Init+0x1c>)
 8006018:	f004 f986 	bl	800a328 <FATFS_LinkDriver>
 800601c:	4603      	mov	r3, r0
 800601e:	461a      	mov	r2, r3
 8006020:	4b03      	ldr	r3, [pc, #12]	; (8006030 <MX_FATFS_Init+0x20>)
 8006022:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8006024:	bf00      	nop
 8006026:	bd80      	pop	{r7, pc}
 8006028:	20001168 	.word	0x20001168
 800602c:	20000020 	.word	0x20000020
 8006030:	2000116c 	.word	0x2000116c

08006034 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8006034:	b480      	push	{r7}
 8006036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8006038:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800603a:	4618      	mov	r0, r3
 800603c:	46bd      	mov	sp, r7
 800603e:	bc80      	pop	{r7}
 8006040:	4770      	bx	lr

08006042 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8006042:	b580      	push	{r7, lr}
 8006044:	b082      	sub	sp, #8
 8006046:	af00      	add	r7, sp, #0
 8006048:	4603      	mov	r3, r0
 800604a:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return SD_disk_initialize(pdrv);
 800604c:	79fb      	ldrb	r3, [r7, #7]
 800604e:	4618      	mov	r0, r3
 8006050:	f7fb faf8 	bl	8001644 <SD_disk_initialize>
 8006054:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8006056:	4618      	mov	r0, r3
 8006058:	3708      	adds	r7, #8
 800605a:	46bd      	mov	sp, r7
 800605c:	bd80      	pop	{r7, pc}

0800605e <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800605e:	b580      	push	{r7, lr}
 8006060:	b082      	sub	sp, #8
 8006062:	af00      	add	r7, sp, #0
 8006064:	4603      	mov	r3, r0
 8006066:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return SD_disk_status (pdrv);
 8006068:	79fb      	ldrb	r3, [r7, #7]
 800606a:	4618      	mov	r0, r3
 800606c:	f7fb fbd4 	bl	8001818 <SD_disk_status>
 8006070:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8006072:	4618      	mov	r0, r3
 8006074:	3708      	adds	r7, #8
 8006076:	46bd      	mov	sp, r7
 8006078:	bd80      	pop	{r7, pc}

0800607a <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800607a:	b580      	push	{r7, lr}
 800607c:	b084      	sub	sp, #16
 800607e:	af00      	add	r7, sp, #0
 8006080:	60b9      	str	r1, [r7, #8]
 8006082:	607a      	str	r2, [r7, #4]
 8006084:	603b      	str	r3, [r7, #0]
 8006086:	4603      	mov	r3, r0
 8006088:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 800608a:	7bf8      	ldrb	r0, [r7, #15]
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	687a      	ldr	r2, [r7, #4]
 8006090:	68b9      	ldr	r1, [r7, #8]
 8006092:	f7fb fbd5 	bl	8001840 <SD_disk_read>
 8006096:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8006098:	4618      	mov	r0, r3
 800609a:	3710      	adds	r7, #16
 800609c:	46bd      	mov	sp, r7
 800609e:	bd80      	pop	{r7, pc}

080060a0 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	b084      	sub	sp, #16
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	60b9      	str	r1, [r7, #8]
 80060a8:	607a      	str	r2, [r7, #4]
 80060aa:	603b      	str	r3, [r7, #0]
 80060ac:	4603      	mov	r3, r0
 80060ae:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 80060b0:	7bf8      	ldrb	r0, [r7, #15]
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	687a      	ldr	r2, [r7, #4]
 80060b6:	68b9      	ldr	r1, [r7, #8]
 80060b8:	f7fb fc2c 	bl	8001914 <SD_disk_write>
 80060bc:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 80060be:	4618      	mov	r0, r3
 80060c0:	3710      	adds	r7, #16
 80060c2:	46bd      	mov	sp, r7
 80060c4:	bd80      	pop	{r7, pc}

080060c6 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80060c6:	b580      	push	{r7, lr}
 80060c8:	b082      	sub	sp, #8
 80060ca:	af00      	add	r7, sp, #0
 80060cc:	4603      	mov	r3, r0
 80060ce:	603a      	str	r2, [r7, #0]
 80060d0:	71fb      	strb	r3, [r7, #7]
 80060d2:	460b      	mov	r3, r1
 80060d4:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return SD_disk_ioctl(pdrv, cmd, buff);
 80060d6:	79b9      	ldrb	r1, [r7, #6]
 80060d8:	79fb      	ldrb	r3, [r7, #7]
 80060da:	683a      	ldr	r2, [r7, #0]
 80060dc:	4618      	mov	r0, r3
 80060de:	f7fb fc9d 	bl	8001a1c <SD_disk_ioctl>
 80060e2:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 80060e4:	4618      	mov	r0, r3
 80060e6:	3708      	adds	r7, #8
 80060e8:	46bd      	mov	sp, r7
 80060ea:	bd80      	pop	{r7, pc}

080060ec <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b084      	sub	sp, #16
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	4603      	mov	r3, r0
 80060f4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80060f6:	79fb      	ldrb	r3, [r7, #7]
 80060f8:	4a08      	ldr	r2, [pc, #32]	; (800611c <disk_status+0x30>)
 80060fa:	009b      	lsls	r3, r3, #2
 80060fc:	4413      	add	r3, r2
 80060fe:	685b      	ldr	r3, [r3, #4]
 8006100:	685b      	ldr	r3, [r3, #4]
 8006102:	79fa      	ldrb	r2, [r7, #7]
 8006104:	4905      	ldr	r1, [pc, #20]	; (800611c <disk_status+0x30>)
 8006106:	440a      	add	r2, r1
 8006108:	7a12      	ldrb	r2, [r2, #8]
 800610a:	4610      	mov	r0, r2
 800610c:	4798      	blx	r3
 800610e:	4603      	mov	r3, r0
 8006110:	73fb      	strb	r3, [r7, #15]
  return stat;
 8006112:	7bfb      	ldrb	r3, [r7, #15]
}
 8006114:	4618      	mov	r0, r3
 8006116:	3710      	adds	r7, #16
 8006118:	46bd      	mov	sp, r7
 800611a:	bd80      	pop	{r7, pc}
 800611c:	200004e4 	.word	0x200004e4

08006120 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8006120:	b580      	push	{r7, lr}
 8006122:	b084      	sub	sp, #16
 8006124:	af00      	add	r7, sp, #0
 8006126:	4603      	mov	r3, r0
 8006128:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800612a:	2300      	movs	r3, #0
 800612c:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 800612e:	79fb      	ldrb	r3, [r7, #7]
 8006130:	4a0d      	ldr	r2, [pc, #52]	; (8006168 <disk_initialize+0x48>)
 8006132:	5cd3      	ldrb	r3, [r2, r3]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d111      	bne.n	800615c <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 8006138:	79fb      	ldrb	r3, [r7, #7]
 800613a:	4a0b      	ldr	r2, [pc, #44]	; (8006168 <disk_initialize+0x48>)
 800613c:	2101      	movs	r1, #1
 800613e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8006140:	79fb      	ldrb	r3, [r7, #7]
 8006142:	4a09      	ldr	r2, [pc, #36]	; (8006168 <disk_initialize+0x48>)
 8006144:	009b      	lsls	r3, r3, #2
 8006146:	4413      	add	r3, r2
 8006148:	685b      	ldr	r3, [r3, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	79fa      	ldrb	r2, [r7, #7]
 800614e:	4906      	ldr	r1, [pc, #24]	; (8006168 <disk_initialize+0x48>)
 8006150:	440a      	add	r2, r1
 8006152:	7a12      	ldrb	r2, [r2, #8]
 8006154:	4610      	mov	r0, r2
 8006156:	4798      	blx	r3
 8006158:	4603      	mov	r3, r0
 800615a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800615c:	7bfb      	ldrb	r3, [r7, #15]
}
 800615e:	4618      	mov	r0, r3
 8006160:	3710      	adds	r7, #16
 8006162:	46bd      	mov	sp, r7
 8006164:	bd80      	pop	{r7, pc}
 8006166:	bf00      	nop
 8006168:	200004e4 	.word	0x200004e4

0800616c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800616c:	b590      	push	{r4, r7, lr}
 800616e:	b087      	sub	sp, #28
 8006170:	af00      	add	r7, sp, #0
 8006172:	60b9      	str	r1, [r7, #8]
 8006174:	607a      	str	r2, [r7, #4]
 8006176:	603b      	str	r3, [r7, #0]
 8006178:	4603      	mov	r3, r0
 800617a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800617c:	7bfb      	ldrb	r3, [r7, #15]
 800617e:	4a0a      	ldr	r2, [pc, #40]	; (80061a8 <disk_read+0x3c>)
 8006180:	009b      	lsls	r3, r3, #2
 8006182:	4413      	add	r3, r2
 8006184:	685b      	ldr	r3, [r3, #4]
 8006186:	689c      	ldr	r4, [r3, #8]
 8006188:	7bfb      	ldrb	r3, [r7, #15]
 800618a:	4a07      	ldr	r2, [pc, #28]	; (80061a8 <disk_read+0x3c>)
 800618c:	4413      	add	r3, r2
 800618e:	7a18      	ldrb	r0, [r3, #8]
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	687a      	ldr	r2, [r7, #4]
 8006194:	68b9      	ldr	r1, [r7, #8]
 8006196:	47a0      	blx	r4
 8006198:	4603      	mov	r3, r0
 800619a:	75fb      	strb	r3, [r7, #23]
  return res;
 800619c:	7dfb      	ldrb	r3, [r7, #23]
}
 800619e:	4618      	mov	r0, r3
 80061a0:	371c      	adds	r7, #28
 80061a2:	46bd      	mov	sp, r7
 80061a4:	bd90      	pop	{r4, r7, pc}
 80061a6:	bf00      	nop
 80061a8:	200004e4 	.word	0x200004e4

080061ac <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80061ac:	b590      	push	{r4, r7, lr}
 80061ae:	b087      	sub	sp, #28
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	60b9      	str	r1, [r7, #8]
 80061b4:	607a      	str	r2, [r7, #4]
 80061b6:	603b      	str	r3, [r7, #0]
 80061b8:	4603      	mov	r3, r0
 80061ba:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80061bc:	7bfb      	ldrb	r3, [r7, #15]
 80061be:	4a0a      	ldr	r2, [pc, #40]	; (80061e8 <disk_write+0x3c>)
 80061c0:	009b      	lsls	r3, r3, #2
 80061c2:	4413      	add	r3, r2
 80061c4:	685b      	ldr	r3, [r3, #4]
 80061c6:	68dc      	ldr	r4, [r3, #12]
 80061c8:	7bfb      	ldrb	r3, [r7, #15]
 80061ca:	4a07      	ldr	r2, [pc, #28]	; (80061e8 <disk_write+0x3c>)
 80061cc:	4413      	add	r3, r2
 80061ce:	7a18      	ldrb	r0, [r3, #8]
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	687a      	ldr	r2, [r7, #4]
 80061d4:	68b9      	ldr	r1, [r7, #8]
 80061d6:	47a0      	blx	r4
 80061d8:	4603      	mov	r3, r0
 80061da:	75fb      	strb	r3, [r7, #23]
  return res;
 80061dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80061de:	4618      	mov	r0, r3
 80061e0:	371c      	adds	r7, #28
 80061e2:	46bd      	mov	sp, r7
 80061e4:	bd90      	pop	{r4, r7, pc}
 80061e6:	bf00      	nop
 80061e8:	200004e4 	.word	0x200004e4

080061ec <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b084      	sub	sp, #16
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	4603      	mov	r3, r0
 80061f4:	603a      	str	r2, [r7, #0]
 80061f6:	71fb      	strb	r3, [r7, #7]
 80061f8:	460b      	mov	r3, r1
 80061fa:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80061fc:	79fb      	ldrb	r3, [r7, #7]
 80061fe:	4a09      	ldr	r2, [pc, #36]	; (8006224 <disk_ioctl+0x38>)
 8006200:	009b      	lsls	r3, r3, #2
 8006202:	4413      	add	r3, r2
 8006204:	685b      	ldr	r3, [r3, #4]
 8006206:	691b      	ldr	r3, [r3, #16]
 8006208:	79fa      	ldrb	r2, [r7, #7]
 800620a:	4906      	ldr	r1, [pc, #24]	; (8006224 <disk_ioctl+0x38>)
 800620c:	440a      	add	r2, r1
 800620e:	7a10      	ldrb	r0, [r2, #8]
 8006210:	79b9      	ldrb	r1, [r7, #6]
 8006212:	683a      	ldr	r2, [r7, #0]
 8006214:	4798      	blx	r3
 8006216:	4603      	mov	r3, r0
 8006218:	73fb      	strb	r3, [r7, #15]
  return res;
 800621a:	7bfb      	ldrb	r3, [r7, #15]
}
 800621c:	4618      	mov	r0, r3
 800621e:	3710      	adds	r7, #16
 8006220:	46bd      	mov	sp, r7
 8006222:	bd80      	pop	{r7, pc}
 8006224:	200004e4 	.word	0x200004e4

08006228 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8006228:	b480      	push	{r7}
 800622a:	b087      	sub	sp, #28
 800622c:	af00      	add	r7, sp, #0
 800622e:	60f8      	str	r0, [r7, #12]
 8006230:	60b9      	str	r1, [r7, #8]
 8006232:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8006238:	68bb      	ldr	r3, [r7, #8]
 800623a:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 800623c:	e007      	b.n	800624e <mem_cpy+0x26>
		*d++ = *s++;
 800623e:	693a      	ldr	r2, [r7, #16]
 8006240:	1c53      	adds	r3, r2, #1
 8006242:	613b      	str	r3, [r7, #16]
 8006244:	697b      	ldr	r3, [r7, #20]
 8006246:	1c59      	adds	r1, r3, #1
 8006248:	6179      	str	r1, [r7, #20]
 800624a:	7812      	ldrb	r2, [r2, #0]
 800624c:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	1e5a      	subs	r2, r3, #1
 8006252:	607a      	str	r2, [r7, #4]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d1f2      	bne.n	800623e <mem_cpy+0x16>
}
 8006258:	bf00      	nop
 800625a:	bf00      	nop
 800625c:	371c      	adds	r7, #28
 800625e:	46bd      	mov	sp, r7
 8006260:	bc80      	pop	{r7}
 8006262:	4770      	bx	lr

08006264 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 8006264:	b480      	push	{r7}
 8006266:	b087      	sub	sp, #28
 8006268:	af00      	add	r7, sp, #0
 800626a:	60f8      	str	r0, [r7, #12]
 800626c:	60b9      	str	r1, [r7, #8]
 800626e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	617b      	str	r3, [r7, #20]

	while (cnt--)
 8006274:	e005      	b.n	8006282 <mem_set+0x1e>
		*d++ = (BYTE)val;
 8006276:	697b      	ldr	r3, [r7, #20]
 8006278:	1c5a      	adds	r2, r3, #1
 800627a:	617a      	str	r2, [r7, #20]
 800627c:	68ba      	ldr	r2, [r7, #8]
 800627e:	b2d2      	uxtb	r2, r2
 8006280:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	1e5a      	subs	r2, r3, #1
 8006286:	607a      	str	r2, [r7, #4]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d1f4      	bne.n	8006276 <mem_set+0x12>
}
 800628c:	bf00      	nop
 800628e:	bf00      	nop
 8006290:	371c      	adds	r7, #28
 8006292:	46bd      	mov	sp, r7
 8006294:	bc80      	pop	{r7}
 8006296:	4770      	bx	lr

08006298 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 8006298:	b480      	push	{r7}
 800629a:	b089      	sub	sp, #36	; 0x24
 800629c:	af00      	add	r7, sp, #0
 800629e:	60f8      	str	r0, [r7, #12]
 80062a0:	60b9      	str	r1, [r7, #8]
 80062a2:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	61fb      	str	r3, [r7, #28]
 80062a8:	68bb      	ldr	r3, [r7, #8]
 80062aa:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80062ac:	2300      	movs	r3, #0
 80062ae:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 80062b0:	bf00      	nop
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	1e5a      	subs	r2, r3, #1
 80062b6:	607a      	str	r2, [r7, #4]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d00d      	beq.n	80062d8 <mem_cmp+0x40>
 80062bc:	69fb      	ldr	r3, [r7, #28]
 80062be:	1c5a      	adds	r2, r3, #1
 80062c0:	61fa      	str	r2, [r7, #28]
 80062c2:	781b      	ldrb	r3, [r3, #0]
 80062c4:	4619      	mov	r1, r3
 80062c6:	69bb      	ldr	r3, [r7, #24]
 80062c8:	1c5a      	adds	r2, r3, #1
 80062ca:	61ba      	str	r2, [r7, #24]
 80062cc:	781b      	ldrb	r3, [r3, #0]
 80062ce:	1acb      	subs	r3, r1, r3
 80062d0:	617b      	str	r3, [r7, #20]
 80062d2:	697b      	ldr	r3, [r7, #20]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d0ec      	beq.n	80062b2 <mem_cmp+0x1a>
	return r;
 80062d8:	697b      	ldr	r3, [r7, #20]
}
 80062da:	4618      	mov	r0, r3
 80062dc:	3724      	adds	r7, #36	; 0x24
 80062de:	46bd      	mov	sp, r7
 80062e0:	bc80      	pop	{r7}
 80062e2:	4770      	bx	lr

080062e4 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 80062e4:	b480      	push	{r7}
 80062e6:	b083      	sub	sp, #12
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
 80062ec:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80062ee:	e002      	b.n	80062f6 <chk_chr+0x12>
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	3301      	adds	r3, #1
 80062f4:	607b      	str	r3, [r7, #4]
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	781b      	ldrb	r3, [r3, #0]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d005      	beq.n	800630a <chk_chr+0x26>
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	781b      	ldrb	r3, [r3, #0]
 8006302:	461a      	mov	r2, r3
 8006304:	683b      	ldr	r3, [r7, #0]
 8006306:	4293      	cmp	r3, r2
 8006308:	d1f2      	bne.n	80062f0 <chk_chr+0xc>
	return *str;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	781b      	ldrb	r3, [r3, #0]
}
 800630e:	4618      	mov	r0, r3
 8006310:	370c      	adds	r7, #12
 8006312:	46bd      	mov	sp, r7
 8006314:	bc80      	pop	{r7}
 8006316:	4770      	bx	lr

08006318 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006318:	b480      	push	{r7}
 800631a:	b085      	sub	sp, #20
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
 8006320:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006322:	2300      	movs	r3, #0
 8006324:	60bb      	str	r3, [r7, #8]
 8006326:	68bb      	ldr	r3, [r7, #8]
 8006328:	60fb      	str	r3, [r7, #12]
 800632a:	e038      	b.n	800639e <chk_lock+0x86>
		if (Files[i].fs) {	/* Existing entry */
 800632c:	492f      	ldr	r1, [pc, #188]	; (80063ec <chk_lock+0xd4>)
 800632e:	68fa      	ldr	r2, [r7, #12]
 8006330:	4613      	mov	r3, r2
 8006332:	005b      	lsls	r3, r3, #1
 8006334:	4413      	add	r3, r2
 8006336:	009b      	lsls	r3, r3, #2
 8006338:	440b      	add	r3, r1
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d029      	beq.n	8006394 <chk_lock+0x7c>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8006340:	492a      	ldr	r1, [pc, #168]	; (80063ec <chk_lock+0xd4>)
 8006342:	68fa      	ldr	r2, [r7, #12]
 8006344:	4613      	mov	r3, r2
 8006346:	005b      	lsls	r3, r3, #1
 8006348:	4413      	add	r3, r2
 800634a:	009b      	lsls	r3, r3, #2
 800634c:	440b      	add	r3, r1
 800634e:	681a      	ldr	r2, [r3, #0]
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8006356:	429a      	cmp	r2, r3
 8006358:	d11e      	bne.n	8006398 <chk_lock+0x80>
				Files[i].clu == dp->sclust &&
 800635a:	4924      	ldr	r1, [pc, #144]	; (80063ec <chk_lock+0xd4>)
 800635c:	68fa      	ldr	r2, [r7, #12]
 800635e:	4613      	mov	r3, r2
 8006360:	005b      	lsls	r3, r3, #1
 8006362:	4413      	add	r3, r2
 8006364:	009b      	lsls	r3, r3, #2
 8006366:	440b      	add	r3, r1
 8006368:	3304      	adds	r3, #4
 800636a:	681a      	ldr	r2, [r3, #0]
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8006372:	429a      	cmp	r2, r3
 8006374:	d110      	bne.n	8006398 <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 8006376:	491d      	ldr	r1, [pc, #116]	; (80063ec <chk_lock+0xd4>)
 8006378:	68fa      	ldr	r2, [r7, #12]
 800637a:	4613      	mov	r3, r2
 800637c:	005b      	lsls	r3, r3, #1
 800637e:	4413      	add	r3, r2
 8006380:	009b      	lsls	r3, r3, #2
 8006382:	440b      	add	r3, r1
 8006384:	3308      	adds	r3, #8
 8006386:	881a      	ldrh	r2, [r3, #0]
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	f8b3 3406 	ldrh.w	r3, [r3, #1030]	; 0x406
				Files[i].clu == dp->sclust &&
 800638e:	429a      	cmp	r2, r3
 8006390:	d102      	bne.n	8006398 <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 8006392:	e007      	b.n	80063a4 <chk_lock+0x8c>
		} else {			/* Blank entry */
			be = 1;
 8006394:	2301      	movs	r3, #1
 8006396:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	3301      	adds	r3, #1
 800639c:	60fb      	str	r3, [r7, #12]
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	2b01      	cmp	r3, #1
 80063a2:	d9c3      	bls.n	800632c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	2b02      	cmp	r3, #2
 80063a8:	d109      	bne.n	80063be <chk_lock+0xa6>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80063aa:	68bb      	ldr	r3, [r7, #8]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d102      	bne.n	80063b6 <chk_lock+0x9e>
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	2b02      	cmp	r3, #2
 80063b4:	d101      	bne.n	80063ba <chk_lock+0xa2>
 80063b6:	2300      	movs	r3, #0
 80063b8:	e013      	b.n	80063e2 <chk_lock+0xca>
 80063ba:	2312      	movs	r3, #18
 80063bc:	e011      	b.n	80063e2 <chk_lock+0xca>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80063be:	683b      	ldr	r3, [r7, #0]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d10b      	bne.n	80063dc <chk_lock+0xc4>
 80063c4:	4909      	ldr	r1, [pc, #36]	; (80063ec <chk_lock+0xd4>)
 80063c6:	68fa      	ldr	r2, [r7, #12]
 80063c8:	4613      	mov	r3, r2
 80063ca:	005b      	lsls	r3, r3, #1
 80063cc:	4413      	add	r3, r2
 80063ce:	009b      	lsls	r3, r3, #2
 80063d0:	440b      	add	r3, r1
 80063d2:	330a      	adds	r3, #10
 80063d4:	881b      	ldrh	r3, [r3, #0]
 80063d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80063da:	d101      	bne.n	80063e0 <chk_lock+0xc8>
 80063dc:	2310      	movs	r3, #16
 80063de:	e000      	b.n	80063e2 <chk_lock+0xca>
 80063e0:	2300      	movs	r3, #0
}
 80063e2:	4618      	mov	r0, r3
 80063e4:	3714      	adds	r7, #20
 80063e6:	46bd      	mov	sp, r7
 80063e8:	bc80      	pop	{r7}
 80063ea:	4770      	bx	lr
 80063ec:	200002cc 	.word	0x200002cc

080063f0 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80063f0:	b480      	push	{r7}
 80063f2:	b083      	sub	sp, #12
 80063f4:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80063f6:	2300      	movs	r3, #0
 80063f8:	607b      	str	r3, [r7, #4]
 80063fa:	e002      	b.n	8006402 <enq_lock+0x12>
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	3301      	adds	r3, #1
 8006400:	607b      	str	r3, [r7, #4]
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	2b01      	cmp	r3, #1
 8006406:	d809      	bhi.n	800641c <enq_lock+0x2c>
 8006408:	490a      	ldr	r1, [pc, #40]	; (8006434 <enq_lock+0x44>)
 800640a:	687a      	ldr	r2, [r7, #4]
 800640c:	4613      	mov	r3, r2
 800640e:	005b      	lsls	r3, r3, #1
 8006410:	4413      	add	r3, r2
 8006412:	009b      	lsls	r3, r3, #2
 8006414:	440b      	add	r3, r1
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d1ef      	bne.n	80063fc <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2b02      	cmp	r3, #2
 8006420:	bf14      	ite	ne
 8006422:	2301      	movne	r3, #1
 8006424:	2300      	moveq	r3, #0
 8006426:	b2db      	uxtb	r3, r3
}
 8006428:	4618      	mov	r0, r3
 800642a:	370c      	adds	r7, #12
 800642c:	46bd      	mov	sp, r7
 800642e:	bc80      	pop	{r7}
 8006430:	4770      	bx	lr
 8006432:	bf00      	nop
 8006434:	200002cc 	.word	0x200002cc

08006438 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006438:	b480      	push	{r7}
 800643a:	b085      	sub	sp, #20
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
 8006440:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006442:	2300      	movs	r3, #0
 8006444:	60fb      	str	r3, [r7, #12]
 8006446:	e02b      	b.n	80064a0 <inc_lock+0x68>
		if (Files[i].fs == dp->fs &&
 8006448:	4955      	ldr	r1, [pc, #340]	; (80065a0 <inc_lock+0x168>)
 800644a:	68fa      	ldr	r2, [r7, #12]
 800644c:	4613      	mov	r3, r2
 800644e:	005b      	lsls	r3, r3, #1
 8006450:	4413      	add	r3, r2
 8006452:	009b      	lsls	r3, r3, #2
 8006454:	440b      	add	r3, r1
 8006456:	681a      	ldr	r2, [r3, #0]
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800645e:	429a      	cmp	r2, r3
 8006460:	d11b      	bne.n	800649a <inc_lock+0x62>
			Files[i].clu == dp->sclust &&
 8006462:	494f      	ldr	r1, [pc, #316]	; (80065a0 <inc_lock+0x168>)
 8006464:	68fa      	ldr	r2, [r7, #12]
 8006466:	4613      	mov	r3, r2
 8006468:	005b      	lsls	r3, r3, #1
 800646a:	4413      	add	r3, r2
 800646c:	009b      	lsls	r3, r3, #2
 800646e:	440b      	add	r3, r1
 8006470:	3304      	adds	r3, #4
 8006472:	681a      	ldr	r2, [r3, #0]
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
		if (Files[i].fs == dp->fs &&
 800647a:	429a      	cmp	r2, r3
 800647c:	d10d      	bne.n	800649a <inc_lock+0x62>
			Files[i].idx == dp->index) break;
 800647e:	4948      	ldr	r1, [pc, #288]	; (80065a0 <inc_lock+0x168>)
 8006480:	68fa      	ldr	r2, [r7, #12]
 8006482:	4613      	mov	r3, r2
 8006484:	005b      	lsls	r3, r3, #1
 8006486:	4413      	add	r3, r2
 8006488:	009b      	lsls	r3, r3, #2
 800648a:	440b      	add	r3, r1
 800648c:	3308      	adds	r3, #8
 800648e:	881a      	ldrh	r2, [r3, #0]
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	f8b3 3406 	ldrh.w	r3, [r3, #1030]	; 0x406
			Files[i].clu == dp->sclust &&
 8006496:	429a      	cmp	r2, r3
 8006498:	d006      	beq.n	80064a8 <inc_lock+0x70>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	3301      	adds	r3, #1
 800649e:	60fb      	str	r3, [r7, #12]
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	2b01      	cmp	r3, #1
 80064a4:	d9d0      	bls.n	8006448 <inc_lock+0x10>
 80064a6:	e000      	b.n	80064aa <inc_lock+0x72>
			Files[i].idx == dp->index) break;
 80064a8:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	2b02      	cmp	r3, #2
 80064ae:	d145      	bne.n	800653c <inc_lock+0x104>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80064b0:	2300      	movs	r3, #0
 80064b2:	60fb      	str	r3, [r7, #12]
 80064b4:	e002      	b.n	80064bc <inc_lock+0x84>
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	3301      	adds	r3, #1
 80064ba:	60fb      	str	r3, [r7, #12]
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	2b01      	cmp	r3, #1
 80064c0:	d809      	bhi.n	80064d6 <inc_lock+0x9e>
 80064c2:	4937      	ldr	r1, [pc, #220]	; (80065a0 <inc_lock+0x168>)
 80064c4:	68fa      	ldr	r2, [r7, #12]
 80064c6:	4613      	mov	r3, r2
 80064c8:	005b      	lsls	r3, r3, #1
 80064ca:	4413      	add	r3, r2
 80064cc:	009b      	lsls	r3, r3, #2
 80064ce:	440b      	add	r3, r1
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d1ef      	bne.n	80064b6 <inc_lock+0x7e>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	2b02      	cmp	r3, #2
 80064da:	d101      	bne.n	80064e0 <inc_lock+0xa8>
 80064dc:	2300      	movs	r3, #0
 80064de:	e05a      	b.n	8006596 <inc_lock+0x15e>
		Files[i].fs = dp->fs;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 80064e6:	482e      	ldr	r0, [pc, #184]	; (80065a0 <inc_lock+0x168>)
 80064e8:	68fa      	ldr	r2, [r7, #12]
 80064ea:	4613      	mov	r3, r2
 80064ec:	005b      	lsls	r3, r3, #1
 80064ee:	4413      	add	r3, r2
 80064f0:	009b      	lsls	r3, r3, #2
 80064f2:	4403      	add	r3, r0
 80064f4:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	f8d3 1408 	ldr.w	r1, [r3, #1032]	; 0x408
 80064fc:	4828      	ldr	r0, [pc, #160]	; (80065a0 <inc_lock+0x168>)
 80064fe:	68fa      	ldr	r2, [r7, #12]
 8006500:	4613      	mov	r3, r2
 8006502:	005b      	lsls	r3, r3, #1
 8006504:	4413      	add	r3, r2
 8006506:	009b      	lsls	r3, r3, #2
 8006508:	4403      	add	r3, r0
 800650a:	3304      	adds	r3, #4
 800650c:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	f8b3 0406 	ldrh.w	r0, [r3, #1030]	; 0x406
 8006514:	4922      	ldr	r1, [pc, #136]	; (80065a0 <inc_lock+0x168>)
 8006516:	68fa      	ldr	r2, [r7, #12]
 8006518:	4613      	mov	r3, r2
 800651a:	005b      	lsls	r3, r3, #1
 800651c:	4413      	add	r3, r2
 800651e:	009b      	lsls	r3, r3, #2
 8006520:	440b      	add	r3, r1
 8006522:	3308      	adds	r3, #8
 8006524:	4602      	mov	r2, r0
 8006526:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 8006528:	491d      	ldr	r1, [pc, #116]	; (80065a0 <inc_lock+0x168>)
 800652a:	68fa      	ldr	r2, [r7, #12]
 800652c:	4613      	mov	r3, r2
 800652e:	005b      	lsls	r3, r3, #1
 8006530:	4413      	add	r3, r2
 8006532:	009b      	lsls	r3, r3, #2
 8006534:	440b      	add	r3, r1
 8006536:	330a      	adds	r3, #10
 8006538:	2200      	movs	r2, #0
 800653a:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d00c      	beq.n	800655c <inc_lock+0x124>
 8006542:	4917      	ldr	r1, [pc, #92]	; (80065a0 <inc_lock+0x168>)
 8006544:	68fa      	ldr	r2, [r7, #12]
 8006546:	4613      	mov	r3, r2
 8006548:	005b      	lsls	r3, r3, #1
 800654a:	4413      	add	r3, r2
 800654c:	009b      	lsls	r3, r3, #2
 800654e:	440b      	add	r3, r1
 8006550:	330a      	adds	r3, #10
 8006552:	881b      	ldrh	r3, [r3, #0]
 8006554:	2b00      	cmp	r3, #0
 8006556:	d001      	beq.n	800655c <inc_lock+0x124>
 8006558:	2300      	movs	r3, #0
 800655a:	e01c      	b.n	8006596 <inc_lock+0x15e>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d10b      	bne.n	800657a <inc_lock+0x142>
 8006562:	490f      	ldr	r1, [pc, #60]	; (80065a0 <inc_lock+0x168>)
 8006564:	68fa      	ldr	r2, [r7, #12]
 8006566:	4613      	mov	r3, r2
 8006568:	005b      	lsls	r3, r3, #1
 800656a:	4413      	add	r3, r2
 800656c:	009b      	lsls	r3, r3, #2
 800656e:	440b      	add	r3, r1
 8006570:	330a      	adds	r3, #10
 8006572:	881b      	ldrh	r3, [r3, #0]
 8006574:	3301      	adds	r3, #1
 8006576:	b299      	uxth	r1, r3
 8006578:	e001      	b.n	800657e <inc_lock+0x146>
 800657a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800657e:	4808      	ldr	r0, [pc, #32]	; (80065a0 <inc_lock+0x168>)
 8006580:	68fa      	ldr	r2, [r7, #12]
 8006582:	4613      	mov	r3, r2
 8006584:	005b      	lsls	r3, r3, #1
 8006586:	4413      	add	r3, r2
 8006588:	009b      	lsls	r3, r3, #2
 800658a:	4403      	add	r3, r0
 800658c:	330a      	adds	r3, #10
 800658e:	460a      	mov	r2, r1
 8006590:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	3301      	adds	r3, #1
}
 8006596:	4618      	mov	r0, r3
 8006598:	3714      	adds	r7, #20
 800659a:	46bd      	mov	sp, r7
 800659c:	bc80      	pop	{r7}
 800659e:	4770      	bx	lr
 80065a0:	200002cc 	.word	0x200002cc

080065a4 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80065a4:	b480      	push	{r7}
 80065a6:	b085      	sub	sp, #20
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	3b01      	subs	r3, #1
 80065b0:	607b      	str	r3, [r7, #4]
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	2b01      	cmp	r3, #1
 80065b6:	d82e      	bhi.n	8006616 <dec_lock+0x72>
		n = Files[i].ctr;
 80065b8:	491b      	ldr	r1, [pc, #108]	; (8006628 <dec_lock+0x84>)
 80065ba:	687a      	ldr	r2, [r7, #4]
 80065bc:	4613      	mov	r3, r2
 80065be:	005b      	lsls	r3, r3, #1
 80065c0:	4413      	add	r3, r2
 80065c2:	009b      	lsls	r3, r3, #2
 80065c4:	440b      	add	r3, r1
 80065c6:	330a      	adds	r3, #10
 80065c8:	881b      	ldrh	r3, [r3, #0]
 80065ca:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80065cc:	89fb      	ldrh	r3, [r7, #14]
 80065ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80065d2:	d101      	bne.n	80065d8 <dec_lock+0x34>
 80065d4:	2300      	movs	r3, #0
 80065d6:	81fb      	strh	r3, [r7, #14]
		if (n) n--;					/* Decrement read mode open count */
 80065d8:	89fb      	ldrh	r3, [r7, #14]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d002      	beq.n	80065e4 <dec_lock+0x40>
 80065de:	89fb      	ldrh	r3, [r7, #14]
 80065e0:	3b01      	subs	r3, #1
 80065e2:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80065e4:	4910      	ldr	r1, [pc, #64]	; (8006628 <dec_lock+0x84>)
 80065e6:	687a      	ldr	r2, [r7, #4]
 80065e8:	4613      	mov	r3, r2
 80065ea:	005b      	lsls	r3, r3, #1
 80065ec:	4413      	add	r3, r2
 80065ee:	009b      	lsls	r3, r3, #2
 80065f0:	440b      	add	r3, r1
 80065f2:	330a      	adds	r3, #10
 80065f4:	89fa      	ldrh	r2, [r7, #14]
 80065f6:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80065f8:	89fb      	ldrh	r3, [r7, #14]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d108      	bne.n	8006610 <dec_lock+0x6c>
 80065fe:	490a      	ldr	r1, [pc, #40]	; (8006628 <dec_lock+0x84>)
 8006600:	687a      	ldr	r2, [r7, #4]
 8006602:	4613      	mov	r3, r2
 8006604:	005b      	lsls	r3, r3, #1
 8006606:	4413      	add	r3, r2
 8006608:	009b      	lsls	r3, r3, #2
 800660a:	440b      	add	r3, r1
 800660c:	2200      	movs	r2, #0
 800660e:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8006610:	2300      	movs	r3, #0
 8006612:	737b      	strb	r3, [r7, #13]
 8006614:	e001      	b.n	800661a <dec_lock+0x76>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8006616:	2302      	movs	r3, #2
 8006618:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800661a:	7b7b      	ldrb	r3, [r7, #13]
}
 800661c:	4618      	mov	r0, r3
 800661e:	3714      	adds	r7, #20
 8006620:	46bd      	mov	sp, r7
 8006622:	bc80      	pop	{r7}
 8006624:	4770      	bx	lr
 8006626:	bf00      	nop
 8006628:	200002cc 	.word	0x200002cc

0800662c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800662c:	b480      	push	{r7}
 800662e:	b085      	sub	sp, #20
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8006634:	2300      	movs	r3, #0
 8006636:	60fb      	str	r3, [r7, #12]
 8006638:	e016      	b.n	8006668 <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800663a:	4910      	ldr	r1, [pc, #64]	; (800667c <clear_lock+0x50>)
 800663c:	68fa      	ldr	r2, [r7, #12]
 800663e:	4613      	mov	r3, r2
 8006640:	005b      	lsls	r3, r3, #1
 8006642:	4413      	add	r3, r2
 8006644:	009b      	lsls	r3, r3, #2
 8006646:	440b      	add	r3, r1
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	687a      	ldr	r2, [r7, #4]
 800664c:	429a      	cmp	r2, r3
 800664e:	d108      	bne.n	8006662 <clear_lock+0x36>
 8006650:	490a      	ldr	r1, [pc, #40]	; (800667c <clear_lock+0x50>)
 8006652:	68fa      	ldr	r2, [r7, #12]
 8006654:	4613      	mov	r3, r2
 8006656:	005b      	lsls	r3, r3, #1
 8006658:	4413      	add	r3, r2
 800665a:	009b      	lsls	r3, r3, #2
 800665c:	440b      	add	r3, r1
 800665e:	2200      	movs	r2, #0
 8006660:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	3301      	adds	r3, #1
 8006666:	60fb      	str	r3, [r7, #12]
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	2b01      	cmp	r3, #1
 800666c:	d9e5      	bls.n	800663a <clear_lock+0xe>
	}
}
 800666e:	bf00      	nop
 8006670:	bf00      	nop
 8006672:	3714      	adds	r7, #20
 8006674:	46bd      	mov	sp, r7
 8006676:	bc80      	pop	{r7}
 8006678:	4770      	bx	lr
 800667a:	bf00      	nop
 800667c:	200002cc 	.word	0x200002cc

08006680 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 8006680:	b580      	push	{r7, lr}
 8006682:	b086      	sub	sp, #24
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8006688:	2300      	movs	r3, #0
 800668a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	f893 3404 	ldrb.w	r3, [r3, #1028]	; 0x404
 8006692:	2b00      	cmp	r3, #0
 8006694:	d038      	beq.n	8006708 <sync_window+0x88>
		wsect = fs->winsect;	/* Current sector number */
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	f8d3 342c 	ldr.w	r3, [r3, #1068]	; 0x42c
 800669c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	f893 0401 	ldrb.w	r0, [r3, #1025]	; 0x401
 80066a4:	6879      	ldr	r1, [r7, #4]
 80066a6:	2301      	movs	r3, #1
 80066a8:	697a      	ldr	r2, [r7, #20]
 80066aa:	f7ff fd7f 	bl	80061ac <disk_write>
 80066ae:	4603      	mov	r3, r0
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d002      	beq.n	80066ba <sync_window+0x3a>
			res = FR_DISK_ERR;
 80066b4:	2301      	movs	r3, #1
 80066b6:	73fb      	strb	r3, [r7, #15]
 80066b8:	e026      	b.n	8006708 <sync_window+0x88>
		} else {
			fs->wflag = 0;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	2200      	movs	r2, #0
 80066be:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 80066c8:	697a      	ldr	r2, [r7, #20]
 80066ca:	1ad2      	subs	r2, r2, r3
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 80066d2:	429a      	cmp	r2, r3
 80066d4:	d218      	bcs.n	8006708 <sync_window+0x88>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	f893 3403 	ldrb.w	r3, [r3, #1027]	; 0x403
 80066dc:	613b      	str	r3, [r7, #16]
 80066de:	e010      	b.n	8006702 <sync_window+0x82>
					wsect += fs->fsize;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 80066e6:	697a      	ldr	r2, [r7, #20]
 80066e8:	4413      	add	r3, r2
 80066ea:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	f893 0401 	ldrb.w	r0, [r3, #1025]	; 0x401
 80066f2:	6879      	ldr	r1, [r7, #4]
 80066f4:	2301      	movs	r3, #1
 80066f6:	697a      	ldr	r2, [r7, #20]
 80066f8:	f7ff fd58 	bl	80061ac <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80066fc:	693b      	ldr	r3, [r7, #16]
 80066fe:	3b01      	subs	r3, #1
 8006700:	613b      	str	r3, [r7, #16]
 8006702:	693b      	ldr	r3, [r7, #16]
 8006704:	2b01      	cmp	r3, #1
 8006706:	d8eb      	bhi.n	80066e0 <sync_window+0x60>
				}
			}
		}
	}
	return res;
 8006708:	7bfb      	ldrb	r3, [r7, #15]
}
 800670a:	4618      	mov	r0, r3
 800670c:	3718      	adds	r7, #24
 800670e:	46bd      	mov	sp, r7
 8006710:	bd80      	pop	{r7, pc}

08006712 <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 8006712:	b580      	push	{r7, lr}
 8006714:	b084      	sub	sp, #16
 8006716:	af00      	add	r7, sp, #0
 8006718:	6078      	str	r0, [r7, #4]
 800671a:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800671c:	2300      	movs	r3, #0
 800671e:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	f8d3 342c 	ldr.w	r3, [r3, #1068]	; 0x42c
 8006726:	683a      	ldr	r2, [r7, #0]
 8006728:	429a      	cmp	r2, r3
 800672a:	d01b      	beq.n	8006764 <move_window+0x52>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800672c:	6878      	ldr	r0, [r7, #4]
 800672e:	f7ff ffa7 	bl	8006680 <sync_window>
 8006732:	4603      	mov	r3, r0
 8006734:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8006736:	7bfb      	ldrb	r3, [r7, #15]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d113      	bne.n	8006764 <move_window+0x52>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	f893 0401 	ldrb.w	r0, [r3, #1025]	; 0x401
 8006742:	6879      	ldr	r1, [r7, #4]
 8006744:	2301      	movs	r3, #1
 8006746:	683a      	ldr	r2, [r7, #0]
 8006748:	f7ff fd10 	bl	800616c <disk_read>
 800674c:	4603      	mov	r3, r0
 800674e:	2b00      	cmp	r3, #0
 8006750:	d004      	beq.n	800675c <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8006752:	f04f 33ff 	mov.w	r3, #4294967295
 8006756:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8006758:	2301      	movs	r3, #1
 800675a:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	683a      	ldr	r2, [r7, #0]
 8006760:	f8c3 242c 	str.w	r2, [r3, #1068]	; 0x42c
		}
	}
	return res;
 8006764:	7bfb      	ldrb	r3, [r7, #15]
}
 8006766:	4618      	mov	r0, r3
 8006768:	3710      	adds	r7, #16
 800676a:	46bd      	mov	sp, r7
 800676c:	bd80      	pop	{r7, pc}

0800676e <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 800676e:	b580      	push	{r7, lr}
 8006770:	b084      	sub	sp, #16
 8006772:	af00      	add	r7, sp, #0
 8006774:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8006776:	6878      	ldr	r0, [r7, #4]
 8006778:	f7ff ff82 	bl	8006680 <sync_window>
 800677c:	4603      	mov	r3, r0
 800677e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8006780:	7bfb      	ldrb	r3, [r7, #15]
 8006782:	2b00      	cmp	r3, #0
 8006784:	f040 809c 	bne.w	80068c0 <sync_fs+0x152>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 800678e:	2b03      	cmp	r3, #3
 8006790:	f040 8089 	bne.w	80068a6 <sync_fs+0x138>
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	f893 3405 	ldrb.w	r3, [r3, #1029]	; 0x405
 800679a:	2b01      	cmp	r3, #1
 800679c:	f040 8083 	bne.w	80068a6 <sync_fs+0x138>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 80067a0:	6878      	ldr	r0, [r7, #4]
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 80067a8:	461a      	mov	r2, r3
 80067aa:	2100      	movs	r1, #0
 80067ac:	f7ff fd5a 	bl	8006264 <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2255      	movs	r2, #85	; 0x55
 80067b4:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	22aa      	movs	r2, #170	; 0xaa
 80067bc:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2252      	movs	r2, #82	; 0x52
 80067c4:	701a      	strb	r2, [r3, #0]
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	2252      	movs	r2, #82	; 0x52
 80067ca:	705a      	strb	r2, [r3, #1]
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2261      	movs	r2, #97	; 0x61
 80067d0:	709a      	strb	r2, [r3, #2]
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	2241      	movs	r2, #65	; 0x41
 80067d6:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2272      	movs	r2, #114	; 0x72
 80067dc:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2272      	movs	r2, #114	; 0x72
 80067e4:	f883 21e5 	strb.w	r2, [r3, #485]	; 0x1e5
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2241      	movs	r2, #65	; 0x41
 80067ec:	f883 21e6 	strb.w	r2, [r3, #486]	; 0x1e6
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2261      	movs	r2, #97	; 0x61
 80067f4:	f883 21e7 	strb.w	r2, [r3, #487]	; 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 80067fe:	b2da      	uxtb	r2, r3
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 800680c:	b29b      	uxth	r3, r3
 800680e:	0a1b      	lsrs	r3, r3, #8
 8006810:	b29b      	uxth	r3, r3
 8006812:	b2da      	uxtb	r2, r3
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	f883 21e9 	strb.w	r2, [r3, #489]	; 0x1e9
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8006820:	0c1b      	lsrs	r3, r3, #16
 8006822:	b2da      	uxtb	r2, r3
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	f883 21ea 	strb.w	r2, [r3, #490]	; 0x1ea
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8006830:	0e1b      	lsrs	r3, r3, #24
 8006832:	b2da      	uxtb	r2, r3
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	f883 21eb 	strb.w	r2, [r3, #491]	; 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8006840:	b2da      	uxtb	r2, r3
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	f883 21ec 	strb.w	r2, [r3, #492]	; 0x1ec
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800684e:	b29b      	uxth	r3, r3
 8006850:	0a1b      	lsrs	r3, r3, #8
 8006852:	b29b      	uxth	r3, r3
 8006854:	b2da      	uxtb	r2, r3
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	f883 21ed 	strb.w	r2, [r3, #493]	; 0x1ed
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8006862:	0c1b      	lsrs	r3, r3, #16
 8006864:	b2da      	uxtb	r2, r3
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	f883 21ee 	strb.w	r2, [r3, #494]	; 0x1ee
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8006872:	0e1b      	lsrs	r3, r3, #24
 8006874:	b2da      	uxtb	r2, r3
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	f883 21ef 	strb.w	r2, [r3, #495]	; 0x1ef
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
 8006882:	1c5a      	adds	r2, r3, #1
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	f8c3 242c 	str.w	r2, [r3, #1068]	; 0x42c
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	f893 0401 	ldrb.w	r0, [r3, #1025]	; 0x401
 8006890:	6879      	ldr	r1, [r7, #4]
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	f8d3 242c 	ldr.w	r2, [r3, #1068]	; 0x42c
 8006898:	2301      	movs	r3, #1
 800689a:	f7ff fc87 	bl	80061ac <disk_write>
			fs->fsi_flag = 0;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	2200      	movs	r2, #0
 80068a2:	f883 2405 	strb.w	r2, [r3, #1029]	; 0x405
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	f893 3401 	ldrb.w	r3, [r3, #1025]	; 0x401
 80068ac:	2200      	movs	r2, #0
 80068ae:	2100      	movs	r1, #0
 80068b0:	4618      	mov	r0, r3
 80068b2:	f7ff fc9b 	bl	80061ec <disk_ioctl>
 80068b6:	4603      	mov	r3, r0
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d001      	beq.n	80068c0 <sync_fs+0x152>
			res = FR_DISK_ERR;
 80068bc:	2301      	movs	r3, #1
 80068be:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80068c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80068c2:	4618      	mov	r0, r3
 80068c4:	3710      	adds	r7, #16
 80068c6:	46bd      	mov	sp, r7
 80068c8:	bd80      	pop	{r7, pc}

080068ca <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80068ca:	b480      	push	{r7}
 80068cc:	b083      	sub	sp, #12
 80068ce:	af00      	add	r7, sp, #0
 80068d0:	6078      	str	r0, [r7, #4]
 80068d2:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	3b02      	subs	r3, #2
 80068d8:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 80068e0:	3b02      	subs	r3, #2
 80068e2:	683a      	ldr	r2, [r7, #0]
 80068e4:	429a      	cmp	r2, r3
 80068e6:	d301      	bcc.n	80068ec <clust2sect+0x22>
 80068e8:	2300      	movs	r3, #0
 80068ea:	e00a      	b.n	8006902 <clust2sect+0x38>
	return clst * fs->csize + fs->database;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 80068f2:	461a      	mov	r2, r3
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	fb03 f202 	mul.w	r2, r3, r2
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	f8d3 3428 	ldr.w	r3, [r3, #1064]	; 0x428
 8006900:	4413      	add	r3, r2
}
 8006902:	4618      	mov	r0, r3
 8006904:	370c      	adds	r7, #12
 8006906:	46bd      	mov	sp, r7
 8006908:	bc80      	pop	{r7}
 800690a:	4770      	bx	lr

0800690c <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 800690c:	b580      	push	{r7, lr}
 800690e:	b086      	sub	sp, #24
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
 8006914:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8006916:	683b      	ldr	r3, [r7, #0]
 8006918:	2b01      	cmp	r3, #1
 800691a:	d905      	bls.n	8006928 <get_fat+0x1c>
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8006922:	683a      	ldr	r2, [r7, #0]
 8006924:	429a      	cmp	r2, r3
 8006926:	d302      	bcc.n	800692e <get_fat+0x22>
		val = 1;	/* Internal error */
 8006928:	2301      	movs	r3, #1
 800692a:	617b      	str	r3, [r7, #20]
 800692c:	e0d7      	b.n	8006ade <get_fat+0x1d2>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800692e:	f04f 33ff 	mov.w	r3, #4294967295
 8006932:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 800693a:	2b03      	cmp	r3, #3
 800693c:	f000 808f 	beq.w	8006a5e <get_fat+0x152>
 8006940:	2b03      	cmp	r3, #3
 8006942:	f300 80c2 	bgt.w	8006aca <get_fat+0x1be>
 8006946:	2b01      	cmp	r3, #1
 8006948:	d002      	beq.n	8006950 <get_fat+0x44>
 800694a:	2b02      	cmp	r3, #2
 800694c:	d059      	beq.n	8006a02 <get_fat+0xf6>
 800694e:	e0bc      	b.n	8006aca <get_fat+0x1be>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8006950:	683b      	ldr	r3, [r7, #0]
 8006952:	60fb      	str	r3, [r7, #12]
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	085b      	lsrs	r3, r3, #1
 8006958:	68fa      	ldr	r2, [r7, #12]
 800695a:	4413      	add	r3, r2
 800695c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	f8d3 2420 	ldr.w	r2, [r3, #1056]	; 0x420
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800696a:	4619      	mov	r1, r3
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	fbb3 f3f1 	udiv	r3, r3, r1
 8006972:	4413      	add	r3, r2
 8006974:	4619      	mov	r1, r3
 8006976:	6878      	ldr	r0, [r7, #4]
 8006978:	f7ff fecb 	bl	8006712 <move_window>
 800697c:	4603      	mov	r3, r0
 800697e:	2b00      	cmp	r3, #0
 8006980:	f040 80a6 	bne.w	8006ad0 <get_fat+0x1c4>
			wc = fs->win.d8[bc++ % SS(fs)];
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	1c5a      	adds	r2, r3, #1
 8006988:	60fa      	str	r2, [r7, #12]
 800698a:	687a      	ldr	r2, [r7, #4]
 800698c:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 8006990:	fbb3 f1f2 	udiv	r1, r3, r2
 8006994:	fb02 f201 	mul.w	r2, r2, r1
 8006998:	1a9b      	subs	r3, r3, r2
 800699a:	687a      	ldr	r2, [r7, #4]
 800699c:	5cd3      	ldrb	r3, [r2, r3]
 800699e:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	f8d3 2420 	ldr.w	r2, [r3, #1056]	; 0x420
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 80069ac:	4619      	mov	r1, r3
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	fbb3 f3f1 	udiv	r3, r3, r1
 80069b4:	4413      	add	r3, r2
 80069b6:	4619      	mov	r1, r3
 80069b8:	6878      	ldr	r0, [r7, #4]
 80069ba:	f7ff feaa 	bl	8006712 <move_window>
 80069be:	4603      	mov	r3, r0
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	f040 8087 	bne.w	8006ad4 <get_fat+0x1c8>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 80069cc:	461a      	mov	r2, r3
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	fbb3 f1f2 	udiv	r1, r3, r2
 80069d4:	fb02 f201 	mul.w	r2, r2, r1
 80069d8:	1a9b      	subs	r3, r3, r2
 80069da:	687a      	ldr	r2, [r7, #4]
 80069dc:	5cd3      	ldrb	r3, [r2, r3]
 80069de:	021b      	lsls	r3, r3, #8
 80069e0:	461a      	mov	r2, r3
 80069e2:	68bb      	ldr	r3, [r7, #8]
 80069e4:	4313      	orrs	r3, r2
 80069e6:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	f003 0301 	and.w	r3, r3, #1
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d002      	beq.n	80069f8 <get_fat+0xec>
 80069f2:	68bb      	ldr	r3, [r7, #8]
 80069f4:	091b      	lsrs	r3, r3, #4
 80069f6:	e002      	b.n	80069fe <get_fat+0xf2>
 80069f8:	68bb      	ldr	r3, [r7, #8]
 80069fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80069fe:	617b      	str	r3, [r7, #20]
			break;
 8006a00:	e06d      	b.n	8006ade <get_fat+0x1d2>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	f8d3 2420 	ldr.w	r2, [r3, #1056]	; 0x420
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 8006a0e:	085b      	lsrs	r3, r3, #1
 8006a10:	b29b      	uxth	r3, r3
 8006a12:	4619      	mov	r1, r3
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	fbb3 f3f1 	udiv	r3, r3, r1
 8006a1a:	4413      	add	r3, r2
 8006a1c:	4619      	mov	r1, r3
 8006a1e:	6878      	ldr	r0, [r7, #4]
 8006a20:	f7ff fe77 	bl	8006712 <move_window>
 8006a24:	4603      	mov	r3, r0
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d156      	bne.n	8006ad8 <get_fat+0x1cc>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8006a2a:	683b      	ldr	r3, [r7, #0]
 8006a2c:	005b      	lsls	r3, r3, #1
 8006a2e:	687a      	ldr	r2, [r7, #4]
 8006a30:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 8006a34:	fbb3 f1f2 	udiv	r1, r3, r2
 8006a38:	fb02 f201 	mul.w	r2, r2, r1
 8006a3c:	1a9b      	subs	r3, r3, r2
 8006a3e:	687a      	ldr	r2, [r7, #4]
 8006a40:	4413      	add	r3, r2
 8006a42:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 8006a44:	693b      	ldr	r3, [r7, #16]
 8006a46:	3301      	adds	r3, #1
 8006a48:	781b      	ldrb	r3, [r3, #0]
 8006a4a:	021b      	lsls	r3, r3, #8
 8006a4c:	b21a      	sxth	r2, r3
 8006a4e:	693b      	ldr	r3, [r7, #16]
 8006a50:	781b      	ldrb	r3, [r3, #0]
 8006a52:	b21b      	sxth	r3, r3
 8006a54:	4313      	orrs	r3, r2
 8006a56:	b21b      	sxth	r3, r3
 8006a58:	b29b      	uxth	r3, r3
 8006a5a:	617b      	str	r3, [r7, #20]
			break;
 8006a5c:	e03f      	b.n	8006ade <get_fat+0x1d2>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	f8d3 2420 	ldr.w	r2, [r3, #1056]	; 0x420
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 8006a6a:	089b      	lsrs	r3, r3, #2
 8006a6c:	b29b      	uxth	r3, r3
 8006a6e:	4619      	mov	r1, r3
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	fbb3 f3f1 	udiv	r3, r3, r1
 8006a76:	4413      	add	r3, r2
 8006a78:	4619      	mov	r1, r3
 8006a7a:	6878      	ldr	r0, [r7, #4]
 8006a7c:	f7ff fe49 	bl	8006712 <move_window>
 8006a80:	4603      	mov	r3, r0
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d12a      	bne.n	8006adc <get_fat+0x1d0>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	009b      	lsls	r3, r3, #2
 8006a8a:	687a      	ldr	r2, [r7, #4]
 8006a8c:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 8006a90:	fbb3 f1f2 	udiv	r1, r3, r2
 8006a94:	fb02 f201 	mul.w	r2, r2, r1
 8006a98:	1a9b      	subs	r3, r3, r2
 8006a9a:	687a      	ldr	r2, [r7, #4]
 8006a9c:	4413      	add	r3, r2
 8006a9e:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 8006aa0:	693b      	ldr	r3, [r7, #16]
 8006aa2:	3303      	adds	r3, #3
 8006aa4:	781b      	ldrb	r3, [r3, #0]
 8006aa6:	061a      	lsls	r2, r3, #24
 8006aa8:	693b      	ldr	r3, [r7, #16]
 8006aaa:	3302      	adds	r3, #2
 8006aac:	781b      	ldrb	r3, [r3, #0]
 8006aae:	041b      	lsls	r3, r3, #16
 8006ab0:	4313      	orrs	r3, r2
 8006ab2:	693a      	ldr	r2, [r7, #16]
 8006ab4:	3201      	adds	r2, #1
 8006ab6:	7812      	ldrb	r2, [r2, #0]
 8006ab8:	0212      	lsls	r2, r2, #8
 8006aba:	4313      	orrs	r3, r2
 8006abc:	693a      	ldr	r2, [r7, #16]
 8006abe:	7812      	ldrb	r2, [r2, #0]
 8006ac0:	4313      	orrs	r3, r2
 8006ac2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006ac6:	617b      	str	r3, [r7, #20]
			break;
 8006ac8:	e009      	b.n	8006ade <get_fat+0x1d2>

		default:
			val = 1;	/* Internal error */
 8006aca:	2301      	movs	r3, #1
 8006acc:	617b      	str	r3, [r7, #20]
 8006ace:	e006      	b.n	8006ade <get_fat+0x1d2>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006ad0:	bf00      	nop
 8006ad2:	e004      	b.n	8006ade <get_fat+0x1d2>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006ad4:	bf00      	nop
 8006ad6:	e002      	b.n	8006ade <get_fat+0x1d2>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006ad8:	bf00      	nop
 8006ada:	e000      	b.n	8006ade <get_fat+0x1d2>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006adc:	bf00      	nop
		}
	}

	return val;
 8006ade:	697b      	ldr	r3, [r7, #20]
}
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	3718      	adds	r7, #24
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	bd80      	pop	{r7, pc}

08006ae8 <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	b088      	sub	sp, #32
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	60f8      	str	r0, [r7, #12]
 8006af0:	60b9      	str	r1, [r7, #8]
 8006af2:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8006af4:	68bb      	ldr	r3, [r7, #8]
 8006af6:	2b01      	cmp	r3, #1
 8006af8:	d905      	bls.n	8006b06 <put_fat+0x1e>
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8006b00:	68ba      	ldr	r2, [r7, #8]
 8006b02:	429a      	cmp	r2, r3
 8006b04:	d302      	bcc.n	8006b0c <put_fat+0x24>
		res = FR_INT_ERR;
 8006b06:	2302      	movs	r3, #2
 8006b08:	77fb      	strb	r3, [r7, #31]
 8006b0a:	e128      	b.n	8006d5e <put_fat+0x276>

	} else {
		switch (fs->fs_type) {
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 8006b12:	2b03      	cmp	r3, #3
 8006b14:	f000 80c3 	beq.w	8006c9e <put_fat+0x1b6>
 8006b18:	2b03      	cmp	r3, #3
 8006b1a:	f300 8116 	bgt.w	8006d4a <put_fat+0x262>
 8006b1e:	2b01      	cmp	r3, #1
 8006b20:	d003      	beq.n	8006b2a <put_fat+0x42>
 8006b22:	2b02      	cmp	r3, #2
 8006b24:	f000 8087 	beq.w	8006c36 <put_fat+0x14e>
 8006b28:	e10f      	b.n	8006d4a <put_fat+0x262>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8006b2a:	68bb      	ldr	r3, [r7, #8]
 8006b2c:	617b      	str	r3, [r7, #20]
 8006b2e:	697b      	ldr	r3, [r7, #20]
 8006b30:	085b      	lsrs	r3, r3, #1
 8006b32:	697a      	ldr	r2, [r7, #20]
 8006b34:	4413      	add	r3, r2
 8006b36:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	f8d3 2420 	ldr.w	r2, [r3, #1056]	; 0x420
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 8006b44:	4619      	mov	r1, r3
 8006b46:	697b      	ldr	r3, [r7, #20]
 8006b48:	fbb3 f3f1 	udiv	r3, r3, r1
 8006b4c:	4413      	add	r3, r2
 8006b4e:	4619      	mov	r1, r3
 8006b50:	68f8      	ldr	r0, [r7, #12]
 8006b52:	f7ff fdde 	bl	8006712 <move_window>
 8006b56:	4603      	mov	r3, r0
 8006b58:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006b5a:	7ffb      	ldrb	r3, [r7, #31]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	f040 80f7 	bne.w	8006d50 <put_fat+0x268>
			p = &fs->win.d8[bc++ % SS(fs)];
 8006b62:	697b      	ldr	r3, [r7, #20]
 8006b64:	1c5a      	adds	r2, r3, #1
 8006b66:	617a      	str	r2, [r7, #20]
 8006b68:	68fa      	ldr	r2, [r7, #12]
 8006b6a:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 8006b6e:	fbb3 f1f2 	udiv	r1, r3, r2
 8006b72:	fb02 f201 	mul.w	r2, r2, r1
 8006b76:	1a9b      	subs	r3, r3, r2
 8006b78:	68fa      	ldr	r2, [r7, #12]
 8006b7a:	4413      	add	r3, r2
 8006b7c:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8006b7e:	68bb      	ldr	r3, [r7, #8]
 8006b80:	f003 0301 	and.w	r3, r3, #1
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d00d      	beq.n	8006ba4 <put_fat+0xbc>
 8006b88:	69bb      	ldr	r3, [r7, #24]
 8006b8a:	781b      	ldrb	r3, [r3, #0]
 8006b8c:	b25b      	sxtb	r3, r3
 8006b8e:	f003 030f 	and.w	r3, r3, #15
 8006b92:	b25a      	sxtb	r2, r3
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	b2db      	uxtb	r3, r3
 8006b98:	011b      	lsls	r3, r3, #4
 8006b9a:	b25b      	sxtb	r3, r3
 8006b9c:	4313      	orrs	r3, r2
 8006b9e:	b25b      	sxtb	r3, r3
 8006ba0:	b2db      	uxtb	r3, r3
 8006ba2:	e001      	b.n	8006ba8 <put_fat+0xc0>
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	b2db      	uxtb	r3, r3
 8006ba8:	69ba      	ldr	r2, [r7, #24]
 8006baa:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	2201      	movs	r2, #1
 8006bb0:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	f8d3 2420 	ldr.w	r2, [r3, #1056]	; 0x420
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 8006bc0:	4619      	mov	r1, r3
 8006bc2:	697b      	ldr	r3, [r7, #20]
 8006bc4:	fbb3 f3f1 	udiv	r3, r3, r1
 8006bc8:	4413      	add	r3, r2
 8006bca:	4619      	mov	r1, r3
 8006bcc:	68f8      	ldr	r0, [r7, #12]
 8006bce:	f7ff fda0 	bl	8006712 <move_window>
 8006bd2:	4603      	mov	r3, r0
 8006bd4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006bd6:	7ffb      	ldrb	r3, [r7, #31]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	f040 80bb 	bne.w	8006d54 <put_fat+0x26c>
			p = &fs->win.d8[bc % SS(fs)];
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 8006be4:	461a      	mov	r2, r3
 8006be6:	697b      	ldr	r3, [r7, #20]
 8006be8:	fbb3 f1f2 	udiv	r1, r3, r2
 8006bec:	fb02 f201 	mul.w	r2, r2, r1
 8006bf0:	1a9b      	subs	r3, r3, r2
 8006bf2:	68fa      	ldr	r2, [r7, #12]
 8006bf4:	4413      	add	r3, r2
 8006bf6:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8006bf8:	68bb      	ldr	r3, [r7, #8]
 8006bfa:	f003 0301 	and.w	r3, r3, #1
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d003      	beq.n	8006c0a <put_fat+0x122>
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	091b      	lsrs	r3, r3, #4
 8006c06:	b2db      	uxtb	r3, r3
 8006c08:	e00e      	b.n	8006c28 <put_fat+0x140>
 8006c0a:	69bb      	ldr	r3, [r7, #24]
 8006c0c:	781b      	ldrb	r3, [r3, #0]
 8006c0e:	b25b      	sxtb	r3, r3
 8006c10:	f023 030f 	bic.w	r3, r3, #15
 8006c14:	b25a      	sxtb	r2, r3
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	0a1b      	lsrs	r3, r3, #8
 8006c1a:	b25b      	sxtb	r3, r3
 8006c1c:	f003 030f 	and.w	r3, r3, #15
 8006c20:	b25b      	sxtb	r3, r3
 8006c22:	4313      	orrs	r3, r2
 8006c24:	b25b      	sxtb	r3, r3
 8006c26:	b2db      	uxtb	r3, r3
 8006c28:	69ba      	ldr	r2, [r7, #24]
 8006c2a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	2201      	movs	r2, #1
 8006c30:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
			break;
 8006c34:	e093      	b.n	8006d5e <put_fat+0x276>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	f8d3 2420 	ldr.w	r2, [r3, #1056]	; 0x420
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 8006c42:	085b      	lsrs	r3, r3, #1
 8006c44:	b29b      	uxth	r3, r3
 8006c46:	4619      	mov	r1, r3
 8006c48:	68bb      	ldr	r3, [r7, #8]
 8006c4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8006c4e:	4413      	add	r3, r2
 8006c50:	4619      	mov	r1, r3
 8006c52:	68f8      	ldr	r0, [r7, #12]
 8006c54:	f7ff fd5d 	bl	8006712 <move_window>
 8006c58:	4603      	mov	r3, r0
 8006c5a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006c5c:	7ffb      	ldrb	r3, [r7, #31]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d17a      	bne.n	8006d58 <put_fat+0x270>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8006c62:	68bb      	ldr	r3, [r7, #8]
 8006c64:	005b      	lsls	r3, r3, #1
 8006c66:	68fa      	ldr	r2, [r7, #12]
 8006c68:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 8006c6c:	fbb3 f1f2 	udiv	r1, r3, r2
 8006c70:	fb02 f201 	mul.w	r2, r2, r1
 8006c74:	1a9b      	subs	r3, r3, r2
 8006c76:	68fa      	ldr	r2, [r7, #12]
 8006c78:	4413      	add	r3, r2
 8006c7a:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	b2da      	uxtb	r2, r3
 8006c80:	69bb      	ldr	r3, [r7, #24]
 8006c82:	701a      	strb	r2, [r3, #0]
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	b29b      	uxth	r3, r3
 8006c88:	0a1b      	lsrs	r3, r3, #8
 8006c8a:	b29a      	uxth	r2, r3
 8006c8c:	69bb      	ldr	r3, [r7, #24]
 8006c8e:	3301      	adds	r3, #1
 8006c90:	b2d2      	uxtb	r2, r2
 8006c92:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	2201      	movs	r2, #1
 8006c98:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
			break;
 8006c9c:	e05f      	b.n	8006d5e <put_fat+0x276>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	f8d3 2420 	ldr.w	r2, [r3, #1056]	; 0x420
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 8006caa:	089b      	lsrs	r3, r3, #2
 8006cac:	b29b      	uxth	r3, r3
 8006cae:	4619      	mov	r1, r3
 8006cb0:	68bb      	ldr	r3, [r7, #8]
 8006cb2:	fbb3 f3f1 	udiv	r3, r3, r1
 8006cb6:	4413      	add	r3, r2
 8006cb8:	4619      	mov	r1, r3
 8006cba:	68f8      	ldr	r0, [r7, #12]
 8006cbc:	f7ff fd29 	bl	8006712 <move_window>
 8006cc0:	4603      	mov	r3, r0
 8006cc2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006cc4:	7ffb      	ldrb	r3, [r7, #31]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d148      	bne.n	8006d5c <put_fat+0x274>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8006cca:	68bb      	ldr	r3, [r7, #8]
 8006ccc:	009b      	lsls	r3, r3, #2
 8006cce:	68fa      	ldr	r2, [r7, #12]
 8006cd0:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 8006cd4:	fbb3 f1f2 	udiv	r1, r3, r2
 8006cd8:	fb02 f201 	mul.w	r2, r2, r1
 8006cdc:	1a9b      	subs	r3, r3, r2
 8006cde:	68fa      	ldr	r2, [r7, #12]
 8006ce0:	4413      	add	r3, r2
 8006ce2:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 8006ce4:	69bb      	ldr	r3, [r7, #24]
 8006ce6:	3303      	adds	r3, #3
 8006ce8:	781b      	ldrb	r3, [r3, #0]
 8006cea:	061a      	lsls	r2, r3, #24
 8006cec:	69bb      	ldr	r3, [r7, #24]
 8006cee:	3302      	adds	r3, #2
 8006cf0:	781b      	ldrb	r3, [r3, #0]
 8006cf2:	041b      	lsls	r3, r3, #16
 8006cf4:	4313      	orrs	r3, r2
 8006cf6:	69ba      	ldr	r2, [r7, #24]
 8006cf8:	3201      	adds	r2, #1
 8006cfa:	7812      	ldrb	r2, [r2, #0]
 8006cfc:	0212      	lsls	r2, r2, #8
 8006cfe:	4313      	orrs	r3, r2
 8006d00:	69ba      	ldr	r2, [r7, #24]
 8006d02:	7812      	ldrb	r2, [r2, #0]
 8006d04:	4313      	orrs	r3, r2
 8006d06:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8006d0a:	687a      	ldr	r2, [r7, #4]
 8006d0c:	4313      	orrs	r3, r2
 8006d0e:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	b2da      	uxtb	r2, r3
 8006d14:	69bb      	ldr	r3, [r7, #24]
 8006d16:	701a      	strb	r2, [r3, #0]
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	b29b      	uxth	r3, r3
 8006d1c:	0a1b      	lsrs	r3, r3, #8
 8006d1e:	b29a      	uxth	r2, r3
 8006d20:	69bb      	ldr	r3, [r7, #24]
 8006d22:	3301      	adds	r3, #1
 8006d24:	b2d2      	uxtb	r2, r2
 8006d26:	701a      	strb	r2, [r3, #0]
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	0c1a      	lsrs	r2, r3, #16
 8006d2c:	69bb      	ldr	r3, [r7, #24]
 8006d2e:	3302      	adds	r3, #2
 8006d30:	b2d2      	uxtb	r2, r2
 8006d32:	701a      	strb	r2, [r3, #0]
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	0e1a      	lsrs	r2, r3, #24
 8006d38:	69bb      	ldr	r3, [r7, #24]
 8006d3a:	3303      	adds	r3, #3
 8006d3c:	b2d2      	uxtb	r2, r2
 8006d3e:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	2201      	movs	r2, #1
 8006d44:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
			break;
 8006d48:	e009      	b.n	8006d5e <put_fat+0x276>

		default :
			res = FR_INT_ERR;
 8006d4a:	2302      	movs	r3, #2
 8006d4c:	77fb      	strb	r3, [r7, #31]
 8006d4e:	e006      	b.n	8006d5e <put_fat+0x276>
			if (res != FR_OK) break;
 8006d50:	bf00      	nop
 8006d52:	e004      	b.n	8006d5e <put_fat+0x276>
			if (res != FR_OK) break;
 8006d54:	bf00      	nop
 8006d56:	e002      	b.n	8006d5e <put_fat+0x276>
			if (res != FR_OK) break;
 8006d58:	bf00      	nop
 8006d5a:	e000      	b.n	8006d5e <put_fat+0x276>
			if (res != FR_OK) break;
 8006d5c:	bf00      	nop
		}
	}

	return res;
 8006d5e:	7ffb      	ldrb	r3, [r7, #31]
}
 8006d60:	4618      	mov	r0, r3
 8006d62:	3720      	adds	r7, #32
 8006d64:	46bd      	mov	sp, r7
 8006d66:	bd80      	pop	{r7, pc}

08006d68 <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	b084      	sub	sp, #16
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
 8006d70:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8006d72:	683b      	ldr	r3, [r7, #0]
 8006d74:	2b01      	cmp	r3, #1
 8006d76:	d905      	bls.n	8006d84 <remove_chain+0x1c>
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8006d7e:	683a      	ldr	r2, [r7, #0]
 8006d80:	429a      	cmp	r2, r3
 8006d82:	d302      	bcc.n	8006d8a <remove_chain+0x22>
		res = FR_INT_ERR;
 8006d84:	2302      	movs	r3, #2
 8006d86:	73fb      	strb	r3, [r7, #15]
 8006d88:	e043      	b.n	8006e12 <remove_chain+0xaa>

	} else {
		res = FR_OK;
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8006d8e:	e036      	b.n	8006dfe <remove_chain+0x96>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 8006d90:	6839      	ldr	r1, [r7, #0]
 8006d92:	6878      	ldr	r0, [r7, #4]
 8006d94:	f7ff fdba 	bl	800690c <get_fat>
 8006d98:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 8006d9a:	68bb      	ldr	r3, [r7, #8]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d035      	beq.n	8006e0c <remove_chain+0xa4>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 8006da0:	68bb      	ldr	r3, [r7, #8]
 8006da2:	2b01      	cmp	r3, #1
 8006da4:	d102      	bne.n	8006dac <remove_chain+0x44>
 8006da6:	2302      	movs	r3, #2
 8006da8:	73fb      	strb	r3, [r7, #15]
 8006daa:	e032      	b.n	8006e12 <remove_chain+0xaa>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 8006dac:	68bb      	ldr	r3, [r7, #8]
 8006dae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006db2:	d102      	bne.n	8006dba <remove_chain+0x52>
 8006db4:	2301      	movs	r3, #1
 8006db6:	73fb      	strb	r3, [r7, #15]
 8006db8:	e02b      	b.n	8006e12 <remove_chain+0xaa>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 8006dba:	2200      	movs	r2, #0
 8006dbc:	6839      	ldr	r1, [r7, #0]
 8006dbe:	6878      	ldr	r0, [r7, #4]
 8006dc0:	f7ff fe92 	bl	8006ae8 <put_fat>
 8006dc4:	4603      	mov	r3, r0
 8006dc6:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8006dc8:	7bfb      	ldrb	r3, [r7, #15]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d120      	bne.n	8006e10 <remove_chain+0xa8>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8006dd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dd8:	d00f      	beq.n	8006dfa <remove_chain+0x92>
				fs->free_clust++;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8006de0:	1c5a      	adds	r2, r3, #1
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
				fs->fsi_flag |= 1;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	f893 3405 	ldrb.w	r3, [r3, #1029]	; 0x405
 8006dee:	f043 0301 	orr.w	r3, r3, #1
 8006df2:	b2da      	uxtb	r2, r3
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	f883 2405 	strb.w	r2, [r3, #1029]	; 0x405
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 8006dfa:	68bb      	ldr	r3, [r7, #8]
 8006dfc:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8006e04:	683a      	ldr	r2, [r7, #0]
 8006e06:	429a      	cmp	r2, r3
 8006e08:	d3c2      	bcc.n	8006d90 <remove_chain+0x28>
 8006e0a:	e002      	b.n	8006e12 <remove_chain+0xaa>
			if (nxt == 0) break;				/* Empty cluster? */
 8006e0c:	bf00      	nop
 8006e0e:	e000      	b.n	8006e12 <remove_chain+0xaa>
			if (res != FR_OK) break;
 8006e10:	bf00      	nop
		}
	}

	return res;
 8006e12:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e14:	4618      	mov	r0, r3
 8006e16:	3710      	adds	r7, #16
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	bd80      	pop	{r7, pc}

08006e1c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 8006e1c:	b580      	push	{r7, lr}
 8006e1e:	b086      	sub	sp, #24
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
 8006e24:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 8006e26:	683b      	ldr	r3, [r7, #0]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d10f      	bne.n	8006e4c <create_chain+0x30>
		scl = fs->last_clust;			/* Get suggested start point */
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8006e32:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 8006e34:	693b      	ldr	r3, [r7, #16]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d005      	beq.n	8006e46 <create_chain+0x2a>
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8006e40:	693a      	ldr	r2, [r7, #16]
 8006e42:	429a      	cmp	r2, r3
 8006e44:	d31c      	bcc.n	8006e80 <create_chain+0x64>
 8006e46:	2301      	movs	r3, #1
 8006e48:	613b      	str	r3, [r7, #16]
 8006e4a:	e019      	b.n	8006e80 <create_chain+0x64>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 8006e4c:	6839      	ldr	r1, [r7, #0]
 8006e4e:	6878      	ldr	r0, [r7, #4]
 8006e50:	f7ff fd5c 	bl	800690c <get_fat>
 8006e54:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 8006e56:	68bb      	ldr	r3, [r7, #8]
 8006e58:	2b01      	cmp	r3, #1
 8006e5a:	d801      	bhi.n	8006e60 <create_chain+0x44>
 8006e5c:	2301      	movs	r3, #1
 8006e5e:	e076      	b.n	8006f4e <create_chain+0x132>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8006e60:	68bb      	ldr	r3, [r7, #8]
 8006e62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e66:	d101      	bne.n	8006e6c <create_chain+0x50>
 8006e68:	68bb      	ldr	r3, [r7, #8]
 8006e6a:	e070      	b.n	8006f4e <create_chain+0x132>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8006e72:	68ba      	ldr	r2, [r7, #8]
 8006e74:	429a      	cmp	r2, r3
 8006e76:	d201      	bcs.n	8006e7c <create_chain+0x60>
 8006e78:	68bb      	ldr	r3, [r7, #8]
 8006e7a:	e068      	b.n	8006f4e <create_chain+0x132>
		scl = clst;
 8006e7c:	683b      	ldr	r3, [r7, #0]
 8006e7e:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 8006e80:	693b      	ldr	r3, [r7, #16]
 8006e82:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 8006e84:	697b      	ldr	r3, [r7, #20]
 8006e86:	3301      	adds	r3, #1
 8006e88:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8006e90:	697a      	ldr	r2, [r7, #20]
 8006e92:	429a      	cmp	r2, r3
 8006e94:	d307      	bcc.n	8006ea6 <create_chain+0x8a>
			ncl = 2;
 8006e96:	2302      	movs	r3, #2
 8006e98:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 8006e9a:	697a      	ldr	r2, [r7, #20]
 8006e9c:	693b      	ldr	r3, [r7, #16]
 8006e9e:	429a      	cmp	r2, r3
 8006ea0:	d901      	bls.n	8006ea6 <create_chain+0x8a>
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	e053      	b.n	8006f4e <create_chain+0x132>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 8006ea6:	6979      	ldr	r1, [r7, #20]
 8006ea8:	6878      	ldr	r0, [r7, #4]
 8006eaa:	f7ff fd2f 	bl	800690c <get_fat>
 8006eae:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 8006eb0:	68bb      	ldr	r3, [r7, #8]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d00e      	beq.n	8006ed4 <create_chain+0xb8>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 8006eb6:	68bb      	ldr	r3, [r7, #8]
 8006eb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ebc:	d002      	beq.n	8006ec4 <create_chain+0xa8>
 8006ebe:	68bb      	ldr	r3, [r7, #8]
 8006ec0:	2b01      	cmp	r3, #1
 8006ec2:	d101      	bne.n	8006ec8 <create_chain+0xac>
			return cs;
 8006ec4:	68bb      	ldr	r3, [r7, #8]
 8006ec6:	e042      	b.n	8006f4e <create_chain+0x132>
		if (ncl == scl) return 0;		/* No free cluster */
 8006ec8:	697a      	ldr	r2, [r7, #20]
 8006eca:	693b      	ldr	r3, [r7, #16]
 8006ecc:	429a      	cmp	r2, r3
 8006ece:	d1d9      	bne.n	8006e84 <create_chain+0x68>
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	e03c      	b.n	8006f4e <create_chain+0x132>
		if (cs == 0) break;				/* Found a free cluster */
 8006ed4:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 8006ed6:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 8006eda:	6979      	ldr	r1, [r7, #20]
 8006edc:	6878      	ldr	r0, [r7, #4]
 8006ede:	f7ff fe03 	bl	8006ae8 <put_fat>
 8006ee2:	4603      	mov	r3, r0
 8006ee4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 8006ee6:	7bfb      	ldrb	r3, [r7, #15]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d109      	bne.n	8006f00 <create_chain+0xe4>
 8006eec:	683b      	ldr	r3, [r7, #0]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d006      	beq.n	8006f00 <create_chain+0xe4>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 8006ef2:	697a      	ldr	r2, [r7, #20]
 8006ef4:	6839      	ldr	r1, [r7, #0]
 8006ef6:	6878      	ldr	r0, [r7, #4]
 8006ef8:	f7ff fdf6 	bl	8006ae8 <put_fat>
 8006efc:	4603      	mov	r3, r0
 8006efe:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 8006f00:	7bfb      	ldrb	r3, [r7, #15]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d11a      	bne.n	8006f3c <create_chain+0x120>
		fs->last_clust = ncl;			/* Update FSINFO */
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	697a      	ldr	r2, [r7, #20]
 8006f0a:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
		if (fs->free_clust != 0xFFFFFFFF) {
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8006f14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f18:	d018      	beq.n	8006f4c <create_chain+0x130>
			fs->free_clust--;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8006f20:	1e5a      	subs	r2, r3, #1
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
			fs->fsi_flag |= 1;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	f893 3405 	ldrb.w	r3, [r3, #1029]	; 0x405
 8006f2e:	f043 0301 	orr.w	r3, r3, #1
 8006f32:	b2da      	uxtb	r2, r3
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	f883 2405 	strb.w	r2, [r3, #1029]	; 0x405
 8006f3a:	e007      	b.n	8006f4c <create_chain+0x130>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 8006f3c:	7bfb      	ldrb	r3, [r7, #15]
 8006f3e:	2b01      	cmp	r3, #1
 8006f40:	d102      	bne.n	8006f48 <create_chain+0x12c>
 8006f42:	f04f 33ff 	mov.w	r3, #4294967295
 8006f46:	e000      	b.n	8006f4a <create_chain+0x12e>
 8006f48:	2301      	movs	r3, #1
 8006f4a:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 8006f4c:	697b      	ldr	r3, [r7, #20]
}
 8006f4e:	4618      	mov	r0, r3
 8006f50:	3718      	adds	r7, #24
 8006f52:	46bd      	mov	sp, r7
 8006f54:	bd80      	pop	{r7, pc}

08006f56 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 8006f56:	b480      	push	{r7}
 8006f58:	b087      	sub	sp, #28
 8006f5a:	af00      	add	r7, sp, #0
 8006f5c:	6078      	str	r0, [r7, #4]
 8006f5e:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	f8d3 3424 	ldr.w	r3, [r3, #1060]	; 0x424
 8006f66:	3304      	adds	r3, #4
 8006f68:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8006f70:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 8006f74:	461a      	mov	r2, r3
 8006f76:	683b      	ldr	r3, [r7, #0]
 8006f78:	fbb3 f3f2 	udiv	r3, r3, r2
 8006f7c:	687a      	ldr	r2, [r7, #4]
 8006f7e:	f8d2 2400 	ldr.w	r2, [r2, #1024]	; 0x400
 8006f82:	f892 2402 	ldrb.w	r2, [r2, #1026]	; 0x402
 8006f86:	fbb3 f3f2 	udiv	r3, r3, r2
 8006f8a:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006f8c:	693b      	ldr	r3, [r7, #16]
 8006f8e:	1d1a      	adds	r2, r3, #4
 8006f90:	613a      	str	r2, [r7, #16]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d101      	bne.n	8006fa0 <clmt_clust+0x4a>
 8006f9c:	2300      	movs	r3, #0
 8006f9e:	e010      	b.n	8006fc2 <clmt_clust+0x6c>
		if (cl < ncl) break;	/* In this fragment? */
 8006fa0:	697a      	ldr	r2, [r7, #20]
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	429a      	cmp	r2, r3
 8006fa6:	d307      	bcc.n	8006fb8 <clmt_clust+0x62>
		cl -= ncl; tbl++;		/* Next fragment */
 8006fa8:	697a      	ldr	r2, [r7, #20]
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	1ad3      	subs	r3, r2, r3
 8006fae:	617b      	str	r3, [r7, #20]
 8006fb0:	693b      	ldr	r3, [r7, #16]
 8006fb2:	3304      	adds	r3, #4
 8006fb4:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006fb6:	e7e9      	b.n	8006f8c <clmt_clust+0x36>
		if (cl < ncl) break;	/* In this fragment? */
 8006fb8:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8006fba:	693b      	ldr	r3, [r7, #16]
 8006fbc:	681a      	ldr	r2, [r3, #0]
 8006fbe:	697b      	ldr	r3, [r7, #20]
 8006fc0:	4413      	add	r3, r2
}
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	371c      	adds	r7, #28
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	bc80      	pop	{r7}
 8006fca:	4770      	bx	lr

08006fcc <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b086      	sub	sp, #24
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
 8006fd4:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 8006fd6:	683b      	ldr	r3, [r7, #0]
 8006fd8:	b29a      	uxth	r2, r3
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
	clst = dp->sclust;		/* Table start cluster (0:root) */
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8006fe6:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 8006fe8:	697b      	ldr	r3, [r7, #20]
 8006fea:	2b01      	cmp	r3, #1
 8006fec:	d007      	beq.n	8006ffe <dir_sdi+0x32>
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8006ff4:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8006ff8:	697a      	ldr	r2, [r7, #20]
 8006ffa:	429a      	cmp	r2, r3
 8006ffc:	d301      	bcc.n	8007002 <dir_sdi+0x36>
		return FR_INT_ERR;
 8006ffe:	2302      	movs	r3, #2
 8007000:	e091      	b.n	8007126 <dir_sdi+0x15a>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 8007002:	697b      	ldr	r3, [r7, #20]
 8007004:	2b00      	cmp	r3, #0
 8007006:	d10c      	bne.n	8007022 <dir_sdi+0x56>
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800700e:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 8007012:	2b03      	cmp	r3, #3
 8007014:	d105      	bne.n	8007022 <dir_sdi+0x56>
		clst = dp->fs->dirbase;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800701c:	f8d3 3424 	ldr.w	r3, [r3, #1060]	; 0x424
 8007020:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8007022:	697b      	ldr	r3, [r7, #20]
 8007024:	2b00      	cmp	r3, #0
 8007026:	d111      	bne.n	800704c <dir_sdi+0x80>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800702e:	f8b3 3408 	ldrh.w	r3, [r3, #1032]	; 0x408
 8007032:	461a      	mov	r2, r3
 8007034:	683b      	ldr	r3, [r7, #0]
 8007036:	4293      	cmp	r3, r2
 8007038:	d301      	bcc.n	800703e <dir_sdi+0x72>
			return FR_INT_ERR;
 800703a:	2302      	movs	r3, #2
 800703c:	e073      	b.n	8007126 <dir_sdi+0x15a>
		sect = dp->fs->dirbase;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8007044:	f8d3 3424 	ldr.w	r3, [r3, #1060]	; 0x424
 8007048:	613b      	str	r3, [r7, #16]
 800704a:	e03b      	b.n	80070c4 <dir_sdi+0xf8>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8007052:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 8007056:	095b      	lsrs	r3, r3, #5
 8007058:	b29b      	uxth	r3, r3
 800705a:	461a      	mov	r2, r3
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8007062:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 8007066:	fb03 f302 	mul.w	r3, r3, r2
 800706a:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 800706c:	e01e      	b.n	80070ac <dir_sdi+0xe0>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8007074:	6979      	ldr	r1, [r7, #20]
 8007076:	4618      	mov	r0, r3
 8007078:	f7ff fc48 	bl	800690c <get_fat>
 800707c:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800707e:	697b      	ldr	r3, [r7, #20]
 8007080:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007084:	d101      	bne.n	800708a <dir_sdi+0xbe>
 8007086:	2301      	movs	r3, #1
 8007088:	e04d      	b.n	8007126 <dir_sdi+0x15a>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 800708a:	697b      	ldr	r3, [r7, #20]
 800708c:	2b01      	cmp	r3, #1
 800708e:	d907      	bls.n	80070a0 <dir_sdi+0xd4>
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8007096:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 800709a:	697a      	ldr	r2, [r7, #20]
 800709c:	429a      	cmp	r2, r3
 800709e:	d301      	bcc.n	80070a4 <dir_sdi+0xd8>
				return FR_INT_ERR;
 80070a0:	2302      	movs	r3, #2
 80070a2:	e040      	b.n	8007126 <dir_sdi+0x15a>
			idx -= ic;
 80070a4:	683a      	ldr	r2, [r7, #0]
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	1ad3      	subs	r3, r2, r3
 80070aa:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 80070ac:	683a      	ldr	r2, [r7, #0]
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	429a      	cmp	r2, r3
 80070b2:	d2dc      	bcs.n	800706e <dir_sdi+0xa2>
		}
		sect = clust2sect(dp->fs, clst);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80070ba:	6979      	ldr	r1, [r7, #20]
 80070bc:	4618      	mov	r0, r3
 80070be:	f7ff fc04 	bl	80068ca <clust2sect>
 80070c2:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	697a      	ldr	r2, [r7, #20]
 80070c8:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
	if (!sect) return FR_INT_ERR;
 80070cc:	693b      	ldr	r3, [r7, #16]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d101      	bne.n	80070d6 <dir_sdi+0x10a>
 80070d2:	2302      	movs	r3, #2
 80070d4:	e027      	b.n	8007126 <dir_sdi+0x15a>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80070dc:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 80070e0:	095b      	lsrs	r3, r3, #5
 80070e2:	b29b      	uxth	r3, r3
 80070e4:	461a      	mov	r2, r3
 80070e6:	683b      	ldr	r3, [r7, #0]
 80070e8:	fbb3 f2f2 	udiv	r2, r3, r2
 80070ec:	693b      	ldr	r3, [r7, #16]
 80070ee:	441a      	add	r2, r3
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80070fc:	4618      	mov	r0, r3
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8007104:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 8007108:	095b      	lsrs	r3, r3, #5
 800710a:	b29b      	uxth	r3, r3
 800710c:	461a      	mov	r2, r3
 800710e:	683b      	ldr	r3, [r7, #0]
 8007110:	fbb3 f1f2 	udiv	r1, r3, r2
 8007114:	fb02 f201 	mul.w	r2, r2, r1
 8007118:	1a9b      	subs	r3, r3, r2
 800711a:	015b      	lsls	r3, r3, #5
 800711c:	18c2      	adds	r2, r0, r3
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414

	return FR_OK;
 8007124:	2300      	movs	r3, #0
}
 8007126:	4618      	mov	r0, r3
 8007128:	3718      	adds	r7, #24
 800712a:	46bd      	mov	sp, r7
 800712c:	bd80      	pop	{r7, pc}

0800712e <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800712e:	b590      	push	{r4, r7, lr}
 8007130:	b087      	sub	sp, #28
 8007132:	af00      	add	r7, sp, #0
 8007134:	6078      	str	r0, [r7, #4]
 8007136:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	f8b3 3406 	ldrh.w	r3, [r3, #1030]	; 0x406
 800713e:	3301      	adds	r3, #1
 8007140:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	b29b      	uxth	r3, r3
 8007146:	2b00      	cmp	r3, #0
 8007148:	d004      	beq.n	8007154 <dir_next+0x26>
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007150:	2b00      	cmp	r3, #0
 8007152:	d101      	bne.n	8007158 <dir_next+0x2a>
		return FR_NO_FILE;
 8007154:	2304      	movs	r3, #4
 8007156:	e100      	b.n	800735a <dir_next+0x22c>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800715e:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 8007162:	095b      	lsrs	r3, r3, #5
 8007164:	b29b      	uxth	r3, r3
 8007166:	461a      	mov	r2, r3
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	fbb3 f1f2 	udiv	r1, r3, r2
 800716e:	fb02 f201 	mul.w	r2, r2, r1
 8007172:	1a9b      	subs	r3, r3, r2
 8007174:	2b00      	cmp	r3, #0
 8007176:	f040 80d3 	bne.w	8007320 <dir_next+0x1f2>
		dp->sect++;					/* Next sector */
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007180:	1c5a      	adds	r2, r3, #1
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410

		if (!dp->clust) {		/* Static table */
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800718e:	2b00      	cmp	r3, #0
 8007190:	d10b      	bne.n	80071aa <dir_next+0x7c>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8007198:	f8b3 3408 	ldrh.w	r3, [r3, #1032]	; 0x408
 800719c:	461a      	mov	r2, r3
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	4293      	cmp	r3, r2
 80071a2:	f0c0 80bd 	bcc.w	8007320 <dir_next+0x1f2>
				return FR_NO_FILE;
 80071a6:	2304      	movs	r3, #4
 80071a8:	e0d7      	b.n	800735a <dir_next+0x22c>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80071b0:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 80071b4:	095b      	lsrs	r3, r3, #5
 80071b6:	b29b      	uxth	r3, r3
 80071b8:	461a      	mov	r2, r3
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	fbb3 f3f2 	udiv	r3, r3, r2
 80071c0:	687a      	ldr	r2, [r7, #4]
 80071c2:	f8d2 2400 	ldr.w	r2, [r2, #1024]	; 0x400
 80071c6:	f892 2402 	ldrb.w	r2, [r2, #1026]	; 0x402
 80071ca:	3a01      	subs	r2, #1
 80071cc:	4013      	ands	r3, r2
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	f040 80a6 	bne.w	8007320 <dir_next+0x1f2>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80071e0:	4619      	mov	r1, r3
 80071e2:	4610      	mov	r0, r2
 80071e4:	f7ff fb92 	bl	800690c <get_fat>
 80071e8:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 80071ea:	697b      	ldr	r3, [r7, #20]
 80071ec:	2b01      	cmp	r3, #1
 80071ee:	d801      	bhi.n	80071f4 <dir_next+0xc6>
 80071f0:	2302      	movs	r3, #2
 80071f2:	e0b2      	b.n	800735a <dir_next+0x22c>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 80071f4:	697b      	ldr	r3, [r7, #20]
 80071f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071fa:	d101      	bne.n	8007200 <dir_next+0xd2>
 80071fc:	2301      	movs	r3, #1
 80071fe:	e0ac      	b.n	800735a <dir_next+0x22c>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8007206:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 800720a:	697a      	ldr	r2, [r7, #20]
 800720c:	429a      	cmp	r2, r3
 800720e:	d378      	bcc.n	8007302 <dir_next+0x1d4>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 8007210:	683b      	ldr	r3, [r7, #0]
 8007212:	2b00      	cmp	r3, #0
 8007214:	d101      	bne.n	800721a <dir_next+0xec>
 8007216:	2304      	movs	r3, #4
 8007218:	e09f      	b.n	800735a <dir_next+0x22c>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8007226:	4619      	mov	r1, r3
 8007228:	4610      	mov	r0, r2
 800722a:	f7ff fdf7 	bl	8006e1c <create_chain>
 800722e:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8007230:	697b      	ldr	r3, [r7, #20]
 8007232:	2b00      	cmp	r3, #0
 8007234:	d101      	bne.n	800723a <dir_next+0x10c>
 8007236:	2307      	movs	r3, #7
 8007238:	e08f      	b.n	800735a <dir_next+0x22c>
					if (clst == 1) return FR_INT_ERR;
 800723a:	697b      	ldr	r3, [r7, #20]
 800723c:	2b01      	cmp	r3, #1
 800723e:	d101      	bne.n	8007244 <dir_next+0x116>
 8007240:	2302      	movs	r3, #2
 8007242:	e08a      	b.n	800735a <dir_next+0x22c>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8007244:	697b      	ldr	r3, [r7, #20]
 8007246:	f1b3 3fff 	cmp.w	r3, #4294967295
 800724a:	d101      	bne.n	8007250 <dir_next+0x122>
 800724c:	2301      	movs	r3, #1
 800724e:	e084      	b.n	800735a <dir_next+0x22c>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8007256:	4618      	mov	r0, r3
 8007258:	f7ff fa12 	bl	8006680 <sync_window>
 800725c:	4603      	mov	r3, r0
 800725e:	2b00      	cmp	r3, #0
 8007260:	d001      	beq.n	8007266 <dir_next+0x138>
 8007262:	2301      	movs	r3, #1
 8007264:	e079      	b.n	800735a <dir_next+0x22c>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800726c:	4618      	mov	r0, r3
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8007274:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 8007278:	461a      	mov	r2, r3
 800727a:	2100      	movs	r1, #0
 800727c:	f7fe fff2 	bl	8006264 <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	f8d3 4400 	ldr.w	r4, [r3, #1024]	; 0x400
 800728c:	6979      	ldr	r1, [r7, #20]
 800728e:	4610      	mov	r0, r2
 8007290:	f7ff fb1b 	bl	80068ca <clust2sect>
 8007294:	4603      	mov	r3, r0
 8007296:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 800729a:	2300      	movs	r3, #0
 800729c:	613b      	str	r3, [r7, #16]
 800729e:	e01b      	b.n	80072d8 <dir_next+0x1aa>
						dp->fs->wflag = 1;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80072a6:	2201      	movs	r2, #1
 80072a8:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80072b2:	4618      	mov	r0, r3
 80072b4:	f7ff f9e4 	bl	8006680 <sync_window>
 80072b8:	4603      	mov	r3, r0
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d001      	beq.n	80072c2 <dir_next+0x194>
 80072be:	2301      	movs	r3, #1
 80072c0:	e04b      	b.n	800735a <dir_next+0x22c>
						dp->fs->winsect++;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80072c8:	f8d3 242c 	ldr.w	r2, [r3, #1068]	; 0x42c
 80072cc:	3201      	adds	r2, #1
 80072ce:	f8c3 242c 	str.w	r2, [r3, #1068]	; 0x42c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 80072d2:	693b      	ldr	r3, [r7, #16]
 80072d4:	3301      	adds	r3, #1
 80072d6:	613b      	str	r3, [r7, #16]
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80072de:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 80072e2:	461a      	mov	r2, r3
 80072e4:	693b      	ldr	r3, [r7, #16]
 80072e6:	4293      	cmp	r3, r2
 80072e8:	d3da      	bcc.n	80072a0 <dir_next+0x172>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80072f0:	f8d3 142c 	ldr.w	r1, [r3, #1068]	; 0x42c
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80072fa:	693a      	ldr	r2, [r7, #16]
 80072fc:	1a8a      	subs	r2, r1, r2
 80072fe:	f8c3 242c 	str.w	r2, [r3, #1068]	; 0x42c
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	697a      	ldr	r2, [r7, #20]
 8007306:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
				dp->sect = clust2sect(dp->fs, clst);
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8007310:	6979      	ldr	r1, [r7, #20]
 8007312:	4618      	mov	r0, r3
 8007314:	f7ff fad9 	bl	80068ca <clust2sect>
 8007318:	4602      	mov	r2, r0
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	b29a      	uxth	r2, r3
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8007330:	4618      	mov	r0, r3
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8007338:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800733c:	095b      	lsrs	r3, r3, #5
 800733e:	b29b      	uxth	r3, r3
 8007340:	461a      	mov	r2, r3
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	fbb3 f1f2 	udiv	r1, r3, r2
 8007348:	fb02 f201 	mul.w	r2, r2, r1
 800734c:	1a9b      	subs	r3, r3, r2
 800734e:	015b      	lsls	r3, r3, #5
 8007350:	18c2      	adds	r2, r0, r3
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414

	return FR_OK;
 8007358:	2300      	movs	r3, #0
}
 800735a:	4618      	mov	r0, r3
 800735c:	371c      	adds	r7, #28
 800735e:	46bd      	mov	sp, r7
 8007360:	bd90      	pop	{r4, r7, pc}

08007362 <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 8007362:	b580      	push	{r7, lr}
 8007364:	b084      	sub	sp, #16
 8007366:	af00      	add	r7, sp, #0
 8007368:	6078      	str	r0, [r7, #4]
 800736a:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 800736c:	2100      	movs	r1, #0
 800736e:	6878      	ldr	r0, [r7, #4]
 8007370:	f7ff fe2c 	bl	8006fcc <dir_sdi>
 8007374:	4603      	mov	r3, r0
 8007376:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8007378:	7bfb      	ldrb	r3, [r7, #15]
 800737a:	2b00      	cmp	r3, #0
 800737c:	d131      	bne.n	80073e2 <dir_alloc+0x80>
		n = 0;
 800737e:	2300      	movs	r3, #0
 8007380:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 800738e:	4619      	mov	r1, r3
 8007390:	4610      	mov	r0, r2
 8007392:	f7ff f9be 	bl	8006712 <move_window>
 8007396:	4603      	mov	r3, r0
 8007398:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800739a:	7bfb      	ldrb	r3, [r7, #15]
 800739c:	2b00      	cmp	r3, #0
 800739e:	d11f      	bne.n	80073e0 <dir_alloc+0x7e>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 80073a6:	781b      	ldrb	r3, [r3, #0]
 80073a8:	2be5      	cmp	r3, #229	; 0xe5
 80073aa:	d005      	beq.n	80073b8 <dir_alloc+0x56>
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 80073b2:	781b      	ldrb	r3, [r3, #0]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d107      	bne.n	80073c8 <dir_alloc+0x66>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80073b8:	68bb      	ldr	r3, [r7, #8]
 80073ba:	3301      	adds	r3, #1
 80073bc:	60bb      	str	r3, [r7, #8]
 80073be:	68ba      	ldr	r2, [r7, #8]
 80073c0:	683b      	ldr	r3, [r7, #0]
 80073c2:	429a      	cmp	r2, r3
 80073c4:	d102      	bne.n	80073cc <dir_alloc+0x6a>
 80073c6:	e00c      	b.n	80073e2 <dir_alloc+0x80>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80073c8:	2300      	movs	r3, #0
 80073ca:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 80073cc:	2101      	movs	r1, #1
 80073ce:	6878      	ldr	r0, [r7, #4]
 80073d0:	f7ff fead 	bl	800712e <dir_next>
 80073d4:	4603      	mov	r3, r0
 80073d6:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 80073d8:	7bfb      	ldrb	r3, [r7, #15]
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d0d1      	beq.n	8007382 <dir_alloc+0x20>
 80073de:	e000      	b.n	80073e2 <dir_alloc+0x80>
			if (res != FR_OK) break;
 80073e0:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80073e2:	7bfb      	ldrb	r3, [r7, #15]
 80073e4:	2b04      	cmp	r3, #4
 80073e6:	d101      	bne.n	80073ec <dir_alloc+0x8a>
 80073e8:	2307      	movs	r3, #7
 80073ea:	73fb      	strb	r3, [r7, #15]
	return res;
 80073ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80073ee:	4618      	mov	r0, r3
 80073f0:	3710      	adds	r7, #16
 80073f2:	46bd      	mov	sp, r7
 80073f4:	bd80      	pop	{r7, pc}

080073f6 <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 80073f6:	b480      	push	{r7}
 80073f8:	b085      	sub	sp, #20
 80073fa:	af00      	add	r7, sp, #0
 80073fc:	6078      	str	r0, [r7, #4]
 80073fe:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 8007400:	683b      	ldr	r3, [r7, #0]
 8007402:	331b      	adds	r3, #27
 8007404:	781b      	ldrb	r3, [r3, #0]
 8007406:	021b      	lsls	r3, r3, #8
 8007408:	b21a      	sxth	r2, r3
 800740a:	683b      	ldr	r3, [r7, #0]
 800740c:	331a      	adds	r3, #26
 800740e:	781b      	ldrb	r3, [r3, #0]
 8007410:	b21b      	sxth	r3, r3
 8007412:	4313      	orrs	r3, r2
 8007414:	b21b      	sxth	r3, r3
 8007416:	b29b      	uxth	r3, r3
 8007418:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 8007420:	2b03      	cmp	r3, #3
 8007422:	d10f      	bne.n	8007444 <ld_clust+0x4e>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 8007424:	683b      	ldr	r3, [r7, #0]
 8007426:	3315      	adds	r3, #21
 8007428:	781b      	ldrb	r3, [r3, #0]
 800742a:	021b      	lsls	r3, r3, #8
 800742c:	b21a      	sxth	r2, r3
 800742e:	683b      	ldr	r3, [r7, #0]
 8007430:	3314      	adds	r3, #20
 8007432:	781b      	ldrb	r3, [r3, #0]
 8007434:	b21b      	sxth	r3, r3
 8007436:	4313      	orrs	r3, r2
 8007438:	b21b      	sxth	r3, r3
 800743a:	b29b      	uxth	r3, r3
 800743c:	041b      	lsls	r3, r3, #16
 800743e:	68fa      	ldr	r2, [r7, #12]
 8007440:	4313      	orrs	r3, r2
 8007442:	60fb      	str	r3, [r7, #12]

	return cl;
 8007444:	68fb      	ldr	r3, [r7, #12]
}
 8007446:	4618      	mov	r0, r3
 8007448:	3714      	adds	r7, #20
 800744a:	46bd      	mov	sp, r7
 800744c:	bc80      	pop	{r7}
 800744e:	4770      	bx	lr

08007450 <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 8007450:	b480      	push	{r7}
 8007452:	b083      	sub	sp, #12
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]
 8007458:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	331a      	adds	r3, #26
 800745e:	683a      	ldr	r2, [r7, #0]
 8007460:	b2d2      	uxtb	r2, r2
 8007462:	701a      	strb	r2, [r3, #0]
 8007464:	683b      	ldr	r3, [r7, #0]
 8007466:	b29b      	uxth	r3, r3
 8007468:	0a1b      	lsrs	r3, r3, #8
 800746a:	b29a      	uxth	r2, r3
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	331b      	adds	r3, #27
 8007470:	b2d2      	uxtb	r2, r2
 8007472:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 8007474:	683b      	ldr	r3, [r7, #0]
 8007476:	0c1a      	lsrs	r2, r3, #16
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	3314      	adds	r3, #20
 800747c:	b2d2      	uxtb	r2, r2
 800747e:	701a      	strb	r2, [r3, #0]
 8007480:	683b      	ldr	r3, [r7, #0]
 8007482:	0c1b      	lsrs	r3, r3, #16
 8007484:	b29b      	uxth	r3, r3
 8007486:	0a1b      	lsrs	r3, r3, #8
 8007488:	b29a      	uxth	r2, r3
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	3315      	adds	r3, #21
 800748e:	b2d2      	uxtb	r2, r2
 8007490:	701a      	strb	r2, [r3, #0]
}
 8007492:	bf00      	nop
 8007494:	370c      	adds	r7, #12
 8007496:	46bd      	mov	sp, r7
 8007498:	bc80      	pop	{r7}
 800749a:	4770      	bx	lr

0800749c <cmp_lfn>:
static
int cmp_lfn (			/* 1:Matched, 0:Not matched */
	WCHAR* lfnbuf,		/* Pointer to the LFN to be compared */
	BYTE* dir			/* Pointer to the directory entry containing a part of LFN */
)
{
 800749c:	b580      	push	{r7, lr}
 800749e:	b086      	sub	sp, #24
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	6078      	str	r0, [r7, #4]
 80074a4:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Get offset in the LFN buffer */
 80074a6:	683b      	ldr	r3, [r7, #0]
 80074a8:	781b      	ldrb	r3, [r3, #0]
 80074aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80074ae:	1e5a      	subs	r2, r3, #1
 80074b0:	4613      	mov	r3, r2
 80074b2:	005b      	lsls	r3, r3, #1
 80074b4:	4413      	add	r3, r2
 80074b6:	009b      	lsls	r3, r3, #2
 80074b8:	4413      	add	r3, r2
 80074ba:	617b      	str	r3, [r7, #20]
	s = 0; wc = 1;
 80074bc:	2300      	movs	r3, #0
 80074be:	613b      	str	r3, [r7, #16]
 80074c0:	2301      	movs	r3, #1
 80074c2:	81fb      	strh	r3, [r7, #14]
	do {
		uc = LD_WORD(dir + LfnOfs[s]);	/* Pick an LFN character from the entry */
 80074c4:	4a2b      	ldr	r2, [pc, #172]	; (8007574 <cmp_lfn+0xd8>)
 80074c6:	693b      	ldr	r3, [r7, #16]
 80074c8:	4413      	add	r3, r2
 80074ca:	781b      	ldrb	r3, [r3, #0]
 80074cc:	3301      	adds	r3, #1
 80074ce:	683a      	ldr	r2, [r7, #0]
 80074d0:	4413      	add	r3, r2
 80074d2:	781b      	ldrb	r3, [r3, #0]
 80074d4:	021b      	lsls	r3, r3, #8
 80074d6:	b21a      	sxth	r2, r3
 80074d8:	4926      	ldr	r1, [pc, #152]	; (8007574 <cmp_lfn+0xd8>)
 80074da:	693b      	ldr	r3, [r7, #16]
 80074dc:	440b      	add	r3, r1
 80074de:	781b      	ldrb	r3, [r3, #0]
 80074e0:	4619      	mov	r1, r3
 80074e2:	683b      	ldr	r3, [r7, #0]
 80074e4:	440b      	add	r3, r1
 80074e6:	781b      	ldrb	r3, [r3, #0]
 80074e8:	b21b      	sxth	r3, r3
 80074ea:	4313      	orrs	r3, r2
 80074ec:	b21b      	sxth	r3, r3
 80074ee:	81bb      	strh	r3, [r7, #12]
		if (wc) {	/* Last character has not been processed */
 80074f0:	89fb      	ldrh	r3, [r7, #14]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d019      	beq.n	800752a <cmp_lfn+0x8e>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 80074f6:	89bb      	ldrh	r3, [r7, #12]
 80074f8:	4618      	mov	r0, r3
 80074fa:	f002 ff5f 	bl	800a3bc <ff_wtoupper>
 80074fe:	4603      	mov	r3, r0
 8007500:	81fb      	strh	r3, [r7, #14]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 8007502:	697b      	ldr	r3, [r7, #20]
 8007504:	2bfe      	cmp	r3, #254	; 0xfe
 8007506:	d80e      	bhi.n	8007526 <cmp_lfn+0x8a>
 8007508:	697b      	ldr	r3, [r7, #20]
 800750a:	1c5a      	adds	r2, r3, #1
 800750c:	617a      	str	r2, [r7, #20]
 800750e:	005b      	lsls	r3, r3, #1
 8007510:	687a      	ldr	r2, [r7, #4]
 8007512:	4413      	add	r3, r2
 8007514:	881b      	ldrh	r3, [r3, #0]
 8007516:	4618      	mov	r0, r3
 8007518:	f002 ff50 	bl	800a3bc <ff_wtoupper>
 800751c:	4603      	mov	r3, r0
 800751e:	461a      	mov	r2, r3
 8007520:	89fb      	ldrh	r3, [r7, #14]
 8007522:	4293      	cmp	r3, r2
 8007524:	d008      	beq.n	8007538 <cmp_lfn+0x9c>
				return 0;				/* Not matched */
 8007526:	2300      	movs	r3, #0
 8007528:	e01f      	b.n	800756a <cmp_lfn+0xce>
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
 800752a:	89bb      	ldrh	r3, [r7, #12]
 800752c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007530:	4293      	cmp	r3, r2
 8007532:	d001      	beq.n	8007538 <cmp_lfn+0x9c>
 8007534:	2300      	movs	r3, #0
 8007536:	e018      	b.n	800756a <cmp_lfn+0xce>
		}
	} while (++s < 13);				/* Repeat until all characters in the entry are checked */
 8007538:	693b      	ldr	r3, [r7, #16]
 800753a:	3301      	adds	r3, #1
 800753c:	613b      	str	r3, [r7, #16]
 800753e:	693b      	ldr	r3, [r7, #16]
 8007540:	2b0c      	cmp	r3, #12
 8007542:	d9bf      	bls.n	80074c4 <cmp_lfn+0x28>

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i])	/* Last segment matched but different length */
 8007544:	683b      	ldr	r3, [r7, #0]
 8007546:	781b      	ldrb	r3, [r3, #0]
 8007548:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800754c:	2b00      	cmp	r3, #0
 800754e:	d00b      	beq.n	8007568 <cmp_lfn+0xcc>
 8007550:	89fb      	ldrh	r3, [r7, #14]
 8007552:	2b00      	cmp	r3, #0
 8007554:	d008      	beq.n	8007568 <cmp_lfn+0xcc>
 8007556:	697b      	ldr	r3, [r7, #20]
 8007558:	005b      	lsls	r3, r3, #1
 800755a:	687a      	ldr	r2, [r7, #4]
 800755c:	4413      	add	r3, r2
 800755e:	881b      	ldrh	r3, [r3, #0]
 8007560:	2b00      	cmp	r3, #0
 8007562:	d001      	beq.n	8007568 <cmp_lfn+0xcc>
		return 0;
 8007564:	2300      	movs	r3, #0
 8007566:	e000      	b.n	800756a <cmp_lfn+0xce>

	return 1;						/* The part of LFN matched */
 8007568:	2301      	movs	r3, #1
}
 800756a:	4618      	mov	r0, r3
 800756c:	3718      	adds	r7, #24
 800756e:	46bd      	mov	sp, r7
 8007570:	bd80      	pop	{r7, pc}
 8007572:	bf00      	nop
 8007574:	0800d928 	.word	0x0800d928

08007578 <pick_lfn>:
static
int pick_lfn (			/* 1:Succeeded, 0:Buffer overflow */
	WCHAR* lfnbuf,		/* Pointer to the Unicode-LFN buffer */
	BYTE* dir			/* Pointer to the directory entry */
)
{
 8007578:	b480      	push	{r7}
 800757a:	b087      	sub	sp, #28
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
 8007580:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8007582:	683b      	ldr	r3, [r7, #0]
 8007584:	781b      	ldrb	r3, [r3, #0]
 8007586:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800758a:	1e5a      	subs	r2, r3, #1
 800758c:	4613      	mov	r3, r2
 800758e:	005b      	lsls	r3, r3, #1
 8007590:	4413      	add	r3, r2
 8007592:	009b      	lsls	r3, r3, #2
 8007594:	4413      	add	r3, r2
 8007596:	617b      	str	r3, [r7, #20]

	s = 0; wc = 1;
 8007598:	2300      	movs	r3, #0
 800759a:	613b      	str	r3, [r7, #16]
 800759c:	2301      	movs	r3, #1
 800759e:	81fb      	strh	r3, [r7, #14]
	do {
		uc = LD_WORD(dir + LfnOfs[s]);		/* Pick an LFN character from the entry */
 80075a0:	4a26      	ldr	r2, [pc, #152]	; (800763c <pick_lfn+0xc4>)
 80075a2:	693b      	ldr	r3, [r7, #16]
 80075a4:	4413      	add	r3, r2
 80075a6:	781b      	ldrb	r3, [r3, #0]
 80075a8:	3301      	adds	r3, #1
 80075aa:	683a      	ldr	r2, [r7, #0]
 80075ac:	4413      	add	r3, r2
 80075ae:	781b      	ldrb	r3, [r3, #0]
 80075b0:	021b      	lsls	r3, r3, #8
 80075b2:	b21a      	sxth	r2, r3
 80075b4:	4921      	ldr	r1, [pc, #132]	; (800763c <pick_lfn+0xc4>)
 80075b6:	693b      	ldr	r3, [r7, #16]
 80075b8:	440b      	add	r3, r1
 80075ba:	781b      	ldrb	r3, [r3, #0]
 80075bc:	4619      	mov	r1, r3
 80075be:	683b      	ldr	r3, [r7, #0]
 80075c0:	440b      	add	r3, r1
 80075c2:	781b      	ldrb	r3, [r3, #0]
 80075c4:	b21b      	sxth	r3, r3
 80075c6:	4313      	orrs	r3, r2
 80075c8:	b21b      	sxth	r3, r3
 80075ca:	81bb      	strh	r3, [r7, #12]
		if (wc) {	/* Last character has not been processed */
 80075cc:	89fb      	ldrh	r3, [r7, #14]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d00f      	beq.n	80075f2 <pick_lfn+0x7a>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 80075d2:	697b      	ldr	r3, [r7, #20]
 80075d4:	2bfe      	cmp	r3, #254	; 0xfe
 80075d6:	d901      	bls.n	80075dc <pick_lfn+0x64>
 80075d8:	2300      	movs	r3, #0
 80075da:	e029      	b.n	8007630 <pick_lfn+0xb8>
			lfnbuf[i++] = wc = uc;			/* Store it */
 80075dc:	89bb      	ldrh	r3, [r7, #12]
 80075de:	81fb      	strh	r3, [r7, #14]
 80075e0:	697b      	ldr	r3, [r7, #20]
 80075e2:	1c5a      	adds	r2, r3, #1
 80075e4:	617a      	str	r2, [r7, #20]
 80075e6:	005b      	lsls	r3, r3, #1
 80075e8:	687a      	ldr	r2, [r7, #4]
 80075ea:	4413      	add	r3, r2
 80075ec:	89fa      	ldrh	r2, [r7, #14]
 80075ee:	801a      	strh	r2, [r3, #0]
 80075f0:	e006      	b.n	8007600 <pick_lfn+0x88>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80075f2:	89bb      	ldrh	r3, [r7, #12]
 80075f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80075f8:	4293      	cmp	r3, r2
 80075fa:	d001      	beq.n	8007600 <pick_lfn+0x88>
 80075fc:	2300      	movs	r3, #0
 80075fe:	e017      	b.n	8007630 <pick_lfn+0xb8>
		}
	} while (++s < 13);						/* Read all character in the entry */
 8007600:	693b      	ldr	r3, [r7, #16]
 8007602:	3301      	adds	r3, #1
 8007604:	613b      	str	r3, [r7, #16]
 8007606:	693b      	ldr	r3, [r7, #16]
 8007608:	2b0c      	cmp	r3, #12
 800760a:	d9c9      	bls.n	80075a0 <pick_lfn+0x28>

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 800760c:	683b      	ldr	r3, [r7, #0]
 800760e:	781b      	ldrb	r3, [r3, #0]
 8007610:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007614:	2b00      	cmp	r3, #0
 8007616:	d00a      	beq.n	800762e <pick_lfn+0xb6>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 8007618:	697b      	ldr	r3, [r7, #20]
 800761a:	2bfe      	cmp	r3, #254	; 0xfe
 800761c:	d901      	bls.n	8007622 <pick_lfn+0xaa>
 800761e:	2300      	movs	r3, #0
 8007620:	e006      	b.n	8007630 <pick_lfn+0xb8>
		lfnbuf[i] = 0;
 8007622:	697b      	ldr	r3, [r7, #20]
 8007624:	005b      	lsls	r3, r3, #1
 8007626:	687a      	ldr	r2, [r7, #4]
 8007628:	4413      	add	r3, r2
 800762a:	2200      	movs	r2, #0
 800762c:	801a      	strh	r2, [r3, #0]
	}

	return 1;
 800762e:	2301      	movs	r3, #1
}
 8007630:	4618      	mov	r0, r3
 8007632:	371c      	adds	r7, #28
 8007634:	46bd      	mov	sp, r7
 8007636:	bc80      	pop	{r7}
 8007638:	4770      	bx	lr
 800763a:	bf00      	nop
 800763c:	0800d928 	.word	0x0800d928

08007640 <fit_lfn>:
	const WCHAR* lfnbuf,	/* Pointer to the LFN buffer */
	BYTE* dir,				/* Pointer to the directory entry */
	BYTE ord,				/* LFN order (1-20) */
	BYTE sum				/* SFN sum */
)
{
 8007640:	b480      	push	{r7}
 8007642:	b089      	sub	sp, #36	; 0x24
 8007644:	af00      	add	r7, sp, #0
 8007646:	60f8      	str	r0, [r7, #12]
 8007648:	60b9      	str	r1, [r7, #8]
 800764a:	4611      	mov	r1, r2
 800764c:	461a      	mov	r2, r3
 800764e:	460b      	mov	r3, r1
 8007650:	71fb      	strb	r3, [r7, #7]
 8007652:	4613      	mov	r3, r2
 8007654:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set check sum */
 8007656:	68bb      	ldr	r3, [r7, #8]
 8007658:	330d      	adds	r3, #13
 800765a:	79ba      	ldrb	r2, [r7, #6]
 800765c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800765e:	68bb      	ldr	r3, [r7, #8]
 8007660:	330b      	adds	r3, #11
 8007662:	220f      	movs	r2, #15
 8007664:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8007666:	68bb      	ldr	r3, [r7, #8]
 8007668:	330c      	adds	r3, #12
 800766a:	2200      	movs	r2, #0
 800766c:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + LDIR_FstClusLO, 0);
 800766e:	68bb      	ldr	r3, [r7, #8]
 8007670:	331a      	adds	r3, #26
 8007672:	2200      	movs	r2, #0
 8007674:	701a      	strb	r2, [r3, #0]
 8007676:	68bb      	ldr	r3, [r7, #8]
 8007678:	331b      	adds	r3, #27
 800767a:	2200      	movs	r2, #0
 800767c:	701a      	strb	r2, [r3, #0]

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
 800767e:	79fb      	ldrb	r3, [r7, #7]
 8007680:	1e5a      	subs	r2, r3, #1
 8007682:	4613      	mov	r3, r2
 8007684:	005b      	lsls	r3, r3, #1
 8007686:	4413      	add	r3, r2
 8007688:	009b      	lsls	r3, r3, #2
 800768a:	4413      	add	r3, r2
 800768c:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800768e:	2300      	movs	r3, #0
 8007690:	82fb      	strh	r3, [r7, #22]
 8007692:	2300      	movs	r3, #0
 8007694:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective character */
 8007696:	8afb      	ldrh	r3, [r7, #22]
 8007698:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800769c:	4293      	cmp	r3, r2
 800769e:	d007      	beq.n	80076b0 <fit_lfn+0x70>
 80076a0:	69fb      	ldr	r3, [r7, #28]
 80076a2:	1c5a      	adds	r2, r3, #1
 80076a4:	61fa      	str	r2, [r7, #28]
 80076a6:	005b      	lsls	r3, r3, #1
 80076a8:	68fa      	ldr	r2, [r7, #12]
 80076aa:	4413      	add	r3, r2
 80076ac:	881b      	ldrh	r3, [r3, #0]
 80076ae:	82fb      	strh	r3, [r7, #22]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 80076b0:	4a1c      	ldr	r2, [pc, #112]	; (8007724 <fit_lfn+0xe4>)
 80076b2:	69bb      	ldr	r3, [r7, #24]
 80076b4:	4413      	add	r3, r2
 80076b6:	781b      	ldrb	r3, [r3, #0]
 80076b8:	461a      	mov	r2, r3
 80076ba:	68bb      	ldr	r3, [r7, #8]
 80076bc:	4413      	add	r3, r2
 80076be:	8afa      	ldrh	r2, [r7, #22]
 80076c0:	b2d2      	uxtb	r2, r2
 80076c2:	701a      	strb	r2, [r3, #0]
 80076c4:	8afb      	ldrh	r3, [r7, #22]
 80076c6:	0a1b      	lsrs	r3, r3, #8
 80076c8:	b299      	uxth	r1, r3
 80076ca:	4a16      	ldr	r2, [pc, #88]	; (8007724 <fit_lfn+0xe4>)
 80076cc:	69bb      	ldr	r3, [r7, #24]
 80076ce:	4413      	add	r3, r2
 80076d0:	781b      	ldrb	r3, [r3, #0]
 80076d2:	3301      	adds	r3, #1
 80076d4:	68ba      	ldr	r2, [r7, #8]
 80076d6:	4413      	add	r3, r2
 80076d8:	b2ca      	uxtb	r2, r1
 80076da:	701a      	strb	r2, [r3, #0]
		if (!wc) wc = 0xFFFF;		/* Padding characters following last character */
 80076dc:	8afb      	ldrh	r3, [r7, #22]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d102      	bne.n	80076e8 <fit_lfn+0xa8>
 80076e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80076e6:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 80076e8:	69bb      	ldr	r3, [r7, #24]
 80076ea:	3301      	adds	r3, #1
 80076ec:	61bb      	str	r3, [r7, #24]
 80076ee:	69bb      	ldr	r3, [r7, #24]
 80076f0:	2b0c      	cmp	r3, #12
 80076f2:	d9d0      	bls.n	8007696 <fit_lfn+0x56>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLEF;	/* Bottom LFN part is the start of LFN sequence */
 80076f4:	8afb      	ldrh	r3, [r7, #22]
 80076f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80076fa:	4293      	cmp	r3, r2
 80076fc:	d006      	beq.n	800770c <fit_lfn+0xcc>
 80076fe:	69fb      	ldr	r3, [r7, #28]
 8007700:	005b      	lsls	r3, r3, #1
 8007702:	68fa      	ldr	r2, [r7, #12]
 8007704:	4413      	add	r3, r2
 8007706:	881b      	ldrh	r3, [r3, #0]
 8007708:	2b00      	cmp	r3, #0
 800770a:	d103      	bne.n	8007714 <fit_lfn+0xd4>
 800770c:	79fb      	ldrb	r3, [r7, #7]
 800770e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007712:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8007714:	68bb      	ldr	r3, [r7, #8]
 8007716:	79fa      	ldrb	r2, [r7, #7]
 8007718:	701a      	strb	r2, [r3, #0]
}
 800771a:	bf00      	nop
 800771c:	3724      	adds	r7, #36	; 0x24
 800771e:	46bd      	mov	sp, r7
 8007720:	bc80      	pop	{r7}
 8007722:	4770      	bx	lr
 8007724:	0800d928 	.word	0x0800d928

08007728 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8007728:	b580      	push	{r7, lr}
 800772a:	b08c      	sub	sp, #48	; 0x30
 800772c:	af00      	add	r7, sp, #0
 800772e:	60f8      	str	r0, [r7, #12]
 8007730:	60b9      	str	r1, [r7, #8]
 8007732:	607a      	str	r2, [r7, #4]
 8007734:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8007736:	220b      	movs	r2, #11
 8007738:	68b9      	ldr	r1, [r7, #8]
 800773a:	68f8      	ldr	r0, [r7, #12]
 800773c:	f7fe fd74 	bl	8006228 <mem_cpy>

	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
 8007740:	683b      	ldr	r3, [r7, #0]
 8007742:	2b05      	cmp	r3, #5
 8007744:	d92b      	bls.n	800779e <gen_numname+0x76>
		sr = seq;
 8007746:	683b      	ldr	r3, [r7, #0]
 8007748:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800774a:	e022      	b.n	8007792 <gen_numname+0x6a>
			wc = *lfn++;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	1c9a      	adds	r2, r3, #2
 8007750:	607a      	str	r2, [r7, #4]
 8007752:	881b      	ldrh	r3, [r3, #0]
 8007754:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8007756:	2300      	movs	r3, #0
 8007758:	62bb      	str	r3, [r7, #40]	; 0x28
 800775a:	e017      	b.n	800778c <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800775c:	69fb      	ldr	r3, [r7, #28]
 800775e:	005a      	lsls	r2, r3, #1
 8007760:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007762:	f003 0301 	and.w	r3, r3, #1
 8007766:	4413      	add	r3, r2
 8007768:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800776a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800776c:	085b      	lsrs	r3, r3, #1
 800776e:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8007770:	69fb      	ldr	r3, [r7, #28]
 8007772:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007776:	2b00      	cmp	r3, #0
 8007778:	d005      	beq.n	8007786 <gen_numname+0x5e>
 800777a:	69fb      	ldr	r3, [r7, #28]
 800777c:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 8007780:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 8007784:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8007786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007788:	3301      	adds	r3, #1
 800778a:	62bb      	str	r3, [r7, #40]	; 0x28
 800778c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800778e:	2b0f      	cmp	r3, #15
 8007790:	d9e4      	bls.n	800775c <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	881b      	ldrh	r3, [r3, #0]
 8007796:	2b00      	cmp	r3, #0
 8007798:	d1d8      	bne.n	800774c <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800779a:	69fb      	ldr	r3, [r7, #28]
 800779c:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800779e:	2307      	movs	r3, #7
 80077a0:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (seq % 16) + '0';
 80077a2:	683b      	ldr	r3, [r7, #0]
 80077a4:	b2db      	uxtb	r3, r3
 80077a6:	f003 030f 	and.w	r3, r3, #15
 80077aa:	b2db      	uxtb	r3, r3
 80077ac:	3330      	adds	r3, #48	; 0x30
 80077ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 80077b2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80077b6:	2b39      	cmp	r3, #57	; 0x39
 80077b8:	d904      	bls.n	80077c4 <gen_numname+0x9c>
 80077ba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80077be:	3307      	adds	r3, #7
 80077c0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 80077c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077c6:	1e5a      	subs	r2, r3, #1
 80077c8:	62ba      	str	r2, [r7, #40]	; 0x28
 80077ca:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80077ce:	4413      	add	r3, r2
 80077d0:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80077d4:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 80077d8:	683b      	ldr	r3, [r7, #0]
 80077da:	091b      	lsrs	r3, r3, #4
 80077dc:	603b      	str	r3, [r7, #0]
	} while (seq);
 80077de:	683b      	ldr	r3, [r7, #0]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d1de      	bne.n	80077a2 <gen_numname+0x7a>
	ns[i] = '~';
 80077e4:	f107 0214 	add.w	r2, r7, #20
 80077e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077ea:	4413      	add	r3, r2
 80077ec:	227e      	movs	r2, #126	; 0x7e
 80077ee:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 80077f0:	2300      	movs	r3, #0
 80077f2:	627b      	str	r3, [r7, #36]	; 0x24
 80077f4:	e002      	b.n	80077fc <gen_numname+0xd4>
 80077f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077f8:	3301      	adds	r3, #1
 80077fa:	627b      	str	r3, [r7, #36]	; 0x24
 80077fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007800:	429a      	cmp	r2, r3
 8007802:	d205      	bcs.n	8007810 <gen_numname+0xe8>
 8007804:	68fa      	ldr	r2, [r7, #12]
 8007806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007808:	4413      	add	r3, r2
 800780a:	781b      	ldrb	r3, [r3, #0]
 800780c:	2b20      	cmp	r3, #32
 800780e:	d1f2      	bne.n	80077f6 <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8007810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007812:	2b07      	cmp	r3, #7
 8007814:	d808      	bhi.n	8007828 <gen_numname+0x100>
 8007816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007818:	1c5a      	adds	r2, r3, #1
 800781a:	62ba      	str	r2, [r7, #40]	; 0x28
 800781c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8007820:	4413      	add	r3, r2
 8007822:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8007826:	e000      	b.n	800782a <gen_numname+0x102>
 8007828:	2120      	movs	r1, #32
 800782a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800782c:	1c5a      	adds	r2, r3, #1
 800782e:	627a      	str	r2, [r7, #36]	; 0x24
 8007830:	68fa      	ldr	r2, [r7, #12]
 8007832:	4413      	add	r3, r2
 8007834:	460a      	mov	r2, r1
 8007836:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8007838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800783a:	2b07      	cmp	r3, #7
 800783c:	d9e8      	bls.n	8007810 <gen_numname+0xe8>
}
 800783e:	bf00      	nop
 8007840:	bf00      	nop
 8007842:	3730      	adds	r7, #48	; 0x30
 8007844:	46bd      	mov	sp, r7
 8007846:	bd80      	pop	{r7, pc}

08007848 <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8007848:	b480      	push	{r7}
 800784a:	b085      	sub	sp, #20
 800784c:	af00      	add	r7, sp, #0
 800784e:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8007850:	2300      	movs	r3, #0
 8007852:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8007854:	230b      	movs	r3, #11
 8007856:	60bb      	str	r3, [r7, #8]

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
 8007858:	7bfb      	ldrb	r3, [r7, #15]
 800785a:	b2da      	uxtb	r2, r3
 800785c:	0852      	lsrs	r2, r2, #1
 800785e:	01db      	lsls	r3, r3, #7
 8007860:	4313      	orrs	r3, r2
 8007862:	b2da      	uxtb	r2, r3
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	1c59      	adds	r1, r3, #1
 8007868:	6079      	str	r1, [r7, #4]
 800786a:	781b      	ldrb	r3, [r3, #0]
 800786c:	4413      	add	r3, r2
 800786e:	73fb      	strb	r3, [r7, #15]
 8007870:	68bb      	ldr	r3, [r7, #8]
 8007872:	3b01      	subs	r3, #1
 8007874:	60bb      	str	r3, [r7, #8]
 8007876:	68bb      	ldr	r3, [r7, #8]
 8007878:	2b00      	cmp	r3, #0
 800787a:	d1ed      	bne.n	8007858 <sum_sfn+0x10>
	return sum;
 800787c:	7bfb      	ldrb	r3, [r7, #15]
}
 800787e:	4618      	mov	r0, r3
 8007880:	3714      	adds	r7, #20
 8007882:	46bd      	mov	sp, r7
 8007884:	bc80      	pop	{r7}
 8007886:	4770      	bx	lr

08007888 <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 8007888:	b580      	push	{r7, lr}
 800788a:	b086      	sub	sp, #24
 800788c:	af00      	add	r7, sp, #0
 800788e:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8007890:	2100      	movs	r1, #0
 8007892:	6878      	ldr	r0, [r7, #4]
 8007894:	f7ff fb9a 	bl	8006fcc <dir_sdi>
 8007898:	4603      	mov	r3, r0
 800789a:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800789c:	7dfb      	ldrb	r3, [r7, #23]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d001      	beq.n	80078a6 <dir_find+0x1e>
 80078a2:	7dfb      	ldrb	r3, [r7, #23]
 80078a4:	e0ac      	b.n	8007a00 <dir_find+0x178>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 80078a6:	23ff      	movs	r3, #255	; 0xff
 80078a8:	753b      	strb	r3, [r7, #20]
 80078aa:	7d3b      	ldrb	r3, [r7, #20]
 80078ac:	757b      	strb	r3, [r7, #21]
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80078b4:	f8a3 2424 	strh.w	r2, [r3, #1060]	; 0x424
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 80078c4:	4619      	mov	r1, r3
 80078c6:	4610      	mov	r0, r2
 80078c8:	f7fe ff23 	bl	8006712 <move_window>
 80078cc:	4603      	mov	r3, r0
 80078ce:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80078d0:	7dfb      	ldrb	r3, [r7, #23]
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	f040 808e 	bne.w	80079f4 <dir_find+0x16c>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 80078de:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 80078e0:	693b      	ldr	r3, [r7, #16]
 80078e2:	781b      	ldrb	r3, [r3, #0]
 80078e4:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80078e6:	7dbb      	ldrb	r3, [r7, #22]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d102      	bne.n	80078f2 <dir_find+0x6a>
 80078ec:	2304      	movs	r3, #4
 80078ee:	75fb      	strb	r3, [r7, #23]
 80078f0:	e085      	b.n	80079fe <dir_find+0x176>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
 80078f2:	693b      	ldr	r3, [r7, #16]
 80078f4:	330b      	adds	r3, #11
 80078f6:	781b      	ldrb	r3, [r3, #0]
 80078f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80078fc:	73fb      	strb	r3, [r7, #15]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 80078fe:	7dbb      	ldrb	r3, [r7, #22]
 8007900:	2be5      	cmp	r3, #229	; 0xe5
 8007902:	d007      	beq.n	8007914 <dir_find+0x8c>
 8007904:	7bfb      	ldrb	r3, [r7, #15]
 8007906:	f003 0308 	and.w	r3, r3, #8
 800790a:	2b00      	cmp	r3, #0
 800790c:	d00a      	beq.n	8007924 <dir_find+0x9c>
 800790e:	7bfb      	ldrb	r3, [r7, #15]
 8007910:	2b0f      	cmp	r3, #15
 8007912:	d007      	beq.n	8007924 <dir_find+0x9c>
			ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 8007914:	23ff      	movs	r3, #255	; 0xff
 8007916:	757b      	strb	r3, [r7, #21]
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800791e:	f8a3 2424 	strh.w	r2, [r3, #1060]	; 0x424
 8007922:	e05c      	b.n	80079de <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8007924:	7bfb      	ldrb	r3, [r7, #15]
 8007926:	2b0f      	cmp	r3, #15
 8007928:	d133      	bne.n	8007992 <dir_find+0x10a>
				if (dp->lfn) {
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8007930:	2b00      	cmp	r3, #0
 8007932:	d054      	beq.n	80079de <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8007934:	7dbb      	ldrb	r3, [r7, #22]
 8007936:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800793a:	2b00      	cmp	r3, #0
 800793c:	d00e      	beq.n	800795c <dir_find+0xd4>
						sum = dir[LDIR_Chksum];
 800793e:	693b      	ldr	r3, [r7, #16]
 8007940:	7b5b      	ldrb	r3, [r3, #13]
 8007942:	753b      	strb	r3, [r7, #20]
						c &= ~LLEF; ord = c;	/* LFN start order */
 8007944:	7dbb      	ldrb	r3, [r7, #22]
 8007946:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800794a:	75bb      	strb	r3, [r7, #22]
 800794c:	7dbb      	ldrb	r3, [r7, #22]
 800794e:	757b      	strb	r3, [r7, #21]
						dp->lfn_idx = dp->index;	/* Start index of LFN */
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	f8a3 2424 	strh.w	r2, [r3, #1060]	; 0x424
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
 800795c:	7dba      	ldrb	r2, [r7, #22]
 800795e:	7d7b      	ldrb	r3, [r7, #21]
 8007960:	429a      	cmp	r2, r3
 8007962:	d113      	bne.n	800798c <dir_find+0x104>
 8007964:	693b      	ldr	r3, [r7, #16]
 8007966:	330d      	adds	r3, #13
 8007968:	781b      	ldrb	r3, [r3, #0]
 800796a:	7d3a      	ldrb	r2, [r7, #20]
 800796c:	429a      	cmp	r2, r3
 800796e:	d10d      	bne.n	800798c <dir_find+0x104>
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8007976:	6939      	ldr	r1, [r7, #16]
 8007978:	4618      	mov	r0, r3
 800797a:	f7ff fd8f 	bl	800749c <cmp_lfn>
 800797e:	4603      	mov	r3, r0
 8007980:	2b00      	cmp	r3, #0
 8007982:	d003      	beq.n	800798c <dir_find+0x104>
 8007984:	7d7b      	ldrb	r3, [r7, #21]
 8007986:	3b01      	subs	r3, #1
 8007988:	b2db      	uxtb	r3, r3
 800798a:	e000      	b.n	800798e <dir_find+0x106>
 800798c:	23ff      	movs	r3, #255	; 0xff
 800798e:	757b      	strb	r3, [r7, #21]
 8007990:	e025      	b.n	80079de <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 8007992:	7d7b      	ldrb	r3, [r7, #21]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d107      	bne.n	80079a8 <dir_find+0x120>
 8007998:	6938      	ldr	r0, [r7, #16]
 800799a:	f7ff ff55 	bl	8007848 <sum_sfn>
 800799e:	4603      	mov	r3, r0
 80079a0:	461a      	mov	r2, r3
 80079a2:	7d3b      	ldrb	r3, [r7, #20]
 80079a4:	4293      	cmp	r3, r2
 80079a6:	d027      	beq.n	80079f8 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 80079ae:	330b      	adds	r3, #11
 80079b0:	781b      	ldrb	r3, [r3, #0]
 80079b2:	f003 0301 	and.w	r3, r3, #1
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d10a      	bne.n	80079d0 <dir_find+0x148>
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 80079c0:	220b      	movs	r2, #11
 80079c2:	4619      	mov	r1, r3
 80079c4:	6938      	ldr	r0, [r7, #16]
 80079c6:	f7fe fc67 	bl	8006298 <mem_cmp>
 80079ca:	4603      	mov	r3, r0
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d015      	beq.n	80079fc <dir_find+0x174>
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 80079d0:	23ff      	movs	r3, #255	; 0xff
 80079d2:	757b      	strb	r3, [r7, #21]
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80079da:	f8a3 2424 	strh.w	r2, [r3, #1060]	; 0x424
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 80079de:	2100      	movs	r1, #0
 80079e0:	6878      	ldr	r0, [r7, #4]
 80079e2:	f7ff fba4 	bl	800712e <dir_next>
 80079e6:	4603      	mov	r3, r0
 80079e8:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80079ea:	7dfb      	ldrb	r3, [r7, #23]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	f43f af63 	beq.w	80078b8 <dir_find+0x30>
 80079f2:	e004      	b.n	80079fe <dir_find+0x176>
		if (res != FR_OK) break;
 80079f4:	bf00      	nop
 80079f6:	e002      	b.n	80079fe <dir_find+0x176>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 80079f8:	bf00      	nop
 80079fa:	e000      	b.n	80079fe <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 80079fc:	bf00      	nop

	return res;
 80079fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a00:	4618      	mov	r0, r3
 8007a02:	3718      	adds	r7, #24
 8007a04:	46bd      	mov	sp, r7
 8007a06:	bd80      	pop	{r7, pc}

08007a08 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	b086      	sub	sp, #24
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]
 8007a10:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE a, c, *dir;
#if _USE_LFN
	BYTE ord = 0xFF, sum = 0xFF;
 8007a12:	23ff      	movs	r3, #255	; 0xff
 8007a14:	757b      	strb	r3, [r7, #21]
 8007a16:	23ff      	movs	r3, #255	; 0xff
 8007a18:	753b      	strb	r3, [r7, #20]
#endif

	res = FR_NO_FILE;
 8007a1a:	2304      	movs	r3, #4
 8007a1c:	75fb      	strb	r3, [r7, #23]
	while (dp->sect) {
 8007a1e:	e082      	b.n	8007b26 <dir_read+0x11e>
		res = move_window(dp->fs, dp->sect);
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007a2c:	4619      	mov	r1, r3
 8007a2e:	4610      	mov	r0, r2
 8007a30:	f7fe fe6f 	bl	8006712 <move_window>
 8007a34:	4603      	mov	r3, r0
 8007a36:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8007a38:	7dfb      	ldrb	r3, [r7, #23]
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d17a      	bne.n	8007b34 <dir_read+0x12c>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8007a44:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 8007a46:	693b      	ldr	r3, [r7, #16]
 8007a48:	781b      	ldrb	r3, [r3, #0]
 8007a4a:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8007a4c:	7dbb      	ldrb	r3, [r7, #22]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d102      	bne.n	8007a58 <dir_read+0x50>
 8007a52:	2304      	movs	r3, #4
 8007a54:	75fb      	strb	r3, [r7, #23]
 8007a56:	e072      	b.n	8007b3e <dir_read+0x136>
		a = dir[DIR_Attr] & AM_MASK;
 8007a58:	693b      	ldr	r3, [r7, #16]
 8007a5a:	330b      	adds	r3, #11
 8007a5c:	781b      	ldrb	r3, [r3, #0]
 8007a5e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007a62:	73fb      	strb	r3, [r7, #15]
#if _USE_LFN	/* LFN configuration */
		if (c == DDEM || (!_FS_RPATH && c == '.') || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 8007a64:	7dbb      	ldrb	r3, [r7, #22]
 8007a66:	2be5      	cmp	r3, #229	; 0xe5
 8007a68:	d00e      	beq.n	8007a88 <dir_read+0x80>
 8007a6a:	7dbb      	ldrb	r3, [r7, #22]
 8007a6c:	2b2e      	cmp	r3, #46	; 0x2e
 8007a6e:	d00b      	beq.n	8007a88 <dir_read+0x80>
 8007a70:	7bfb      	ldrb	r3, [r7, #15]
 8007a72:	f023 0320 	bic.w	r3, r3, #32
 8007a76:	2b08      	cmp	r3, #8
 8007a78:	bf0c      	ite	eq
 8007a7a:	2301      	moveq	r3, #1
 8007a7c:	2300      	movne	r3, #0
 8007a7e:	b2db      	uxtb	r3, r3
 8007a80:	461a      	mov	r2, r3
 8007a82:	683b      	ldr	r3, [r7, #0]
 8007a84:	4293      	cmp	r3, r2
 8007a86:	d002      	beq.n	8007a8e <dir_read+0x86>
			ord = 0xFF;
 8007a88:	23ff      	movs	r3, #255	; 0xff
 8007a8a:	757b      	strb	r3, [r7, #21]
 8007a8c:	e042      	b.n	8007b14 <dir_read+0x10c>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8007a8e:	7bfb      	ldrb	r3, [r7, #15]
 8007a90:	2b0f      	cmp	r3, #15
 8007a92:	d12e      	bne.n	8007af2 <dir_read+0xea>
				if (c & LLEF) {			/* Is it start of LFN sequence? */
 8007a94:	7dbb      	ldrb	r3, [r7, #22]
 8007a96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d00e      	beq.n	8007abc <dir_read+0xb4>
					sum = dir[LDIR_Chksum];
 8007a9e:	693b      	ldr	r3, [r7, #16]
 8007aa0:	7b5b      	ldrb	r3, [r3, #13]
 8007aa2:	753b      	strb	r3, [r7, #20]
					c &= ~LLEF; ord = c;
 8007aa4:	7dbb      	ldrb	r3, [r7, #22]
 8007aa6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007aaa:	75bb      	strb	r3, [r7, #22]
 8007aac:	7dbb      	ldrb	r3, [r7, #22]
 8007aae:	757b      	strb	r3, [r7, #21]
					dp->lfn_idx = dp->index;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	f8a3 2424 	strh.w	r2, [r3, #1060]	; 0x424
				}
				/* Check LFN validity and capture it */
				ord = (c == ord && sum == dir[LDIR_Chksum] && pick_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
 8007abc:	7dba      	ldrb	r2, [r7, #22]
 8007abe:	7d7b      	ldrb	r3, [r7, #21]
 8007ac0:	429a      	cmp	r2, r3
 8007ac2:	d113      	bne.n	8007aec <dir_read+0xe4>
 8007ac4:	693b      	ldr	r3, [r7, #16]
 8007ac6:	330d      	adds	r3, #13
 8007ac8:	781b      	ldrb	r3, [r3, #0]
 8007aca:	7d3a      	ldrb	r2, [r7, #20]
 8007acc:	429a      	cmp	r2, r3
 8007ace:	d10d      	bne.n	8007aec <dir_read+0xe4>
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8007ad6:	6939      	ldr	r1, [r7, #16]
 8007ad8:	4618      	mov	r0, r3
 8007ada:	f7ff fd4d 	bl	8007578 <pick_lfn>
 8007ade:	4603      	mov	r3, r0
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d003      	beq.n	8007aec <dir_read+0xe4>
 8007ae4:	7d7b      	ldrb	r3, [r7, #21]
 8007ae6:	3b01      	subs	r3, #1
 8007ae8:	b2db      	uxtb	r3, r3
 8007aea:	e000      	b.n	8007aee <dir_read+0xe6>
 8007aec:	23ff      	movs	r3, #255	; 0xff
 8007aee:	757b      	strb	r3, [r7, #21]
 8007af0:	e010      	b.n	8007b14 <dir_read+0x10c>
			} else {					/* An SFN entry is found */
				if (ord || sum != sum_sfn(dir))	/* Is there a valid LFN? */
 8007af2:	7d7b      	ldrb	r3, [r7, #21]
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d107      	bne.n	8007b08 <dir_read+0x100>
 8007af8:	6938      	ldr	r0, [r7, #16]
 8007afa:	f7ff fea5 	bl	8007848 <sum_sfn>
 8007afe:	4603      	mov	r3, r0
 8007b00:	461a      	mov	r2, r3
 8007b02:	7d3b      	ldrb	r3, [r7, #20]
 8007b04:	4293      	cmp	r3, r2
 8007b06:	d017      	beq.n	8007b38 <dir_read+0x130>
					dp->lfn_idx = 0xFFFF;		/* It has no LFN. */
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007b0e:	f8a3 2424 	strh.w	r2, [r3, #1060]	; 0x424
				break;
 8007b12:	e011      	b.n	8007b38 <dir_read+0x130>
		}
#else		/* Non LFN configuration */
		if (c != DDEM && (_FS_RPATH || c != '.') && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol)	/* Is it a valid entry? */
			break;
#endif
		res = dir_next(dp, 0);				/* Next entry */
 8007b14:	2100      	movs	r1, #0
 8007b16:	6878      	ldr	r0, [r7, #4]
 8007b18:	f7ff fb09 	bl	800712e <dir_next>
 8007b1c:	4603      	mov	r3, r0
 8007b1e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8007b20:	7dfb      	ldrb	r3, [r7, #23]
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d10a      	bne.n	8007b3c <dir_read+0x134>
	while (dp->sect) {
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	f47f af77 	bne.w	8007a20 <dir_read+0x18>
 8007b32:	e004      	b.n	8007b3e <dir_read+0x136>
		if (res != FR_OK) break;
 8007b34:	bf00      	nop
 8007b36:	e002      	b.n	8007b3e <dir_read+0x136>
				break;
 8007b38:	bf00      	nop
 8007b3a:	e000      	b.n	8007b3e <dir_read+0x136>
		if (res != FR_OK) break;
 8007b3c:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;
 8007b3e:	7dfb      	ldrb	r3, [r7, #23]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d003      	beq.n	8007b4c <dir_read+0x144>
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	2200      	movs	r2, #0
 8007b48:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410

	return res;
 8007b4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b4e:	4618      	mov	r0, r3
 8007b50:	3718      	adds	r7, #24
 8007b52:	46bd      	mov	sp, r7
 8007b54:	bd80      	pop	{r7, pc}
	...

08007b58 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	b08c      	sub	sp, #48	; 0x30
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	6078      	str	r0, [r7, #4]
	UINT n, nent;
	BYTE sn[12], *fn, sum;
	WCHAR *lfn;


	fn = dp->fn; lfn = dp->lfn;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 8007b66:	623b      	str	r3, [r7, #32]
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8007b6e:	61fb      	str	r3, [r7, #28]
	mem_cpy(sn, fn, 12);
 8007b70:	f107 030c 	add.w	r3, r7, #12
 8007b74:	220c      	movs	r2, #12
 8007b76:	6a39      	ldr	r1, [r7, #32]
 8007b78:	4618      	mov	r0, r3
 8007b7a:	f7fe fb55 	bl	8006228 <mem_cpy>

	if (_FS_RPATH && (sn[NSFLAG] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8007b7e:	7dfb      	ldrb	r3, [r7, #23]
 8007b80:	f003 0301 	and.w	r3, r3, #1
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d037      	beq.n	8007bf8 <dir_register+0xa0>
		fn[NSFLAG] = 0; dp->lfn = 0;			/* Find only SFN */
 8007b88:	6a3b      	ldr	r3, [r7, #32]
 8007b8a:	330b      	adds	r3, #11
 8007b8c:	2200      	movs	r2, #0
 8007b8e:	701a      	strb	r2, [r3, #0]
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	2200      	movs	r2, #0
 8007b94:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
		for (n = 1; n < 100; n++) {
 8007b98:	2301      	movs	r3, #1
 8007b9a:	62bb      	str	r3, [r7, #40]	; 0x28
 8007b9c:	e013      	b.n	8007bc6 <dir_register+0x6e>
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
 8007b9e:	f107 010c 	add.w	r1, r7, #12
 8007ba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ba4:	69fa      	ldr	r2, [r7, #28]
 8007ba6:	6a38      	ldr	r0, [r7, #32]
 8007ba8:	f7ff fdbe 	bl	8007728 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8007bac:	6878      	ldr	r0, [r7, #4]
 8007bae:	f7ff fe6b 	bl	8007888 <dir_find>
 8007bb2:	4603      	mov	r3, r0
 8007bb4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8007bb8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d106      	bne.n	8007bce <dir_register+0x76>
		for (n = 1; n < 100; n++) {
 8007bc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bc2:	3301      	adds	r3, #1
 8007bc4:	62bb      	str	r3, [r7, #40]	; 0x28
 8007bc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bc8:	2b63      	cmp	r3, #99	; 0x63
 8007bca:	d9e8      	bls.n	8007b9e <dir_register+0x46>
 8007bcc:	e000      	b.n	8007bd0 <dir_register+0x78>
			if (res != FR_OK) break;
 8007bce:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8007bd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bd2:	2b64      	cmp	r3, #100	; 0x64
 8007bd4:	d101      	bne.n	8007bda <dir_register+0x82>
 8007bd6:	2307      	movs	r3, #7
 8007bd8:	e0c5      	b.n	8007d66 <dir_register+0x20e>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8007bda:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007bde:	2b04      	cmp	r3, #4
 8007be0:	d002      	beq.n	8007be8 <dir_register+0x90>
 8007be2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007be6:	e0be      	b.n	8007d66 <dir_register+0x20e>
		fn[NSFLAG] = sn[NSFLAG]; dp->lfn = lfn;
 8007be8:	6a3b      	ldr	r3, [r7, #32]
 8007bea:	330b      	adds	r3, #11
 8007bec:	7dfa      	ldrb	r2, [r7, #23]
 8007bee:	701a      	strb	r2, [r3, #0]
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	69fa      	ldr	r2, [r7, #28]
 8007bf4:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
	}

	if (sn[NSFLAG] & NS_LFN) {			/* When LFN is to be created, allocate entries for an SFN + LFNs. */
 8007bf8:	7dfb      	ldrb	r3, [r7, #23]
 8007bfa:	f003 0302 	and.w	r3, r3, #2
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d014      	beq.n	8007c2c <dir_register+0xd4>
		for (n = 0; lfn[n]; n++) ;
 8007c02:	2300      	movs	r3, #0
 8007c04:	62bb      	str	r3, [r7, #40]	; 0x28
 8007c06:	e002      	b.n	8007c0e <dir_register+0xb6>
 8007c08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c0a:	3301      	adds	r3, #1
 8007c0c:	62bb      	str	r3, [r7, #40]	; 0x28
 8007c0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c10:	005b      	lsls	r3, r3, #1
 8007c12:	69fa      	ldr	r2, [r7, #28]
 8007c14:	4413      	add	r3, r2
 8007c16:	881b      	ldrh	r3, [r3, #0]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d1f5      	bne.n	8007c08 <dir_register+0xb0>
		nent = (n + 25) / 13;
 8007c1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c1e:	3319      	adds	r3, #25
 8007c20:	4a53      	ldr	r2, [pc, #332]	; (8007d70 <dir_register+0x218>)
 8007c22:	fba2 2303 	umull	r2, r3, r2, r3
 8007c26:	089b      	lsrs	r3, r3, #2
 8007c28:	627b      	str	r3, [r7, #36]	; 0x24
 8007c2a:	e001      	b.n	8007c30 <dir_register+0xd8>
	} else {						/* Otherwise allocate an entry for an SFN  */
		nent = 1;
 8007c2c:	2301      	movs	r3, #1
 8007c2e:	627b      	str	r3, [r7, #36]	; 0x24
	}
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8007c30:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007c32:	6878      	ldr	r0, [r7, #4]
 8007c34:	f7ff fb95 	bl	8007362 <dir_alloc>
 8007c38:	4603      	mov	r3, r0
 8007c3a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8007c3e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d153      	bne.n	8007cee <dir_register+0x196>
 8007c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c48:	3b01      	subs	r3, #1
 8007c4a:	627b      	str	r3, [r7, #36]	; 0x24
 8007c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d04d      	beq.n	8007cee <dir_register+0x196>
		res = dir_sdi(dp, dp->index - nent);
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	f8b3 3406 	ldrh.w	r3, [r3, #1030]	; 0x406
 8007c58:	461a      	mov	r2, r3
 8007c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c5c:	1ad3      	subs	r3, r2, r3
 8007c5e:	4619      	mov	r1, r3
 8007c60:	6878      	ldr	r0, [r7, #4]
 8007c62:	f7ff f9b3 	bl	8006fcc <dir_sdi>
 8007c66:	4603      	mov	r3, r0
 8007c68:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8007c6c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d13c      	bne.n	8007cee <dir_register+0x196>
			sum = sum_sfn(dp->fn);	/* Sum value of the SFN tied to the LFN */
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 8007c7a:	4618      	mov	r0, r3
 8007c7c:	f7ff fde4 	bl	8007848 <sum_sfn>
 8007c80:	4603      	mov	r3, r0
 8007c82:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(dp->fs, dp->sect);
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007c90:	4619      	mov	r1, r3
 8007c92:	4610      	mov	r0, r2
 8007c94:	f7fe fd3d 	bl	8006712 <move_window>
 8007c98:	4603      	mov	r3, r0
 8007c9a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 8007c9e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d122      	bne.n	8007cec <dir_register+0x194>
				fit_lfn(dp->lfn, dp->dir, (BYTE)nent, sum);
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	f8d3 0420 	ldr.w	r0, [r3, #1056]	; 0x420
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	f8d3 1414 	ldr.w	r1, [r3, #1044]	; 0x414
 8007cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cb4:	b2da      	uxtb	r2, r3
 8007cb6:	7efb      	ldrb	r3, [r7, #27]
 8007cb8:	f7ff fcc2 	bl	8007640 <fit_lfn>
				dp->fs->wflag = 1;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8007cc2:	2201      	movs	r2, #1
 8007cc4:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
				res = dir_next(dp, 0);	/* Next entry */
 8007cc8:	2100      	movs	r1, #0
 8007cca:	6878      	ldr	r0, [r7, #4]
 8007ccc:	f7ff fa2f 	bl	800712e <dir_next>
 8007cd0:	4603      	mov	r3, r0
 8007cd2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8007cd6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d107      	bne.n	8007cee <dir_register+0x196>
 8007cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ce0:	3b01      	subs	r3, #1
 8007ce2:	627b      	str	r3, [r7, #36]	; 0x24
 8007ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d1cc      	bne.n	8007c84 <dir_register+0x12c>
 8007cea:	e000      	b.n	8007cee <dir_register+0x196>
				if (res != FR_OK) break;
 8007cec:	bf00      	nop
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 8007cee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d135      	bne.n	8007d62 <dir_register+0x20a>
		res = move_window(dp->fs, dp->sect);
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007d02:	4619      	mov	r1, r3
 8007d04:	4610      	mov	r0, r2
 8007d06:	f7fe fd04 	bl	8006712 <move_window>
 8007d0a:	4603      	mov	r3, r0
 8007d0c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8007d10:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d124      	bne.n	8007d62 <dir_register+0x20a>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8007d1e:	2220      	movs	r2, #32
 8007d20:	2100      	movs	r1, #0
 8007d22:	4618      	mov	r0, r3
 8007d24:	f7fe fa9e 	bl	8006264 <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	f8d3 0414 	ldr.w	r0, [r3, #1044]	; 0x414
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 8007d34:	220b      	movs	r2, #11
 8007d36:	4619      	mov	r1, r3
 8007d38:	f7fe fa76 	bl	8006228 <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 8007d42:	330b      	adds	r3, #11
 8007d44:	781a      	ldrb	r2, [r3, #0]
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8007d4c:	330c      	adds	r3, #12
 8007d4e:	f002 0218 	and.w	r2, r2, #24
 8007d52:	b2d2      	uxtb	r2, r2
 8007d54:	701a      	strb	r2, [r3, #0]
#endif
			dp->fs->wflag = 1;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8007d5c:	2201      	movs	r2, #1
 8007d5e:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
		}
	}

	return res;
 8007d62:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8007d66:	4618      	mov	r0, r3
 8007d68:	3730      	adds	r7, #48	; 0x30
 8007d6a:	46bd      	mov	sp, r7
 8007d6c:	bd80      	pop	{r7, pc}
 8007d6e:	bf00      	nop
 8007d70:	4ec4ec4f 	.word	0x4ec4ec4f

08007d74 <dir_remove>:
#if !_FS_READONLY && !_FS_MINIMIZE
static
FRESULT dir_remove (	/* FR_OK: Successful, FR_DISK_ERR: A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 8007d74:	b580      	push	{r7, lr}
 8007d76:	b084      	sub	sp, #16
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	6078      	str	r0, [r7, #4]
	FRESULT res;
#if _USE_LFN	/* LFN configuration */
	UINT i;

	i = dp->index;	/* SFN index */
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	f8b3 3406 	ldrh.w	r3, [r3, #1030]	; 0x406
 8007d82:	60bb      	str	r3, [r7, #8]
	res = dir_sdi(dp, (dp->lfn_idx == 0xFFFF) ? i : dp->lfn_idx);	/* Goto the SFN or top of the LFN entries */
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	f8b3 3424 	ldrh.w	r3, [r3, #1060]	; 0x424
 8007d8a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007d8e:	4293      	cmp	r3, r2
 8007d90:	d003      	beq.n	8007d9a <dir_remove+0x26>
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	f8b3 3424 	ldrh.w	r3, [r3, #1060]	; 0x424
 8007d98:	e000      	b.n	8007d9c <dir_remove+0x28>
 8007d9a:	68bb      	ldr	r3, [r7, #8]
 8007d9c:	4619      	mov	r1, r3
 8007d9e:	6878      	ldr	r0, [r7, #4]
 8007da0:	f7ff f914 	bl	8006fcc <dir_sdi>
 8007da4:	4603      	mov	r3, r0
 8007da6:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8007da8:	7bfb      	ldrb	r3, [r7, #15]
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d13a      	bne.n	8007e24 <dir_remove+0xb0>
		do {
			res = move_window(dp->fs, dp->sect);
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007dba:	4619      	mov	r1, r3
 8007dbc:	4610      	mov	r0, r2
 8007dbe:	f7fe fca8 	bl	8006712 <move_window>
 8007dc2:	4603      	mov	r3, r0
 8007dc4:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8007dc6:	7bfb      	ldrb	r3, [r7, #15]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d123      	bne.n	8007e14 <dir_remove+0xa0>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clear and mark the entry "deleted" */
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8007dd2:	2220      	movs	r2, #32
 8007dd4:	2100      	movs	r1, #0
 8007dd6:	4618      	mov	r0, r3
 8007dd8:	f7fe fa44 	bl	8006264 <mem_set>
			*dp->dir = DDEM;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8007de2:	22e5      	movs	r2, #229	; 0xe5
 8007de4:	701a      	strb	r2, [r3, #0]
			dp->fs->wflag = 1;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8007dec:	2201      	movs	r2, #1
 8007dee:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
			if (dp->index >= i) break;	/* When reached SFN, all entries of the object has been deleted. */
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	f8b3 3406 	ldrh.w	r3, [r3, #1030]	; 0x406
 8007df8:	461a      	mov	r2, r3
 8007dfa:	68bb      	ldr	r3, [r7, #8]
 8007dfc:	4293      	cmp	r3, r2
 8007dfe:	d90b      	bls.n	8007e18 <dir_remove+0xa4>
			res = dir_next(dp, 0);		/* Next entry */
 8007e00:	2100      	movs	r1, #0
 8007e02:	6878      	ldr	r0, [r7, #4]
 8007e04:	f7ff f993 	bl	800712e <dir_next>
 8007e08:	4603      	mov	r3, r0
 8007e0a:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 8007e0c:	7bfb      	ldrb	r3, [r7, #15]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d0cd      	beq.n	8007dae <dir_remove+0x3a>
 8007e12:	e002      	b.n	8007e1a <dir_remove+0xa6>
			if (res != FR_OK) break;
 8007e14:	bf00      	nop
 8007e16:	e000      	b.n	8007e1a <dir_remove+0xa6>
			if (dp->index >= i) break;	/* When reached SFN, all entries of the object has been deleted. */
 8007e18:	bf00      	nop
		if (res == FR_NO_FILE) res = FR_INT_ERR;
 8007e1a:	7bfb      	ldrb	r3, [r7, #15]
 8007e1c:	2b04      	cmp	r3, #4
 8007e1e:	d101      	bne.n	8007e24 <dir_remove+0xb0>
 8007e20:	2302      	movs	r3, #2
 8007e22:	73fb      	strb	r3, [r7, #15]
			dp->fs->wflag = 1;
		}
	}
#endif

	return res;
 8007e24:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e26:	4618      	mov	r0, r3
 8007e28:	3710      	adds	r7, #16
 8007e2a:	46bd      	mov	sp, r7
 8007e2c:	bd80      	pop	{r7, pc}

08007e2e <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8007e2e:	b580      	push	{r7, lr}
 8007e30:	b088      	sub	sp, #32
 8007e32:	af00      	add	r7, sp, #0
 8007e34:	6078      	str	r0, [r7, #4]
 8007e36:	6039      	str	r1, [r7, #0]
	BYTE *dir;
#if _USE_LFN
	WCHAR w, *lfn;
#endif

	p = fno->fname;
 8007e38:	683b      	ldr	r3, [r7, #0]
 8007e3a:	3309      	adds	r3, #9
 8007e3c:	61bb      	str	r3, [r7, #24]
	if (dp->sect) {		/* Get SFN */
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d070      	beq.n	8007f2a <get_fileinfo+0xfc>
		dir = dp->dir;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8007e4e:	60fb      	str	r3, [r7, #12]
		i = 0;
 8007e50:	2300      	movs	r3, #0
 8007e52:	61fb      	str	r3, [r7, #28]
		while (i < 11) {		/* Copy name body and extension */
 8007e54:	e032      	b.n	8007ebc <get_fileinfo+0x8e>
			c = (TCHAR)dir[i++];
 8007e56:	69fb      	ldr	r3, [r7, #28]
 8007e58:	1c5a      	adds	r2, r3, #1
 8007e5a:	61fa      	str	r2, [r7, #28]
 8007e5c:	68fa      	ldr	r2, [r7, #12]
 8007e5e:	4413      	add	r3, r2
 8007e60:	781b      	ldrb	r3, [r3, #0]
 8007e62:	75fb      	strb	r3, [r7, #23]
			if (c == ' ') continue;				/* Skip padding spaces */
 8007e64:	7dfb      	ldrb	r3, [r7, #23]
 8007e66:	2b20      	cmp	r3, #32
 8007e68:	d100      	bne.n	8007e6c <get_fileinfo+0x3e>
 8007e6a:	e027      	b.n	8007ebc <get_fileinfo+0x8e>
			if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8007e6c:	7dfb      	ldrb	r3, [r7, #23]
 8007e6e:	2b05      	cmp	r3, #5
 8007e70:	d101      	bne.n	8007e76 <get_fileinfo+0x48>
 8007e72:	23e5      	movs	r3, #229	; 0xe5
 8007e74:	75fb      	strb	r3, [r7, #23]
			if (i == 9) *p++ = '.';				/* Insert a . if extension is exist */
 8007e76:	69fb      	ldr	r3, [r7, #28]
 8007e78:	2b09      	cmp	r3, #9
 8007e7a:	d104      	bne.n	8007e86 <get_fileinfo+0x58>
 8007e7c:	69bb      	ldr	r3, [r7, #24]
 8007e7e:	1c5a      	adds	r2, r3, #1
 8007e80:	61ba      	str	r2, [r7, #24]
 8007e82:	222e      	movs	r2, #46	; 0x2e
 8007e84:	701a      	strb	r2, [r3, #0]
#if _USE_LFN
			if (IsUpper(c) && (dir[DIR_NTres] & (i >= 9 ? NS_EXT : NS_BODY)))
 8007e86:	7dfb      	ldrb	r3, [r7, #23]
 8007e88:	2b40      	cmp	r3, #64	; 0x40
 8007e8a:	d912      	bls.n	8007eb2 <get_fileinfo+0x84>
 8007e8c:	7dfb      	ldrb	r3, [r7, #23]
 8007e8e:	2b5a      	cmp	r3, #90	; 0x5a
 8007e90:	d80f      	bhi.n	8007eb2 <get_fileinfo+0x84>
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	330c      	adds	r3, #12
 8007e96:	781b      	ldrb	r3, [r3, #0]
 8007e98:	461a      	mov	r2, r3
 8007e9a:	69fb      	ldr	r3, [r7, #28]
 8007e9c:	2b08      	cmp	r3, #8
 8007e9e:	d901      	bls.n	8007ea4 <get_fileinfo+0x76>
 8007ea0:	2310      	movs	r3, #16
 8007ea2:	e000      	b.n	8007ea6 <get_fileinfo+0x78>
 8007ea4:	2308      	movs	r3, #8
 8007ea6:	4013      	ands	r3, r2
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d002      	beq.n	8007eb2 <get_fileinfo+0x84>
				c += 0x20;			/* To lower */
 8007eac:	7dfb      	ldrb	r3, [r7, #23]
 8007eae:	3320      	adds	r3, #32
 8007eb0:	75fb      	strb	r3, [r7, #23]
				c = c << 8 | dir[i++];
			c = ff_convert(c, 1);	/* OEM -> Unicode */
			if (!c) c = '?';
#endif
#endif
			*p++ = c;
 8007eb2:	69bb      	ldr	r3, [r7, #24]
 8007eb4:	1c5a      	adds	r2, r3, #1
 8007eb6:	61ba      	str	r2, [r7, #24]
 8007eb8:	7dfa      	ldrb	r2, [r7, #23]
 8007eba:	701a      	strb	r2, [r3, #0]
		while (i < 11) {		/* Copy name body and extension */
 8007ebc:	69fb      	ldr	r3, [r7, #28]
 8007ebe:	2b0a      	cmp	r3, #10
 8007ec0:	d9c9      	bls.n	8007e56 <get_fileinfo+0x28>
		}
		fno->fattrib = dir[DIR_Attr];				/* Attribute */
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	7ada      	ldrb	r2, [r3, #11]
 8007ec6:	683b      	ldr	r3, [r7, #0]
 8007ec8:	721a      	strb	r2, [r3, #8]
		fno->fsize = LD_DWORD(dir + DIR_FileSize);	/* Size */
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	331f      	adds	r3, #31
 8007ece:	781b      	ldrb	r3, [r3, #0]
 8007ed0:	061a      	lsls	r2, r3, #24
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	331e      	adds	r3, #30
 8007ed6:	781b      	ldrb	r3, [r3, #0]
 8007ed8:	041b      	lsls	r3, r3, #16
 8007eda:	4313      	orrs	r3, r2
 8007edc:	68fa      	ldr	r2, [r7, #12]
 8007ede:	321d      	adds	r2, #29
 8007ee0:	7812      	ldrb	r2, [r2, #0]
 8007ee2:	0212      	lsls	r2, r2, #8
 8007ee4:	4313      	orrs	r3, r2
 8007ee6:	68fa      	ldr	r2, [r7, #12]
 8007ee8:	321c      	adds	r2, #28
 8007eea:	7812      	ldrb	r2, [r2, #0]
 8007eec:	431a      	orrs	r2, r3
 8007eee:	683b      	ldr	r3, [r7, #0]
 8007ef0:	601a      	str	r2, [r3, #0]
		fno->fdate = LD_WORD(dir + DIR_WrtDate);	/* Date */
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	3319      	adds	r3, #25
 8007ef6:	781b      	ldrb	r3, [r3, #0]
 8007ef8:	021b      	lsls	r3, r3, #8
 8007efa:	b21a      	sxth	r2, r3
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	3318      	adds	r3, #24
 8007f00:	781b      	ldrb	r3, [r3, #0]
 8007f02:	b21b      	sxth	r3, r3
 8007f04:	4313      	orrs	r3, r2
 8007f06:	b21b      	sxth	r3, r3
 8007f08:	b29a      	uxth	r2, r3
 8007f0a:	683b      	ldr	r3, [r7, #0]
 8007f0c:	809a      	strh	r2, [r3, #4]
		fno->ftime = LD_WORD(dir + DIR_WrtTime);	/* Time */
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	3317      	adds	r3, #23
 8007f12:	781b      	ldrb	r3, [r3, #0]
 8007f14:	021b      	lsls	r3, r3, #8
 8007f16:	b21a      	sxth	r2, r3
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	3316      	adds	r3, #22
 8007f1c:	781b      	ldrb	r3, [r3, #0]
 8007f1e:	b21b      	sxth	r3, r3
 8007f20:	4313      	orrs	r3, r2
 8007f22:	b21b      	sxth	r3, r3
 8007f24:	b29a      	uxth	r2, r3
 8007f26:	683b      	ldr	r3, [r7, #0]
 8007f28:	80da      	strh	r2, [r3, #6]
	}
	*p = 0;		/* Terminate SFN string by a \0 */
 8007f2a:	69bb      	ldr	r3, [r7, #24]
 8007f2c:	2200      	movs	r2, #0
 8007f2e:	701a      	strb	r2, [r3, #0]

#if _USE_LFN
	if (fno->lfname) {
 8007f30:	683b      	ldr	r3, [r7, #0]
 8007f32:	699b      	ldr	r3, [r3, #24]
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d044      	beq.n	8007fc2 <get_fileinfo+0x194>
		i = 0; p = fno->lfname;
 8007f38:	2300      	movs	r3, #0
 8007f3a:	61fb      	str	r3, [r7, #28]
 8007f3c:	683b      	ldr	r3, [r7, #0]
 8007f3e:	699b      	ldr	r3, [r3, #24]
 8007f40:	61bb      	str	r3, [r7, #24]
		if (dp->sect && fno->lfsize && dp->lfn_idx != 0xFFFF) {	/* Get LFN if available */
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d035      	beq.n	8007fb8 <get_fileinfo+0x18a>
 8007f4c:	683b      	ldr	r3, [r7, #0]
 8007f4e:	69db      	ldr	r3, [r3, #28]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d031      	beq.n	8007fb8 <get_fileinfo+0x18a>
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	f8b3 3424 	ldrh.w	r3, [r3, #1060]	; 0x424
 8007f5a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007f5e:	4293      	cmp	r3, r2
 8007f60:	d02a      	beq.n	8007fb8 <get_fileinfo+0x18a>
			lfn = dp->lfn;
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8007f68:	613b      	str	r3, [r7, #16]
			while ((w = *lfn++) != 0) {		/* Get an LFN character */
 8007f6a:	e01d      	b.n	8007fa8 <get_fileinfo+0x17a>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 8007f6c:	897b      	ldrh	r3, [r7, #10]
 8007f6e:	2100      	movs	r1, #0
 8007f70:	4618      	mov	r0, r3
 8007f72:	f002 f9e9 	bl	800a348 <ff_convert>
 8007f76:	4603      	mov	r3, r0
 8007f78:	817b      	strh	r3, [r7, #10]
				if (!w) { i = 0; break; }	/* No LFN if it could not be converted */
 8007f7a:	897b      	ldrh	r3, [r7, #10]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d102      	bne.n	8007f86 <get_fileinfo+0x158>
 8007f80:	2300      	movs	r3, #0
 8007f82:	61fb      	str	r3, [r7, #28]
 8007f84:	e018      	b.n	8007fb8 <get_fileinfo+0x18a>
				if (_DF1S && w >= 0x100)	/* Put 1st byte if it is a DBC (always false on SBCS cfg) */
					p[i++] = (TCHAR)(w >> 8);
#endif
				if (i >= fno->lfsize - 1) { i = 0; break; }	/* No LFN if buffer overflow */
 8007f86:	683b      	ldr	r3, [r7, #0]
 8007f88:	69db      	ldr	r3, [r3, #28]
 8007f8a:	3b01      	subs	r3, #1
 8007f8c:	69fa      	ldr	r2, [r7, #28]
 8007f8e:	429a      	cmp	r2, r3
 8007f90:	d302      	bcc.n	8007f98 <get_fileinfo+0x16a>
 8007f92:	2300      	movs	r3, #0
 8007f94:	61fb      	str	r3, [r7, #28]
 8007f96:	e00f      	b.n	8007fb8 <get_fileinfo+0x18a>
				p[i++] = (TCHAR)w;
 8007f98:	69fb      	ldr	r3, [r7, #28]
 8007f9a:	1c5a      	adds	r2, r3, #1
 8007f9c:	61fa      	str	r2, [r7, #28]
 8007f9e:	69ba      	ldr	r2, [r7, #24]
 8007fa0:	4413      	add	r3, r2
 8007fa2:	897a      	ldrh	r2, [r7, #10]
 8007fa4:	b2d2      	uxtb	r2, r2
 8007fa6:	701a      	strb	r2, [r3, #0]
			while ((w = *lfn++) != 0) {		/* Get an LFN character */
 8007fa8:	693b      	ldr	r3, [r7, #16]
 8007faa:	1c9a      	adds	r2, r3, #2
 8007fac:	613a      	str	r2, [r7, #16]
 8007fae:	881b      	ldrh	r3, [r3, #0]
 8007fb0:	817b      	strh	r3, [r7, #10]
 8007fb2:	897b      	ldrh	r3, [r7, #10]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d1d9      	bne.n	8007f6c <get_fileinfo+0x13e>
			}
		}
		p[i] = 0;	/* Terminate LFN string by a \0 */
 8007fb8:	69ba      	ldr	r2, [r7, #24]
 8007fba:	69fb      	ldr	r3, [r7, #28]
 8007fbc:	4413      	add	r3, r2
 8007fbe:	2200      	movs	r2, #0
 8007fc0:	701a      	strb	r2, [r3, #0]
	}
#endif
}
 8007fc2:	bf00      	nop
 8007fc4:	3720      	adds	r7, #32
 8007fc6:	46bd      	mov	sp, r7
 8007fc8:	bd80      	pop	{r7, pc}
	...

08007fcc <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8007fcc:	b580      	push	{r7, lr}
 8007fce:	b08a      	sub	sp, #40	; 0x28
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	6078      	str	r0, [r7, #4]
 8007fd4:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 8007fd6:	683b      	ldr	r3, [r7, #0]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	613b      	str	r3, [r7, #16]
 8007fdc:	e002      	b.n	8007fe4 <create_name+0x18>
 8007fde:	693b      	ldr	r3, [r7, #16]
 8007fe0:	3301      	adds	r3, #1
 8007fe2:	613b      	str	r3, [r7, #16]
 8007fe4:	693b      	ldr	r3, [r7, #16]
 8007fe6:	781b      	ldrb	r3, [r3, #0]
 8007fe8:	2b2f      	cmp	r3, #47	; 0x2f
 8007fea:	d0f8      	beq.n	8007fde <create_name+0x12>
 8007fec:	693b      	ldr	r3, [r7, #16]
 8007fee:	781b      	ldrb	r3, [r3, #0]
 8007ff0:	2b5c      	cmp	r3, #92	; 0x5c
 8007ff2:	d0f4      	beq.n	8007fde <create_name+0x12>
	lfn = dp->lfn;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8007ffa:	60fb      	str	r3, [r7, #12]
	si = di = 0;
 8007ffc:	2300      	movs	r3, #0
 8007ffe:	617b      	str	r3, [r7, #20]
 8008000:	697b      	ldr	r3, [r7, #20]
 8008002:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8008004:	69bb      	ldr	r3, [r7, #24]
 8008006:	1c5a      	adds	r2, r3, #1
 8008008:	61ba      	str	r2, [r7, #24]
 800800a:	693a      	ldr	r2, [r7, #16]
 800800c:	4413      	add	r3, r2
 800800e:	781b      	ldrb	r3, [r3, #0]
 8008010:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
 8008012:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008014:	2b1f      	cmp	r3, #31
 8008016:	d92f      	bls.n	8008078 <create_name+0xac>
 8008018:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800801a:	2b2f      	cmp	r3, #47	; 0x2f
 800801c:	d02c      	beq.n	8008078 <create_name+0xac>
 800801e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008020:	2b5c      	cmp	r3, #92	; 0x5c
 8008022:	d029      	beq.n	8008078 <create_name+0xac>
		if (di >= _MAX_LFN)				/* Reject too long name */
 8008024:	697b      	ldr	r3, [r7, #20]
 8008026:	2bfe      	cmp	r3, #254	; 0xfe
 8008028:	d901      	bls.n	800802e <create_name+0x62>
			return FR_INVALID_NAME;
 800802a:	2306      	movs	r3, #6
 800802c:	e17b      	b.n	8008326 <create_name+0x35a>
#if !_LFN_UNICODE
		w &= 0xFF;
 800802e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008030:	b2db      	uxtb	r3, r3
 8008032:	84bb      	strh	r3, [r7, #36]	; 0x24
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b))
				return FR_INVALID_NAME;	/* Reject invalid sequence */
#endif
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8008034:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008036:	2101      	movs	r1, #1
 8008038:	4618      	mov	r0, r3
 800803a:	f002 f985 	bl	800a348 <ff_convert>
 800803e:	4603      	mov	r3, r0
 8008040:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8008042:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008044:	2b00      	cmp	r3, #0
 8008046:	d101      	bne.n	800804c <create_name+0x80>
 8008048:	2306      	movs	r3, #6
 800804a:	e16c      	b.n	8008326 <create_name+0x35a>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal characters for LFN */
 800804c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800804e:	2b7f      	cmp	r3, #127	; 0x7f
 8008050:	d809      	bhi.n	8008066 <create_name+0x9a>
 8008052:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008054:	4619      	mov	r1, r3
 8008056:	48b6      	ldr	r0, [pc, #728]	; (8008330 <create_name+0x364>)
 8008058:	f7fe f944 	bl	80062e4 <chk_chr>
 800805c:	4603      	mov	r3, r0
 800805e:	2b00      	cmp	r3, #0
 8008060:	d001      	beq.n	8008066 <create_name+0x9a>
			return FR_INVALID_NAME;
 8008062:	2306      	movs	r3, #6
 8008064:	e15f      	b.n	8008326 <create_name+0x35a>
		lfn[di++] = w;					/* Store the Unicode character */
 8008066:	697b      	ldr	r3, [r7, #20]
 8008068:	1c5a      	adds	r2, r3, #1
 800806a:	617a      	str	r2, [r7, #20]
 800806c:	005b      	lsls	r3, r3, #1
 800806e:	68fa      	ldr	r2, [r7, #12]
 8008070:	4413      	add	r3, r2
 8008072:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008074:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8008076:	e7c5      	b.n	8008004 <create_name+0x38>
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8008078:	693a      	ldr	r2, [r7, #16]
 800807a:	69bb      	ldr	r3, [r7, #24]
 800807c:	441a      	add	r2, r3
 800807e:	683b      	ldr	r3, [r7, #0]
 8008080:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 8008082:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008084:	2b1f      	cmp	r3, #31
 8008086:	d801      	bhi.n	800808c <create_name+0xc0>
 8008088:	2304      	movs	r3, #4
 800808a:	e000      	b.n	800808e <create_name+0xc2>
 800808c:	2300      	movs	r3, #0
 800808e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
 8008092:	e011      	b.n	80080b8 <create_name+0xec>
		w = lfn[di - 1];
 8008094:	697b      	ldr	r3, [r7, #20]
 8008096:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800809a:	3b01      	subs	r3, #1
 800809c:	005b      	lsls	r3, r3, #1
 800809e:	68fa      	ldr	r2, [r7, #12]
 80080a0:	4413      	add	r3, r2
 80080a2:	881b      	ldrh	r3, [r3, #0]
 80080a4:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 80080a6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80080a8:	2b20      	cmp	r3, #32
 80080aa:	d002      	beq.n	80080b2 <create_name+0xe6>
 80080ac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80080ae:	2b2e      	cmp	r3, #46	; 0x2e
 80080b0:	d106      	bne.n	80080c0 <create_name+0xf4>
		di--;
 80080b2:	697b      	ldr	r3, [r7, #20]
 80080b4:	3b01      	subs	r3, #1
 80080b6:	617b      	str	r3, [r7, #20]
	while (di) {						/* Strip trailing spaces and dots */
 80080b8:	697b      	ldr	r3, [r7, #20]
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d1ea      	bne.n	8008094 <create_name+0xc8>
 80080be:	e000      	b.n	80080c2 <create_name+0xf6>
		if (w != ' ' && w != '.') break;
 80080c0:	bf00      	nop
	}
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
 80080c2:	697b      	ldr	r3, [r7, #20]
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d101      	bne.n	80080cc <create_name+0x100>
 80080c8:	2306      	movs	r3, #6
 80080ca:	e12c      	b.n	8008326 <create_name+0x35a>

	lfn[di] = 0;						/* LFN is created */
 80080cc:	697b      	ldr	r3, [r7, #20]
 80080ce:	005b      	lsls	r3, r3, #1
 80080d0:	68fa      	ldr	r2, [r7, #12]
 80080d2:	4413      	add	r3, r2
 80080d4:	2200      	movs	r2, #0
 80080d6:	801a      	strh	r2, [r3, #0]

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 80080de:	220b      	movs	r2, #11
 80080e0:	2120      	movs	r1, #32
 80080e2:	4618      	mov	r0, r3
 80080e4:	f7fe f8be 	bl	8006264 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 80080e8:	2300      	movs	r3, #0
 80080ea:	61bb      	str	r3, [r7, #24]
 80080ec:	e002      	b.n	80080f4 <create_name+0x128>
 80080ee:	69bb      	ldr	r3, [r7, #24]
 80080f0:	3301      	adds	r3, #1
 80080f2:	61bb      	str	r3, [r7, #24]
 80080f4:	69bb      	ldr	r3, [r7, #24]
 80080f6:	005b      	lsls	r3, r3, #1
 80080f8:	68fa      	ldr	r2, [r7, #12]
 80080fa:	4413      	add	r3, r2
 80080fc:	881b      	ldrh	r3, [r3, #0]
 80080fe:	2b20      	cmp	r3, #32
 8008100:	d0f5      	beq.n	80080ee <create_name+0x122>
 8008102:	69bb      	ldr	r3, [r7, #24]
 8008104:	005b      	lsls	r3, r3, #1
 8008106:	68fa      	ldr	r2, [r7, #12]
 8008108:	4413      	add	r3, r2
 800810a:	881b      	ldrh	r3, [r3, #0]
 800810c:	2b2e      	cmp	r3, #46	; 0x2e
 800810e:	d0ee      	beq.n	80080ee <create_name+0x122>
	if (si) cf |= NS_LOSS | NS_LFN;
 8008110:	69bb      	ldr	r3, [r7, #24]
 8008112:	2b00      	cmp	r3, #0
 8008114:	d009      	beq.n	800812a <create_name+0x15e>
 8008116:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800811a:	f043 0303 	orr.w	r3, r3, #3
 800811e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8008122:	e002      	b.n	800812a <create_name+0x15e>
 8008124:	697b      	ldr	r3, [r7, #20]
 8008126:	3b01      	subs	r3, #1
 8008128:	617b      	str	r3, [r7, #20]
 800812a:	697b      	ldr	r3, [r7, #20]
 800812c:	2b00      	cmp	r3, #0
 800812e:	d009      	beq.n	8008144 <create_name+0x178>
 8008130:	697b      	ldr	r3, [r7, #20]
 8008132:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8008136:	3b01      	subs	r3, #1
 8008138:	005b      	lsls	r3, r3, #1
 800813a:	68fa      	ldr	r2, [r7, #12]
 800813c:	4413      	add	r3, r2
 800813e:	881b      	ldrh	r3, [r3, #0]
 8008140:	2b2e      	cmp	r3, #46	; 0x2e
 8008142:	d1ef      	bne.n	8008124 <create_name+0x158>

	b = i = 0; ni = 8;
 8008144:	2300      	movs	r3, #0
 8008146:	623b      	str	r3, [r7, #32]
 8008148:	2300      	movs	r3, #0
 800814a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800814e:	2308      	movs	r3, #8
 8008150:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8008152:	69bb      	ldr	r3, [r7, #24]
 8008154:	1c5a      	adds	r2, r3, #1
 8008156:	61ba      	str	r2, [r7, #24]
 8008158:	005b      	lsls	r3, r3, #1
 800815a:	68fa      	ldr	r2, [r7, #12]
 800815c:	4413      	add	r3, r2
 800815e:	881b      	ldrh	r3, [r3, #0]
 8008160:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8008162:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008164:	2b00      	cmp	r3, #0
 8008166:	f000 8090 	beq.w	800828a <create_name+0x2be>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800816a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800816c:	2b20      	cmp	r3, #32
 800816e:	d006      	beq.n	800817e <create_name+0x1b2>
 8008170:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008172:	2b2e      	cmp	r3, #46	; 0x2e
 8008174:	d10a      	bne.n	800818c <create_name+0x1c0>
 8008176:	69ba      	ldr	r2, [r7, #24]
 8008178:	697b      	ldr	r3, [r7, #20]
 800817a:	429a      	cmp	r2, r3
 800817c:	d006      	beq.n	800818c <create_name+0x1c0>
			cf |= NS_LOSS | NS_LFN; continue;
 800817e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008182:	f043 0303 	orr.w	r3, r3, #3
 8008186:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800818a:	e07d      	b.n	8008288 <create_name+0x2bc>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800818c:	6a3a      	ldr	r2, [r7, #32]
 800818e:	69fb      	ldr	r3, [r7, #28]
 8008190:	429a      	cmp	r2, r3
 8008192:	d203      	bcs.n	800819c <create_name+0x1d0>
 8008194:	69ba      	ldr	r2, [r7, #24]
 8008196:	697b      	ldr	r3, [r7, #20]
 8008198:	429a      	cmp	r2, r3
 800819a:	d123      	bne.n	80081e4 <create_name+0x218>
			if (ni == 11) {				/* Long extension */
 800819c:	69fb      	ldr	r3, [r7, #28]
 800819e:	2b0b      	cmp	r3, #11
 80081a0:	d106      	bne.n	80081b0 <create_name+0x1e4>
				cf |= NS_LOSS | NS_LFN; break;
 80081a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80081a6:	f043 0303 	orr.w	r3, r3, #3
 80081aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80081ae:	e06f      	b.n	8008290 <create_name+0x2c4>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 80081b0:	69ba      	ldr	r2, [r7, #24]
 80081b2:	697b      	ldr	r3, [r7, #20]
 80081b4:	429a      	cmp	r2, r3
 80081b6:	d005      	beq.n	80081c4 <create_name+0x1f8>
 80081b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80081bc:	f043 0303 	orr.w	r3, r3, #3
 80081c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 80081c4:	69ba      	ldr	r2, [r7, #24]
 80081c6:	697b      	ldr	r3, [r7, #20]
 80081c8:	429a      	cmp	r2, r3
 80081ca:	d860      	bhi.n	800828e <create_name+0x2c2>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 80081cc:	697b      	ldr	r3, [r7, #20]
 80081ce:	61bb      	str	r3, [r7, #24]
 80081d0:	2308      	movs	r3, #8
 80081d2:	623b      	str	r3, [r7, #32]
 80081d4:	230b      	movs	r3, #11
 80081d6:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 80081d8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80081dc:	009b      	lsls	r3, r3, #2
 80081de:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80081e2:	e051      	b.n	8008288 <create_name+0x2bc>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 80081e4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80081e6:	2b7f      	cmp	r3, #127	; 0x7f
 80081e8:	d914      	bls.n	8008214 <create_name+0x248>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 80081ea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80081ec:	2100      	movs	r1, #0
 80081ee:	4618      	mov	r0, r3
 80081f0:	f002 f8aa 	bl	800a348 <ff_convert>
 80081f4:	4603      	mov	r3, r0
 80081f6:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 80081f8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d004      	beq.n	8008208 <create_name+0x23c>
 80081fe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008200:	3b80      	subs	r3, #128	; 0x80
 8008202:	4a4c      	ldr	r2, [pc, #304]	; (8008334 <create_name+0x368>)
 8008204:	5cd3      	ldrb	r3, [r2, r3]
 8008206:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8008208:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800820c:	f043 0302 	orr.w	r3, r3, #2
 8008210:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8008214:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008216:	2b00      	cmp	r3, #0
 8008218:	d007      	beq.n	800822a <create_name+0x25e>
 800821a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800821c:	4619      	mov	r1, r3
 800821e:	4846      	ldr	r0, [pc, #280]	; (8008338 <create_name+0x36c>)
 8008220:	f7fe f860 	bl	80062e4 <chk_chr>
 8008224:	4603      	mov	r3, r0
 8008226:	2b00      	cmp	r3, #0
 8008228:	d008      	beq.n	800823c <create_name+0x270>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800822a:	235f      	movs	r3, #95	; 0x5f
 800822c:	84bb      	strh	r3, [r7, #36]	; 0x24
 800822e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008232:	f043 0303 	orr.w	r3, r3, #3
 8008236:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800823a:	e01b      	b.n	8008274 <create_name+0x2a8>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800823c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800823e:	2b40      	cmp	r3, #64	; 0x40
 8008240:	d909      	bls.n	8008256 <create_name+0x28a>
 8008242:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008244:	2b5a      	cmp	r3, #90	; 0x5a
 8008246:	d806      	bhi.n	8008256 <create_name+0x28a>
					b |= 2;
 8008248:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800824c:	f043 0302 	orr.w	r3, r3, #2
 8008250:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8008254:	e00e      	b.n	8008274 <create_name+0x2a8>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8008256:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008258:	2b60      	cmp	r3, #96	; 0x60
 800825a:	d90b      	bls.n	8008274 <create_name+0x2a8>
 800825c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800825e:	2b7a      	cmp	r3, #122	; 0x7a
 8008260:	d808      	bhi.n	8008274 <create_name+0x2a8>
						b |= 1; w -= 0x20;
 8008262:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008266:	f043 0301 	orr.w	r3, r3, #1
 800826a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800826e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008270:	3b20      	subs	r3, #32
 8008272:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 800827a:	6a3b      	ldr	r3, [r7, #32]
 800827c:	1c59      	adds	r1, r3, #1
 800827e:	6239      	str	r1, [r7, #32]
 8008280:	4413      	add	r3, r2
 8008282:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008284:	b2d2      	uxtb	r2, r2
 8008286:	701a      	strb	r2, [r3, #0]
		w = lfn[si++];					/* Get an LFN character */
 8008288:	e763      	b.n	8008152 <create_name+0x186>
		if (!w) break;					/* Break on end of the LFN */
 800828a:	bf00      	nop
 800828c:	e000      	b.n	8008290 <create_name+0x2c4>
			if (si > di) break;			/* No extension */
 800828e:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with deleted mark, replace it with RDDEM */
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 8008296:	781b      	ldrb	r3, [r3, #0]
 8008298:	2be5      	cmp	r3, #229	; 0xe5
 800829a:	d104      	bne.n	80082a6 <create_name+0x2da>
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 80082a2:	2205      	movs	r2, #5
 80082a4:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 80082a6:	69fb      	ldr	r3, [r7, #28]
 80082a8:	2b08      	cmp	r3, #8
 80082aa:	d104      	bne.n	80082b6 <create_name+0x2ea>
 80082ac:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80082b0:	009b      	lsls	r3, r3, #2
 80082b2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
 80082b6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80082ba:	f003 030c 	and.w	r3, r3, #12
 80082be:	2b0c      	cmp	r3, #12
 80082c0:	d005      	beq.n	80082ce <create_name+0x302>
 80082c2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80082c6:	f003 0303 	and.w	r3, r3, #3
 80082ca:	2b03      	cmp	r3, #3
 80082cc:	d105      	bne.n	80082da <create_name+0x30e>
		cf |= NS_LFN;
 80082ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80082d2:	f043 0302 	orr.w	r3, r3, #2
 80082d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 80082da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80082de:	f003 0302 	and.w	r3, r3, #2
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d117      	bne.n	8008316 <create_name+0x34a>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 80082e6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80082ea:	f003 0303 	and.w	r3, r3, #3
 80082ee:	2b01      	cmp	r3, #1
 80082f0:	d105      	bne.n	80082fe <create_name+0x332>
 80082f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80082f6:	f043 0310 	orr.w	r3, r3, #16
 80082fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 80082fe:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008302:	f003 030c 	and.w	r3, r3, #12
 8008306:	2b04      	cmp	r3, #4
 8008308:	d105      	bne.n	8008316 <create_name+0x34a>
 800830a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800830e:	f043 0308 	orr.w	r3, r3, #8
 8008312:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 800831c:	330b      	adds	r3, #11
 800831e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8008322:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8008324:	2300      	movs	r3, #0

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */

	return FR_OK;
#endif
}
 8008326:	4618      	mov	r0, r3
 8008328:	3728      	adds	r7, #40	; 0x28
 800832a:	46bd      	mov	sp, r7
 800832c:	bd80      	pop	{r7, pc}
 800832e:	bf00      	nop
 8008330:	0800d848 	.word	0x0800d848
 8008334:	0800d8a8 	.word	0x0800d8a8
 8008338:	0800d854 	.word	0x0800d854

0800833c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800833c:	b580      	push	{r7, lr}
 800833e:	b084      	sub	sp, #16
 8008340:	af00      	add	r7, sp, #0
 8008342:	6078      	str	r0, [r7, #4]
 8008344:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 8008346:	683b      	ldr	r3, [r7, #0]
 8008348:	781b      	ldrb	r3, [r3, #0]
 800834a:	2b2f      	cmp	r3, #47	; 0x2f
 800834c:	d003      	beq.n	8008356 <follow_path+0x1a>
 800834e:	683b      	ldr	r3, [r7, #0]
 8008350:	781b      	ldrb	r3, [r3, #0]
 8008352:	2b5c      	cmp	r3, #92	; 0x5c
 8008354:	d102      	bne.n	800835c <follow_path+0x20>
		path++;
 8008356:	683b      	ldr	r3, [r7, #0]
 8008358:	3301      	adds	r3, #1
 800835a:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	2200      	movs	r2, #0
 8008360:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8008364:	683b      	ldr	r3, [r7, #0]
 8008366:	781b      	ldrb	r3, [r3, #0]
 8008368:	2b1f      	cmp	r3, #31
 800836a:	d80a      	bhi.n	8008382 <follow_path+0x46>
		res = dir_sdi(dp, 0);
 800836c:	2100      	movs	r1, #0
 800836e:	6878      	ldr	r0, [r7, #4]
 8008370:	f7fe fe2c 	bl	8006fcc <dir_sdi>
 8008374:	4603      	mov	r3, r0
 8008376:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	2200      	movs	r2, #0
 800837c:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
 8008380:	e045      	b.n	800840e <follow_path+0xd2>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008382:	463b      	mov	r3, r7
 8008384:	4619      	mov	r1, r3
 8008386:	6878      	ldr	r0, [r7, #4]
 8008388:	f7ff fe20 	bl	8007fcc <create_name>
 800838c:	4603      	mov	r3, r0
 800838e:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8008390:	7bfb      	ldrb	r3, [r7, #15]
 8008392:	2b00      	cmp	r3, #0
 8008394:	d136      	bne.n	8008404 <follow_path+0xc8>
			res = dir_find(dp);				/* Find an object with the sagment name */
 8008396:	6878      	ldr	r0, [r7, #4]
 8008398:	f7ff fa76 	bl	8007888 <dir_find>
 800839c:	4603      	mov	r3, r0
 800839e:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 80083a6:	7adb      	ldrb	r3, [r3, #11]
 80083a8:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 80083aa:	7bfb      	ldrb	r3, [r7, #15]
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d00a      	beq.n	80083c6 <follow_path+0x8a>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80083b0:	7bfb      	ldrb	r3, [r7, #15]
 80083b2:	2b04      	cmp	r3, #4
 80083b4:	d128      	bne.n	8008408 <follow_path+0xcc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80083b6:	7bbb      	ldrb	r3, [r7, #14]
 80083b8:	f003 0304 	and.w	r3, r3, #4
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d123      	bne.n	8008408 <follow_path+0xcc>
 80083c0:	2305      	movs	r3, #5
 80083c2:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 80083c4:	e020      	b.n	8008408 <follow_path+0xcc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80083c6:	7bbb      	ldrb	r3, [r7, #14]
 80083c8:	f003 0304 	and.w	r3, r3, #4
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d11d      	bne.n	800840c <follow_path+0xd0>
			dir = dp->dir;						/* Follow the sub-directory */
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 80083d6:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 80083d8:	68bb      	ldr	r3, [r7, #8]
 80083da:	330b      	adds	r3, #11
 80083dc:	781b      	ldrb	r3, [r3, #0]
 80083de:	f003 0310 	and.w	r3, r3, #16
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d102      	bne.n	80083ec <follow_path+0xb0>
				res = FR_NO_PATH; break;
 80083e6:	2305      	movs	r3, #5
 80083e8:	73fb      	strb	r3, [r7, #15]
 80083ea:	e010      	b.n	800840e <follow_path+0xd2>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80083f2:	68b9      	ldr	r1, [r7, #8]
 80083f4:	4618      	mov	r0, r3
 80083f6:	f7fe fffe 	bl	80073f6 <ld_clust>
 80083fa:	4602      	mov	r2, r0
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008402:	e7be      	b.n	8008382 <follow_path+0x46>
			if (res != FR_OK) break;
 8008404:	bf00      	nop
 8008406:	e002      	b.n	800840e <follow_path+0xd2>
				break;
 8008408:	bf00      	nop
 800840a:	e000      	b.n	800840e <follow_path+0xd2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800840c:	bf00      	nop
		}
	}

	return res;
 800840e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008410:	4618      	mov	r0, r3
 8008412:	3710      	adds	r7, #16
 8008414:	46bd      	mov	sp, r7
 8008416:	bd80      	pop	{r7, pc}

08008418 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8008418:	b480      	push	{r7}
 800841a:	b087      	sub	sp, #28
 800841c:	af00      	add	r7, sp, #0
 800841e:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8008420:	f04f 33ff 	mov.w	r3, #4294967295
 8008424:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	2b00      	cmp	r3, #0
 800842c:	d031      	beq.n	8008492 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	617b      	str	r3, [r7, #20]
 8008434:	e002      	b.n	800843c <get_ldnumber+0x24>
 8008436:	697b      	ldr	r3, [r7, #20]
 8008438:	3301      	adds	r3, #1
 800843a:	617b      	str	r3, [r7, #20]
 800843c:	697b      	ldr	r3, [r7, #20]
 800843e:	781b      	ldrb	r3, [r3, #0]
 8008440:	2b1f      	cmp	r3, #31
 8008442:	d903      	bls.n	800844c <get_ldnumber+0x34>
 8008444:	697b      	ldr	r3, [r7, #20]
 8008446:	781b      	ldrb	r3, [r3, #0]
 8008448:	2b3a      	cmp	r3, #58	; 0x3a
 800844a:	d1f4      	bne.n	8008436 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800844c:	697b      	ldr	r3, [r7, #20]
 800844e:	781b      	ldrb	r3, [r3, #0]
 8008450:	2b3a      	cmp	r3, #58	; 0x3a
 8008452:	d11c      	bne.n	800848e <get_ldnumber+0x76>
			tp = *path;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	1c5a      	adds	r2, r3, #1
 800845e:	60fa      	str	r2, [r7, #12]
 8008460:	781b      	ldrb	r3, [r3, #0]
 8008462:	3b30      	subs	r3, #48	; 0x30
 8008464:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8008466:	68bb      	ldr	r3, [r7, #8]
 8008468:	2b09      	cmp	r3, #9
 800846a:	d80e      	bhi.n	800848a <get_ldnumber+0x72>
 800846c:	68fa      	ldr	r2, [r7, #12]
 800846e:	697b      	ldr	r3, [r7, #20]
 8008470:	429a      	cmp	r2, r3
 8008472:	d10a      	bne.n	800848a <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8008474:	68bb      	ldr	r3, [r7, #8]
 8008476:	2b00      	cmp	r3, #0
 8008478:	d107      	bne.n	800848a <get_ldnumber+0x72>
					vol = (int)i;
 800847a:	68bb      	ldr	r3, [r7, #8]
 800847c:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800847e:	697b      	ldr	r3, [r7, #20]
 8008480:	3301      	adds	r3, #1
 8008482:	617b      	str	r3, [r7, #20]
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	697a      	ldr	r2, [r7, #20]
 8008488:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800848a:	693b      	ldr	r3, [r7, #16]
 800848c:	e002      	b.n	8008494 <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800848e:	2300      	movs	r3, #0
 8008490:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8008492:	693b      	ldr	r3, [r7, #16]
}
 8008494:	4618      	mov	r0, r3
 8008496:	371c      	adds	r7, #28
 8008498:	46bd      	mov	sp, r7
 800849a:	bc80      	pop	{r7}
 800849c:	4770      	bx	lr
	...

080084a0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 80084a0:	b580      	push	{r7, lr}
 80084a2:	b082      	sub	sp, #8
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	6078      	str	r0, [r7, #4]
 80084a8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	2200      	movs	r2, #0
 80084ae:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	f04f 32ff 	mov.w	r2, #4294967295
 80084b8:	f8c3 242c 	str.w	r2, [r3, #1068]	; 0x42c
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 80084bc:	6839      	ldr	r1, [r7, #0]
 80084be:	6878      	ldr	r0, [r7, #4]
 80084c0:	f7fe f927 	bl	8006712 <move_window>
 80084c4:	4603      	mov	r3, r0
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d001      	beq.n	80084ce <check_fs+0x2e>
		return 3;
 80084ca:	2303      	movs	r3, #3
 80084cc:	e04a      	b.n	8008564 <check_fs+0xc4>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80084d4:	3301      	adds	r3, #1
 80084d6:	781b      	ldrb	r3, [r3, #0]
 80084d8:	021b      	lsls	r3, r3, #8
 80084da:	b21a      	sxth	r2, r3
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 80084e2:	b21b      	sxth	r3, r3
 80084e4:	4313      	orrs	r3, r2
 80084e6:	b21b      	sxth	r3, r3
 80084e8:	4a20      	ldr	r2, [pc, #128]	; (800856c <check_fs+0xcc>)
 80084ea:	4293      	cmp	r3, r2
 80084ec:	d001      	beq.n	80084f2 <check_fs+0x52>
		return 2;
 80084ee:	2302      	movs	r3, #2
 80084f0:	e038      	b.n	8008564 <check_fs+0xc4>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	3336      	adds	r3, #54	; 0x36
 80084f6:	3303      	adds	r3, #3
 80084f8:	781b      	ldrb	r3, [r3, #0]
 80084fa:	061a      	lsls	r2, r3, #24
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	3336      	adds	r3, #54	; 0x36
 8008500:	3302      	adds	r3, #2
 8008502:	781b      	ldrb	r3, [r3, #0]
 8008504:	041b      	lsls	r3, r3, #16
 8008506:	4313      	orrs	r3, r2
 8008508:	687a      	ldr	r2, [r7, #4]
 800850a:	3236      	adds	r2, #54	; 0x36
 800850c:	3201      	adds	r2, #1
 800850e:	7812      	ldrb	r2, [r2, #0]
 8008510:	0212      	lsls	r2, r2, #8
 8008512:	4313      	orrs	r3, r2
 8008514:	687a      	ldr	r2, [r7, #4]
 8008516:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 800851a:	4313      	orrs	r3, r2
 800851c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008520:	4a13      	ldr	r2, [pc, #76]	; (8008570 <check_fs+0xd0>)
 8008522:	4293      	cmp	r3, r2
 8008524:	d101      	bne.n	800852a <check_fs+0x8a>
		return 0;
 8008526:	2300      	movs	r3, #0
 8008528:	e01c      	b.n	8008564 <check_fs+0xc4>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	3352      	adds	r3, #82	; 0x52
 800852e:	3303      	adds	r3, #3
 8008530:	781b      	ldrb	r3, [r3, #0]
 8008532:	061a      	lsls	r2, r3, #24
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	3352      	adds	r3, #82	; 0x52
 8008538:	3302      	adds	r3, #2
 800853a:	781b      	ldrb	r3, [r3, #0]
 800853c:	041b      	lsls	r3, r3, #16
 800853e:	4313      	orrs	r3, r2
 8008540:	687a      	ldr	r2, [r7, #4]
 8008542:	3252      	adds	r2, #82	; 0x52
 8008544:	3201      	adds	r2, #1
 8008546:	7812      	ldrb	r2, [r2, #0]
 8008548:	0212      	lsls	r2, r2, #8
 800854a:	4313      	orrs	r3, r2
 800854c:	687a      	ldr	r2, [r7, #4]
 800854e:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 8008552:	4313      	orrs	r3, r2
 8008554:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008558:	4a05      	ldr	r2, [pc, #20]	; (8008570 <check_fs+0xd0>)
 800855a:	4293      	cmp	r3, r2
 800855c:	d101      	bne.n	8008562 <check_fs+0xc2>
		return 0;
 800855e:	2300      	movs	r3, #0
 8008560:	e000      	b.n	8008564 <check_fs+0xc4>

	return 1;
 8008562:	2301      	movs	r3, #1
}
 8008564:	4618      	mov	r0, r3
 8008566:	3708      	adds	r7, #8
 8008568:	46bd      	mov	sp, r7
 800856a:	bd80      	pop	{r7, pc}
 800856c:	ffffaa55 	.word	0xffffaa55
 8008570:	00544146 	.word	0x00544146

08008574 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 8008574:	b580      	push	{r7, lr}
 8008576:	b096      	sub	sp, #88	; 0x58
 8008578:	af00      	add	r7, sp, #0
 800857a:	60f8      	str	r0, [r7, #12]
 800857c:	60b9      	str	r1, [r7, #8]
 800857e:	4613      	mov	r3, r2
 8008580:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	2200      	movs	r2, #0
 8008586:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8008588:	68b8      	ldr	r0, [r7, #8]
 800858a:	f7ff ff45 	bl	8008418 <get_ldnumber>
 800858e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8008590:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008592:	2b00      	cmp	r3, #0
 8008594:	da01      	bge.n	800859a <find_volume+0x26>
 8008596:	230b      	movs	r3, #11
 8008598:	e2de      	b.n	8008b58 <find_volume+0x5e4>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800859a:	4ab1      	ldr	r2, [pc, #708]	; (8008860 <find_volume+0x2ec>)
 800859c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800859e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80085a2:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80085a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d101      	bne.n	80085ae <find_volume+0x3a>
 80085aa:	230c      	movs	r3, #12
 80085ac:	e2d4      	b.n	8008b58 <find_volume+0x5e4>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80085b2:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 80085b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085b6:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d01b      	beq.n	80085f6 <find_volume+0x82>
		stat = disk_status(fs->drv);
 80085be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085c0:	f893 3401 	ldrb.w	r3, [r3, #1025]	; 0x401
 80085c4:	4618      	mov	r0, r3
 80085c6:	f7fd fd91 	bl	80060ec <disk_status>
 80085ca:	4603      	mov	r3, r0
 80085cc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80085d0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80085d4:	f003 0301 	and.w	r3, r3, #1
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d10c      	bne.n	80085f6 <find_volume+0x82>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 80085dc:	79fb      	ldrb	r3, [r7, #7]
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d007      	beq.n	80085f2 <find_volume+0x7e>
 80085e2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80085e6:	f003 0304 	and.w	r3, r3, #4
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d001      	beq.n	80085f2 <find_volume+0x7e>
				return FR_WRITE_PROTECTED;
 80085ee:	230a      	movs	r3, #10
 80085f0:	e2b2      	b.n	8008b58 <find_volume+0x5e4>
			return FR_OK;				/* The file system object is valid */
 80085f2:	2300      	movs	r3, #0
 80085f4:	e2b0      	b.n	8008b58 <find_volume+0x5e4>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80085f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085f8:	2200      	movs	r2, #0
 80085fa:	f883 2400 	strb.w	r2, [r3, #1024]	; 0x400
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80085fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008600:	b2da      	uxtb	r2, r3
 8008602:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008604:	f883 2401 	strb.w	r2, [r3, #1025]	; 0x401
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8008608:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800860a:	f893 3401 	ldrb.w	r3, [r3, #1025]	; 0x401
 800860e:	4618      	mov	r0, r3
 8008610:	f7fd fd86 	bl	8006120 <disk_initialize>
 8008614:	4603      	mov	r3, r0
 8008616:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 800861a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800861e:	f003 0301 	and.w	r3, r3, #1
 8008622:	2b00      	cmp	r3, #0
 8008624:	d001      	beq.n	800862a <find_volume+0xb6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8008626:	2303      	movs	r3, #3
 8008628:	e296      	b.n	8008b58 <find_volume+0x5e4>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 800862a:	79fb      	ldrb	r3, [r7, #7]
 800862c:	2b00      	cmp	r3, #0
 800862e:	d007      	beq.n	8008640 <find_volume+0xcc>
 8008630:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008634:	f003 0304 	and.w	r3, r3, #4
 8008638:	2b00      	cmp	r3, #0
 800863a:	d001      	beq.n	8008640 <find_volume+0xcc>
		return FR_WRITE_PROTECTED;
 800863c:	230a      	movs	r3, #10
 800863e:	e28b      	b.n	8008b58 <find_volume+0x5e4>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
 8008640:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008642:	f893 0401 	ldrb.w	r0, [r3, #1025]	; 0x401
 8008646:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008648:	f203 430a 	addw	r3, r3, #1034	; 0x40a
 800864c:	461a      	mov	r2, r3
 800864e:	2102      	movs	r1, #2
 8008650:	f7fd fdcc 	bl	80061ec <disk_ioctl>
 8008654:	4603      	mov	r3, r0
 8008656:	2b00      	cmp	r3, #0
 8008658:	d10b      	bne.n	8008672 <find_volume+0xfe>
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
 800865a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800865c:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 8008660:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008664:	d305      	bcc.n	8008672 <find_volume+0xfe>
 8008666:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008668:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800866c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008670:	d901      	bls.n	8008676 <find_volume+0x102>
 8008672:	2301      	movs	r3, #1
 8008674:	e270      	b.n	8008b58 <find_volume+0x5e4>
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 8008676:	2300      	movs	r3, #0
 8008678:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 800867a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800867c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800867e:	f7ff ff0f 	bl	80084a0 <check_fs>
 8008682:	4603      	mov	r3, r0
 8008684:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 8008688:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800868c:	2b01      	cmp	r3, #1
 800868e:	d155      	bne.n	800873c <find_volume+0x1c8>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8008690:	2300      	movs	r3, #0
 8008692:	643b      	str	r3, [r7, #64]	; 0x40
 8008694:	e029      	b.n	80086ea <find_volume+0x176>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 8008696:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008698:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800869a:	011b      	lsls	r3, r3, #4
 800869c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80086a0:	4413      	add	r3, r2
 80086a2:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 80086a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086a6:	3304      	adds	r3, #4
 80086a8:	781b      	ldrb	r3, [r3, #0]
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d012      	beq.n	80086d4 <find_volume+0x160>
 80086ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086b0:	330b      	adds	r3, #11
 80086b2:	781b      	ldrb	r3, [r3, #0]
 80086b4:	061a      	lsls	r2, r3, #24
 80086b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086b8:	330a      	adds	r3, #10
 80086ba:	781b      	ldrb	r3, [r3, #0]
 80086bc:	041b      	lsls	r3, r3, #16
 80086be:	4313      	orrs	r3, r2
 80086c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80086c2:	3209      	adds	r2, #9
 80086c4:	7812      	ldrb	r2, [r2, #0]
 80086c6:	0212      	lsls	r2, r2, #8
 80086c8:	4313      	orrs	r3, r2
 80086ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80086cc:	3208      	adds	r2, #8
 80086ce:	7812      	ldrb	r2, [r2, #0]
 80086d0:	431a      	orrs	r2, r3
 80086d2:	e000      	b.n	80086d6 <find_volume+0x162>
 80086d4:	2200      	movs	r2, #0
 80086d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80086d8:	009b      	lsls	r3, r3, #2
 80086da:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80086de:	440b      	add	r3, r1
 80086e0:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 80086e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80086e6:	3301      	adds	r3, #1
 80086e8:	643b      	str	r3, [r7, #64]	; 0x40
 80086ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80086ec:	2b03      	cmp	r3, #3
 80086ee:	d9d2      	bls.n	8008696 <find_volume+0x122>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 80086f0:	2300      	movs	r3, #0
 80086f2:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80086f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d002      	beq.n	8008700 <find_volume+0x18c>
 80086fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80086fc:	3b01      	subs	r3, #1
 80086fe:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 8008700:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008702:	009b      	lsls	r3, r3, #2
 8008704:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8008708:	4413      	add	r3, r2
 800870a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800870e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 8008710:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008712:	2b00      	cmp	r3, #0
 8008714:	d005      	beq.n	8008722 <find_volume+0x1ae>
 8008716:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008718:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800871a:	f7ff fec1 	bl	80084a0 <check_fs>
 800871e:	4603      	mov	r3, r0
 8008720:	e000      	b.n	8008724 <find_volume+0x1b0>
 8008722:	2302      	movs	r3, #2
 8008724:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 8008728:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800872c:	2b00      	cmp	r3, #0
 800872e:	d005      	beq.n	800873c <find_volume+0x1c8>
 8008730:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008732:	3301      	adds	r3, #1
 8008734:	643b      	str	r3, [r7, #64]	; 0x40
 8008736:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008738:	2b03      	cmp	r3, #3
 800873a:	d9e1      	bls.n	8008700 <find_volume+0x18c>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800873c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008740:	2b03      	cmp	r3, #3
 8008742:	d101      	bne.n	8008748 <find_volume+0x1d4>
 8008744:	2301      	movs	r3, #1
 8008746:	e207      	b.n	8008b58 <find_volume+0x5e4>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 8008748:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800874c:	2b00      	cmp	r3, #0
 800874e:	d001      	beq.n	8008754 <find_volume+0x1e0>
 8008750:	230d      	movs	r3, #13
 8008752:	e201      	b.n	8008b58 <find_volume+0x5e4>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8008754:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008756:	7b1b      	ldrb	r3, [r3, #12]
 8008758:	021b      	lsls	r3, r3, #8
 800875a:	b21a      	sxth	r2, r3
 800875c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800875e:	7adb      	ldrb	r3, [r3, #11]
 8008760:	b21b      	sxth	r3, r3
 8008762:	4313      	orrs	r3, r2
 8008764:	b21a      	sxth	r2, r3
 8008766:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008768:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800876c:	b21b      	sxth	r3, r3
 800876e:	429a      	cmp	r2, r3
 8008770:	d001      	beq.n	8008776 <find_volume+0x202>
		return FR_NO_FILESYSTEM;
 8008772:	230d      	movs	r3, #13
 8008774:	e1f0      	b.n	8008b58 <find_volume+0x5e4>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 8008776:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008778:	7ddb      	ldrb	r3, [r3, #23]
 800877a:	021b      	lsls	r3, r3, #8
 800877c:	b21a      	sxth	r2, r3
 800877e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008780:	7d9b      	ldrb	r3, [r3, #22]
 8008782:	b21b      	sxth	r3, r3
 8008784:	4313      	orrs	r3, r2
 8008786:	b21b      	sxth	r3, r3
 8008788:	b29b      	uxth	r3, r3
 800878a:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 800878c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800878e:	2b00      	cmp	r3, #0
 8008790:	d112      	bne.n	80087b8 <find_volume+0x244>
 8008792:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008794:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8008798:	061a      	lsls	r2, r3, #24
 800879a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800879c:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80087a0:	041b      	lsls	r3, r3, #16
 80087a2:	4313      	orrs	r3, r2
 80087a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80087a6:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 80087aa:	0212      	lsls	r2, r2, #8
 80087ac:	4313      	orrs	r3, r2
 80087ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80087b0:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 80087b4:	4313      	orrs	r3, r2
 80087b6:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 80087b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087ba:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80087bc:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 80087c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087c2:	7c1a      	ldrb	r2, [r3, #16]
 80087c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087c6:	f883 2403 	strb.w	r2, [r3, #1027]	; 0x403
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 80087ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087cc:	f893 3403 	ldrb.w	r3, [r3, #1027]	; 0x403
 80087d0:	2b01      	cmp	r3, #1
 80087d2:	d006      	beq.n	80087e2 <find_volume+0x26e>
 80087d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087d6:	f893 3403 	ldrb.w	r3, [r3, #1027]	; 0x403
 80087da:	2b02      	cmp	r3, #2
 80087dc:	d001      	beq.n	80087e2 <find_volume+0x26e>
		return FR_NO_FILESYSTEM;
 80087de:	230d      	movs	r3, #13
 80087e0:	e1ba      	b.n	8008b58 <find_volume+0x5e4>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 80087e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087e4:	f893 3403 	ldrb.w	r3, [r3, #1027]	; 0x403
 80087e8:	461a      	mov	r2, r3
 80087ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80087ec:	fb02 f303 	mul.w	r3, r2, r3
 80087f0:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 80087f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087f4:	7b5a      	ldrb	r2, [r3, #13]
 80087f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087f8:	f883 2402 	strb.w	r2, [r3, #1026]	; 0x402
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 80087fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087fe:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 8008802:	2b00      	cmp	r3, #0
 8008804:	d00a      	beq.n	800881c <find_volume+0x2a8>
 8008806:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008808:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 800880c:	461a      	mov	r2, r3
 800880e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008810:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 8008814:	3b01      	subs	r3, #1
 8008816:	4013      	ands	r3, r2
 8008818:	2b00      	cmp	r3, #0
 800881a:	d001      	beq.n	8008820 <find_volume+0x2ac>
		return FR_NO_FILESYSTEM;
 800881c:	230d      	movs	r3, #13
 800881e:	e19b      	b.n	8008b58 <find_volume+0x5e4>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 8008820:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008822:	7c9b      	ldrb	r3, [r3, #18]
 8008824:	021b      	lsls	r3, r3, #8
 8008826:	b21a      	sxth	r2, r3
 8008828:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800882a:	7c5b      	ldrb	r3, [r3, #17]
 800882c:	b21b      	sxth	r3, r3
 800882e:	4313      	orrs	r3, r2
 8008830:	b21b      	sxth	r3, r3
 8008832:	b29a      	uxth	r2, r3
 8008834:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008836:	f8a3 2408 	strh.w	r2, [r3, #1032]	; 0x408
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 800883a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800883c:	f8b3 3408 	ldrh.w	r3, [r3, #1032]	; 0x408
 8008840:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008842:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 8008846:	0952      	lsrs	r2, r2, #5
 8008848:	b292      	uxth	r2, r2
 800884a:	fbb3 f1f2 	udiv	r1, r3, r2
 800884e:	fb02 f201 	mul.w	r2, r2, r1
 8008852:	1a9b      	subs	r3, r3, r2
 8008854:	b29b      	uxth	r3, r3
 8008856:	2b00      	cmp	r3, #0
 8008858:	d004      	beq.n	8008864 <find_volume+0x2f0>
		return FR_NO_FILESYSTEM;
 800885a:	230d      	movs	r3, #13
 800885c:	e17c      	b.n	8008b58 <find_volume+0x5e4>
 800885e:	bf00      	nop
 8008860:	200002c4 	.word	0x200002c4

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 8008864:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008866:	7d1b      	ldrb	r3, [r3, #20]
 8008868:	021b      	lsls	r3, r3, #8
 800886a:	b21a      	sxth	r2, r3
 800886c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800886e:	7cdb      	ldrb	r3, [r3, #19]
 8008870:	b21b      	sxth	r3, r3
 8008872:	4313      	orrs	r3, r2
 8008874:	b21b      	sxth	r3, r3
 8008876:	b29b      	uxth	r3, r3
 8008878:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 800887a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800887c:	2b00      	cmp	r3, #0
 800887e:	d112      	bne.n	80088a6 <find_volume+0x332>
 8008880:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008882:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8008886:	061a      	lsls	r2, r3, #24
 8008888:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800888a:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800888e:	041b      	lsls	r3, r3, #16
 8008890:	4313      	orrs	r3, r2
 8008892:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008894:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 8008898:	0212      	lsls	r2, r2, #8
 800889a:	4313      	orrs	r3, r2
 800889c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800889e:	f892 2020 	ldrb.w	r2, [r2, #32]
 80088a2:	4313      	orrs	r3, r2
 80088a4:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 80088a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088a8:	7bdb      	ldrb	r3, [r3, #15]
 80088aa:	021b      	lsls	r3, r3, #8
 80088ac:	b21a      	sxth	r2, r3
 80088ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088b0:	7b9b      	ldrb	r3, [r3, #14]
 80088b2:	b21b      	sxth	r3, r3
 80088b4:	4313      	orrs	r3, r2
 80088b6:	b21b      	sxth	r3, r3
 80088b8:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 80088ba:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d101      	bne.n	80088c4 <find_volume+0x350>
 80088c0:	230d      	movs	r3, #13
 80088c2:	e149      	b.n	8008b58 <find_volume+0x5e4>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 80088c4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80088c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80088c8:	4413      	add	r3, r2
 80088ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80088cc:	f8b2 1408 	ldrh.w	r1, [r2, #1032]	; 0x408
 80088d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80088d2:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 80088d6:	0952      	lsrs	r2, r2, #5
 80088d8:	b292      	uxth	r2, r2
 80088da:	fbb1 f2f2 	udiv	r2, r1, r2
 80088de:	b292      	uxth	r2, r2
 80088e0:	4413      	add	r3, r2
 80088e2:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80088e4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80088e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088e8:	429a      	cmp	r2, r3
 80088ea:	d201      	bcs.n	80088f0 <find_volume+0x37c>
 80088ec:	230d      	movs	r3, #13
 80088ee:	e133      	b.n	8008b58 <find_volume+0x5e4>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 80088f0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80088f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088f4:	1ad3      	subs	r3, r2, r3
 80088f6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80088f8:	f892 2402 	ldrb.w	r2, [r2, #1026]	; 0x402
 80088fc:	fbb3 f3f2 	udiv	r3, r3, r2
 8008900:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 8008902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008904:	2b00      	cmp	r3, #0
 8008906:	d101      	bne.n	800890c <find_volume+0x398>
 8008908:	230d      	movs	r3, #13
 800890a:	e125      	b.n	8008b58 <find_volume+0x5e4>
	fmt = FS_FAT12;
 800890c:	2301      	movs	r3, #1
 800890e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 8008912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008914:	f640 72f5 	movw	r2, #4085	; 0xff5
 8008918:	4293      	cmp	r3, r2
 800891a:	d902      	bls.n	8008922 <find_volume+0x3ae>
 800891c:	2302      	movs	r3, #2
 800891e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 8008922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008924:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8008928:	4293      	cmp	r3, r2
 800892a:	d902      	bls.n	8008932 <find_volume+0x3be>
 800892c:	2303      	movs	r3, #3
 800892e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 8008932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008934:	1c9a      	adds	r2, r3, #2
 8008936:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008938:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
	fs->volbase = bsect;								/* Volume start sector */
 800893c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800893e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008940:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8008944:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008946:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008948:	441a      	add	r2, r3
 800894a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800894c:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
	fs->database = bsect + sysect;						/* Data start sector */
 8008950:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008954:	441a      	add	r2, r3
 8008956:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008958:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
	if (fmt == FS_FAT32) {
 800895c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008960:	2b03      	cmp	r3, #3
 8008962:	d121      	bne.n	80089a8 <find_volume+0x434>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 8008964:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008966:	f8b3 3408 	ldrh.w	r3, [r3, #1032]	; 0x408
 800896a:	2b00      	cmp	r3, #0
 800896c:	d001      	beq.n	8008972 <find_volume+0x3fe>
 800896e:	230d      	movs	r3, #13
 8008970:	e0f2      	b.n	8008b58 <find_volume+0x5e4>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 8008972:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008974:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8008978:	061a      	lsls	r2, r3, #24
 800897a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800897c:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8008980:	041b      	lsls	r3, r3, #16
 8008982:	4313      	orrs	r3, r2
 8008984:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008986:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 800898a:	0212      	lsls	r2, r2, #8
 800898c:	4313      	orrs	r3, r2
 800898e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008990:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 8008994:	431a      	orrs	r2, r3
 8008996:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008998:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 800899c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800899e:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 80089a2:	009b      	lsls	r3, r3, #2
 80089a4:	647b      	str	r3, [r7, #68]	; 0x44
 80089a6:	e025      	b.n	80089f4 <find_volume+0x480>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 80089a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089aa:	f8b3 3408 	ldrh.w	r3, [r3, #1032]	; 0x408
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d101      	bne.n	80089b6 <find_volume+0x442>
 80089b2:	230d      	movs	r3, #13
 80089b4:	e0d0      	b.n	8008b58 <find_volume+0x5e4>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 80089b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089b8:	f8d3 2420 	ldr.w	r2, [r3, #1056]	; 0x420
 80089bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80089be:	441a      	add	r2, r3
 80089c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089c2:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80089c6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80089ca:	2b02      	cmp	r3, #2
 80089cc:	d104      	bne.n	80089d8 <find_volume+0x464>
 80089ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089d0:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 80089d4:	005b      	lsls	r3, r3, #1
 80089d6:	e00c      	b.n	80089f2 <find_volume+0x47e>
 80089d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089da:	f8d3 2414 	ldr.w	r2, [r3, #1044]	; 0x414
 80089de:	4613      	mov	r3, r2
 80089e0:	005b      	lsls	r3, r3, #1
 80089e2:	4413      	add	r3, r2
 80089e4:	085a      	lsrs	r2, r3, #1
 80089e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089e8:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 80089ec:	f003 0301 	and.w	r3, r3, #1
 80089f0:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 80089f2:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 80089f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089f6:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 80089fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089fc:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 8008a00:	4619      	mov	r1, r3
 8008a02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008a04:	440b      	add	r3, r1
 8008a06:	3b01      	subs	r3, #1
 8008a08:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008a0a:	f8b1 140a 	ldrh.w	r1, [r1, #1034]	; 0x40a
 8008a0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8008a12:	429a      	cmp	r2, r3
 8008a14:	d201      	bcs.n	8008a1a <find_volume+0x4a6>
		return FR_NO_FILESYSTEM;
 8008a16:	230d      	movs	r3, #13
 8008a18:	e09e      	b.n	8008b58 <find_volume+0x5e4>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 8008a1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a1c:	f04f 32ff 	mov.w	r2, #4294967295
 8008a20:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
 8008a24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a26:	f8d3 2410 	ldr.w	r2, [r3, #1040]	; 0x410
 8008a2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a2c:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 8008a30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a32:	2280      	movs	r2, #128	; 0x80
 8008a34:	f883 2405 	strb.w	r2, [r3, #1029]	; 0x405
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 8008a38:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008a3c:	2b03      	cmp	r3, #3
 8008a3e:	d177      	bne.n	8008b30 <find_volume+0x5bc>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 8008a40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a42:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008a46:	021b      	lsls	r3, r3, #8
 8008a48:	b21a      	sxth	r2, r3
 8008a4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a4c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008a50:	b21b      	sxth	r3, r3
 8008a52:	4313      	orrs	r3, r2
 8008a54:	b21b      	sxth	r3, r3
 8008a56:	2b01      	cmp	r3, #1
 8008a58:	d16a      	bne.n	8008b30 <find_volume+0x5bc>
		&& move_window(fs, bsect + 1) == FR_OK)
 8008a5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008a5c:	3301      	adds	r3, #1
 8008a5e:	4619      	mov	r1, r3
 8008a60:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008a62:	f7fd fe56 	bl	8006712 <move_window>
 8008a66:	4603      	mov	r3, r0
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d161      	bne.n	8008b30 <find_volume+0x5bc>
	{
		fs->fsi_flag = 0;
 8008a6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a6e:	2200      	movs	r2, #0
 8008a70:	f883 2405 	strb.w	r2, [r3, #1029]	; 0x405
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8008a74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a76:	f893 31ff 	ldrb.w	r3, [r3, #511]	; 0x1ff
 8008a7a:	021b      	lsls	r3, r3, #8
 8008a7c:	b21a      	sxth	r2, r3
 8008a7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a80:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 8008a84:	b21b      	sxth	r3, r3
 8008a86:	4313      	orrs	r3, r2
 8008a88:	b21b      	sxth	r3, r3
 8008a8a:	4a35      	ldr	r2, [pc, #212]	; (8008b60 <find_volume+0x5ec>)
 8008a8c:	4293      	cmp	r3, r2
 8008a8e:	d14f      	bne.n	8008b30 <find_volume+0x5bc>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 8008a90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a92:	78db      	ldrb	r3, [r3, #3]
 8008a94:	061a      	lsls	r2, r3, #24
 8008a96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a98:	789b      	ldrb	r3, [r3, #2]
 8008a9a:	041b      	lsls	r3, r3, #16
 8008a9c:	4313      	orrs	r3, r2
 8008a9e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008aa0:	7852      	ldrb	r2, [r2, #1]
 8008aa2:	0212      	lsls	r2, r2, #8
 8008aa4:	4313      	orrs	r3, r2
 8008aa6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008aa8:	7812      	ldrb	r2, [r2, #0]
 8008aaa:	4313      	orrs	r3, r2
 8008aac:	4a2d      	ldr	r2, [pc, #180]	; (8008b64 <find_volume+0x5f0>)
 8008aae:	4293      	cmp	r3, r2
 8008ab0:	d13e      	bne.n	8008b30 <find_volume+0x5bc>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 8008ab2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ab4:	f893 31e7 	ldrb.w	r3, [r3, #487]	; 0x1e7
 8008ab8:	061a      	lsls	r2, r3, #24
 8008aba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008abc:	f893 31e6 	ldrb.w	r3, [r3, #486]	; 0x1e6
 8008ac0:	041b      	lsls	r3, r3, #16
 8008ac2:	4313      	orrs	r3, r2
 8008ac4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008ac6:	f892 21e5 	ldrb.w	r2, [r2, #485]	; 0x1e5
 8008aca:	0212      	lsls	r2, r2, #8
 8008acc:	4313      	orrs	r3, r2
 8008ace:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008ad0:	f892 21e4 	ldrb.w	r2, [r2, #484]	; 0x1e4
 8008ad4:	4313      	orrs	r3, r2
 8008ad6:	4a24      	ldr	r2, [pc, #144]	; (8008b68 <find_volume+0x5f4>)
 8008ad8:	4293      	cmp	r3, r2
 8008ada:	d129      	bne.n	8008b30 <find_volume+0x5bc>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 8008adc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ade:	f893 31eb 	ldrb.w	r3, [r3, #491]	; 0x1eb
 8008ae2:	061a      	lsls	r2, r3, #24
 8008ae4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ae6:	f893 31ea 	ldrb.w	r3, [r3, #490]	; 0x1ea
 8008aea:	041b      	lsls	r3, r3, #16
 8008aec:	4313      	orrs	r3, r2
 8008aee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008af0:	f892 21e9 	ldrb.w	r2, [r2, #489]	; 0x1e9
 8008af4:	0212      	lsls	r2, r2, #8
 8008af6:	4313      	orrs	r3, r2
 8008af8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008afa:	f892 21e8 	ldrb.w	r2, [r2, #488]	; 0x1e8
 8008afe:	431a      	orrs	r2, r3
 8008b00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b02:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 8008b06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b08:	f893 31ef 	ldrb.w	r3, [r3, #495]	; 0x1ef
 8008b0c:	061a      	lsls	r2, r3, #24
 8008b0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b10:	f893 31ee 	ldrb.w	r3, [r3, #494]	; 0x1ee
 8008b14:	041b      	lsls	r3, r3, #16
 8008b16:	4313      	orrs	r3, r2
 8008b18:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008b1a:	f892 21ed 	ldrb.w	r2, [r2, #493]	; 0x1ed
 8008b1e:	0212      	lsls	r2, r2, #8
 8008b20:	4313      	orrs	r3, r2
 8008b22:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008b24:	f892 21ec 	ldrb.w	r2, [r2, #492]	; 0x1ec
 8008b28:	431a      	orrs	r2, r3
 8008b2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b2c:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 8008b30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b32:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8008b36:	f883 2400 	strb.w	r2, [r3, #1024]	; 0x400
	fs->id = ++Fsid;	/* File system mount ID */
 8008b3a:	4b0c      	ldr	r3, [pc, #48]	; (8008b6c <find_volume+0x5f8>)
 8008b3c:	881b      	ldrh	r3, [r3, #0]
 8008b3e:	3301      	adds	r3, #1
 8008b40:	b29a      	uxth	r2, r3
 8008b42:	4b0a      	ldr	r3, [pc, #40]	; (8008b6c <find_volume+0x5f8>)
 8008b44:	801a      	strh	r2, [r3, #0]
 8008b46:	4b09      	ldr	r3, [pc, #36]	; (8008b6c <find_volume+0x5f8>)
 8008b48:	881a      	ldrh	r2, [r3, #0]
 8008b4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b4c:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 8008b50:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008b52:	f7fd fd6b 	bl	800662c <clear_lock>
#endif

	return FR_OK;
 8008b56:	2300      	movs	r3, #0
}
 8008b58:	4618      	mov	r0, r3
 8008b5a:	3758      	adds	r7, #88	; 0x58
 8008b5c:	46bd      	mov	sp, r7
 8008b5e:	bd80      	pop	{r7, pc}
 8008b60:	ffffaa55 	.word	0xffffaa55
 8008b64:	41615252 	.word	0x41615252
 8008b68:	61417272 	.word	0x61417272
 8008b6c:	200002c8 	.word	0x200002c8

08008b70 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 8008b70:	b580      	push	{r7, lr}
 8008b72:	b084      	sub	sp, #16
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d022      	beq.n	8008bc8 <validate+0x58>
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d01d      	beq.n	8008bc8 <validate+0x58>
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8008b92:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d016      	beq.n	8008bc8 <validate+0x58>
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8008ba0:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
 8008baa:	429a      	cmp	r2, r3
 8008bac:	d10c      	bne.n	8008bc8 <validate+0x58>
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8008bb4:	f893 3401 	ldrb.w	r3, [r3, #1025]	; 0x401
 8008bb8:	4618      	mov	r0, r3
 8008bba:	f7fd fa97 	bl	80060ec <disk_status>
 8008bbe:	4603      	mov	r3, r0
 8008bc0:	f003 0301 	and.w	r3, r3, #1
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d001      	beq.n	8008bcc <validate+0x5c>
		return FR_INVALID_OBJECT;
 8008bc8:	2309      	movs	r3, #9
 8008bca:	e000      	b.n	8008bce <validate+0x5e>

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
 8008bcc:	2300      	movs	r3, #0
}
 8008bce:	4618      	mov	r0, r3
 8008bd0:	3710      	adds	r7, #16
 8008bd2:	46bd      	mov	sp, r7
 8008bd4:	bd80      	pop	{r7, pc}
	...

08008bd8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8008bd8:	b580      	push	{r7, lr}
 8008bda:	b088      	sub	sp, #32
 8008bdc:	af00      	add	r7, sp, #0
 8008bde:	60f8      	str	r0, [r7, #12]
 8008be0:	60b9      	str	r1, [r7, #8]
 8008be2:	4613      	mov	r3, r2
 8008be4:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8008be6:	68bb      	ldr	r3, [r7, #8]
 8008be8:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 8008bea:	f107 0310 	add.w	r3, r7, #16
 8008bee:	4618      	mov	r0, r3
 8008bf0:	f7ff fc12 	bl	8008418 <get_ldnumber>
 8008bf4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8008bf6:	69fb      	ldr	r3, [r7, #28]
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	da01      	bge.n	8008c00 <f_mount+0x28>
 8008bfc:	230b      	movs	r3, #11
 8008bfe:	e02d      	b.n	8008c5c <f_mount+0x84>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8008c00:	4a18      	ldr	r2, [pc, #96]	; (8008c64 <f_mount+0x8c>)
 8008c02:	69fb      	ldr	r3, [r7, #28]
 8008c04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008c08:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8008c0a:	69bb      	ldr	r3, [r7, #24]
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d006      	beq.n	8008c1e <f_mount+0x46>
#if _FS_LOCK
		clear_lock(cfs);
 8008c10:	69b8      	ldr	r0, [r7, #24]
 8008c12:	f7fd fd0b 	bl	800662c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8008c16:	69bb      	ldr	r3, [r7, #24]
 8008c18:	2200      	movs	r2, #0
 8008c1a:	f883 2400 	strb.w	r2, [r3, #1024]	; 0x400
	}

	if (fs) {
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d003      	beq.n	8008c2c <f_mount+0x54>
		fs->fs_type = 0;				/* Clear new fs object */
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	2200      	movs	r2, #0
 8008c28:	f883 2400 	strb.w	r2, [r3, #1024]	; 0x400
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8008c2c:	68fa      	ldr	r2, [r7, #12]
 8008c2e:	490d      	ldr	r1, [pc, #52]	; (8008c64 <f_mount+0x8c>)
 8008c30:	69fb      	ldr	r3, [r7, #28]
 8008c32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d002      	beq.n	8008c42 <f_mount+0x6a>
 8008c3c:	79fb      	ldrb	r3, [r7, #7]
 8008c3e:	2b01      	cmp	r3, #1
 8008c40:	d001      	beq.n	8008c46 <f_mount+0x6e>
 8008c42:	2300      	movs	r3, #0
 8008c44:	e00a      	b.n	8008c5c <f_mount+0x84>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 8008c46:	f107 0108 	add.w	r1, r7, #8
 8008c4a:	f107 030c 	add.w	r3, r7, #12
 8008c4e:	2200      	movs	r2, #0
 8008c50:	4618      	mov	r0, r3
 8008c52:	f7ff fc8f 	bl	8008574 <find_volume>
 8008c56:	4603      	mov	r3, r0
 8008c58:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8008c5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c5c:	4618      	mov	r0, r3
 8008c5e:	3720      	adds	r7, #32
 8008c60:	46bd      	mov	sp, r7
 8008c62:	bd80      	pop	{r7, pc}
 8008c64:	200002c4 	.word	0x200002c4

08008c68 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8008c68:	b580      	push	{r7, lr}
 8008c6a:	f5ad 6d8b 	sub.w	sp, sp, #1112	; 0x458
 8008c6e:	af00      	add	r7, sp, #0
 8008c70:	f107 030c 	add.w	r3, r7, #12
 8008c74:	6018      	str	r0, [r3, #0]
 8008c76:	f107 0308 	add.w	r3, r7, #8
 8008c7a:	6019      	str	r1, [r3, #0]
 8008c7c:	1dfb      	adds	r3, r7, #7
 8008c7e:	701a      	strb	r2, [r3, #0]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 8008c80:	f107 030c 	add.w	r3, r7, #12
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d101      	bne.n	8008c8e <f_open+0x26>
 8008c8a:	2309      	movs	r3, #9
 8008c8c:	e1f9      	b.n	8009082 <f_open+0x41a>
	fp->fs = 0;			/* Clear file object */
 8008c8e:	f107 030c 	add.w	r3, r7, #12
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	2200      	movs	r2, #0
 8008c96:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 8008c9a:	1dfb      	adds	r3, r7, #7
 8008c9c:	1dfa      	adds	r2, r7, #7
 8008c9e:	7812      	ldrb	r2, [r2, #0]
 8008ca0:	f002 021f 	and.w	r2, r2, #31
 8008ca4:	701a      	strb	r2, [r3, #0]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 8008ca6:	1dfb      	adds	r3, r7, #7
 8008ca8:	781b      	ldrb	r3, [r3, #0]
 8008caa:	f023 0301 	bic.w	r3, r3, #1
 8008cae:	b2da      	uxtb	r2, r3
 8008cb0:	f107 0108 	add.w	r1, r7, #8
 8008cb4:	f107 0320 	add.w	r3, r7, #32
 8008cb8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008cbc:	4618      	mov	r0, r3
 8008cbe:	f7ff fc59 	bl	8008574 <find_volume>
 8008cc2:	4603      	mov	r3, r0
 8008cc4:	f887 3457 	strb.w	r3, [r7, #1111]	; 0x457
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 8008cc8:	f897 3457 	ldrb.w	r3, [r7, #1111]	; 0x457
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	f040 81d6 	bne.w	800907e <f_open+0x416>
		INIT_BUF(dj);
 8008cd2:	f107 0320 	add.w	r3, r7, #32
 8008cd6:	f107 0214 	add.w	r2, r7, #20
 8008cda:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
 8008cde:	f107 0320 	add.w	r3, r7, #32
 8008ce2:	4a8b      	ldr	r2, [pc, #556]	; (8008f10 <f_open+0x2a8>)
 8008ce4:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
		res = follow_path(&dj, path);	/* Follow the file path */
 8008ce8:	f107 0308 	add.w	r3, r7, #8
 8008cec:	681a      	ldr	r2, [r3, #0]
 8008cee:	f107 0320 	add.w	r3, r7, #32
 8008cf2:	4611      	mov	r1, r2
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	f7ff fb21 	bl	800833c <follow_path>
 8008cfa:	4603      	mov	r3, r0
 8008cfc:	f887 3457 	strb.w	r3, [r7, #1111]	; 0x457
		dir = dj.dir;
 8008d00:	f107 0320 	add.w	r3, r7, #32
 8008d04:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8008d08:	f8c7 3450 	str.w	r3, [r7, #1104]	; 0x450
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8008d0c:	f897 3457 	ldrb.w	r3, [r7, #1111]	; 0x457
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d11a      	bne.n	8008d4a <f_open+0xe2>
			if (!dir)	/* Default directory itself */
 8008d14:	f8d7 3450 	ldr.w	r3, [r7, #1104]	; 0x450
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d103      	bne.n	8008d24 <f_open+0xbc>
				res = FR_INVALID_NAME;
 8008d1c:	2306      	movs	r3, #6
 8008d1e:	f887 3457 	strb.w	r3, [r7, #1111]	; 0x457
 8008d22:	e012      	b.n	8008d4a <f_open+0xe2>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008d24:	1dfb      	adds	r3, r7, #7
 8008d26:	781b      	ldrb	r3, [r3, #0]
 8008d28:	f023 0301 	bic.w	r3, r3, #1
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	bf14      	ite	ne
 8008d30:	2301      	movne	r3, #1
 8008d32:	2300      	moveq	r3, #0
 8008d34:	b2db      	uxtb	r3, r3
 8008d36:	461a      	mov	r2, r3
 8008d38:	f107 0320 	add.w	r3, r7, #32
 8008d3c:	4611      	mov	r1, r2
 8008d3e:	4618      	mov	r0, r3
 8008d40:	f7fd faea 	bl	8006318 <chk_lock>
 8008d44:	4603      	mov	r3, r0
 8008d46:	f887 3457 	strb.w	r3, [r7, #1111]	; 0x457
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8008d4a:	1dfb      	adds	r3, r7, #7
 8008d4c:	781b      	ldrb	r3, [r3, #0]
 8008d4e:	f003 031c 	and.w	r3, r3, #28
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	f000 80cc 	beq.w	8008ef0 <f_open+0x288>
			if (res != FR_OK) {					/* No file, create new */
 8008d58:	f897 3457 	ldrb.w	r3, [r7, #1111]	; 0x457
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d01f      	beq.n	8008da0 <f_open+0x138>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 8008d60:	f897 3457 	ldrb.w	r3, [r7, #1111]	; 0x457
 8008d64:	2b04      	cmp	r3, #4
 8008d66:	d10e      	bne.n	8008d86 <f_open+0x11e>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8008d68:	f7fd fb42 	bl	80063f0 <enq_lock>
 8008d6c:	4603      	mov	r3, r0
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d006      	beq.n	8008d80 <f_open+0x118>
 8008d72:	f107 0320 	add.w	r3, r7, #32
 8008d76:	4618      	mov	r0, r3
 8008d78:	f7fe feee 	bl	8007b58 <dir_register>
 8008d7c:	4603      	mov	r3, r0
 8008d7e:	e000      	b.n	8008d82 <f_open+0x11a>
 8008d80:	2312      	movs	r3, #18
 8008d82:	f887 3457 	strb.w	r3, [r7, #1111]	; 0x457
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8008d86:	1dfb      	adds	r3, r7, #7
 8008d88:	1dfa      	adds	r2, r7, #7
 8008d8a:	7812      	ldrb	r2, [r2, #0]
 8008d8c:	f042 0208 	orr.w	r2, r2, #8
 8008d90:	701a      	strb	r2, [r3, #0]
				dir = dj.dir;					/* New entry */
 8008d92:	f107 0320 	add.w	r3, r7, #32
 8008d96:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8008d9a:	f8c7 3450 	str.w	r3, [r7, #1104]	; 0x450
 8008d9e:	e014      	b.n	8008dca <f_open+0x162>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8008da0:	f8d7 3450 	ldr.w	r3, [r7, #1104]	; 0x450
 8008da4:	330b      	adds	r3, #11
 8008da6:	781b      	ldrb	r3, [r3, #0]
 8008da8:	f003 0311 	and.w	r3, r3, #17
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d003      	beq.n	8008db8 <f_open+0x150>
					res = FR_DENIED;
 8008db0:	2307      	movs	r3, #7
 8008db2:	f887 3457 	strb.w	r3, [r7, #1111]	; 0x457
 8008db6:	e008      	b.n	8008dca <f_open+0x162>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 8008db8:	1dfb      	adds	r3, r7, #7
 8008dba:	781b      	ldrb	r3, [r3, #0]
 8008dbc:	f003 0304 	and.w	r3, r3, #4
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d002      	beq.n	8008dca <f_open+0x162>
						res = FR_EXIST;
 8008dc4:	2308      	movs	r3, #8
 8008dc6:	f887 3457 	strb.w	r3, [r7, #1111]	; 0x457
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8008dca:	f897 3457 	ldrb.w	r3, [r7, #1111]	; 0x457
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	f040 80b1 	bne.w	8008f36 <f_open+0x2ce>
 8008dd4:	1dfb      	adds	r3, r7, #7
 8008dd6:	781b      	ldrb	r3, [r3, #0]
 8008dd8:	f003 0308 	and.w	r3, r3, #8
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	f000 80aa 	beq.w	8008f36 <f_open+0x2ce>
				dw = GET_FATTIME();				/* Created time */
 8008de2:	f7fd f927 	bl	8006034 <get_fattime>
 8008de6:	f8c7 044c 	str.w	r0, [r7, #1100]	; 0x44c
				ST_DWORD(dir + DIR_CrtTime, dw);
 8008dea:	f8d7 3450 	ldr.w	r3, [r7, #1104]	; 0x450
 8008dee:	330e      	adds	r3, #14
 8008df0:	f8d7 244c 	ldr.w	r2, [r7, #1100]	; 0x44c
 8008df4:	b2d2      	uxtb	r2, r2
 8008df6:	701a      	strb	r2, [r3, #0]
 8008df8:	f8d7 344c 	ldr.w	r3, [r7, #1100]	; 0x44c
 8008dfc:	b29b      	uxth	r3, r3
 8008dfe:	0a1b      	lsrs	r3, r3, #8
 8008e00:	b29a      	uxth	r2, r3
 8008e02:	f8d7 3450 	ldr.w	r3, [r7, #1104]	; 0x450
 8008e06:	330f      	adds	r3, #15
 8008e08:	b2d2      	uxtb	r2, r2
 8008e0a:	701a      	strb	r2, [r3, #0]
 8008e0c:	f8d7 344c 	ldr.w	r3, [r7, #1100]	; 0x44c
 8008e10:	0c1a      	lsrs	r2, r3, #16
 8008e12:	f8d7 3450 	ldr.w	r3, [r7, #1104]	; 0x450
 8008e16:	3310      	adds	r3, #16
 8008e18:	b2d2      	uxtb	r2, r2
 8008e1a:	701a      	strb	r2, [r3, #0]
 8008e1c:	f8d7 344c 	ldr.w	r3, [r7, #1100]	; 0x44c
 8008e20:	0e1a      	lsrs	r2, r3, #24
 8008e22:	f8d7 3450 	ldr.w	r3, [r7, #1104]	; 0x450
 8008e26:	3311      	adds	r3, #17
 8008e28:	b2d2      	uxtb	r2, r2
 8008e2a:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 8008e2c:	f8d7 3450 	ldr.w	r3, [r7, #1104]	; 0x450
 8008e30:	330b      	adds	r3, #11
 8008e32:	2200      	movs	r2, #0
 8008e34:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 8008e36:	f8d7 3450 	ldr.w	r3, [r7, #1104]	; 0x450
 8008e3a:	331c      	adds	r3, #28
 8008e3c:	2200      	movs	r2, #0
 8008e3e:	701a      	strb	r2, [r3, #0]
 8008e40:	f8d7 3450 	ldr.w	r3, [r7, #1104]	; 0x450
 8008e44:	331d      	adds	r3, #29
 8008e46:	2200      	movs	r2, #0
 8008e48:	701a      	strb	r2, [r3, #0]
 8008e4a:	f8d7 3450 	ldr.w	r3, [r7, #1104]	; 0x450
 8008e4e:	331e      	adds	r3, #30
 8008e50:	2200      	movs	r2, #0
 8008e52:	701a      	strb	r2, [r3, #0]
 8008e54:	f8d7 3450 	ldr.w	r3, [r7, #1104]	; 0x450
 8008e58:	331f      	adds	r3, #31
 8008e5a:	2200      	movs	r2, #0
 8008e5c:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 8008e5e:	f107 0320 	add.w	r3, r7, #32
 8008e62:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8008e66:	f8d7 1450 	ldr.w	r1, [r7, #1104]	; 0x450
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	f7fe fac3 	bl	80073f6 <ld_clust>
 8008e70:	f8c7 0448 	str.w	r0, [r7, #1096]	; 0x448
				st_clust(dir, 0);				/* cluster = 0 */
 8008e74:	2100      	movs	r1, #0
 8008e76:	f8d7 0450 	ldr.w	r0, [r7, #1104]	; 0x450
 8008e7a:	f7fe fae9 	bl	8007450 <st_clust>
				dj.fs->wflag = 1;
 8008e7e:	f107 0320 	add.w	r3, r7, #32
 8008e82:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8008e86:	2201      	movs	r2, #1
 8008e88:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
				if (cl) {						/* Remove the cluster chain if exist */
 8008e8c:	f8d7 3448 	ldr.w	r3, [r7, #1096]	; 0x448
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d050      	beq.n	8008f36 <f_open+0x2ce>
					dw = dj.fs->winsect;
 8008e94:	f107 0320 	add.w	r3, r7, #32
 8008e98:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8008e9c:	f8d3 342c 	ldr.w	r3, [r3, #1068]	; 0x42c
 8008ea0:	f8c7 344c 	str.w	r3, [r7, #1100]	; 0x44c
					res = remove_chain(dj.fs, cl);
 8008ea4:	f107 0320 	add.w	r3, r7, #32
 8008ea8:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8008eac:	f8d7 1448 	ldr.w	r1, [r7, #1096]	; 0x448
 8008eb0:	4618      	mov	r0, r3
 8008eb2:	f7fd ff59 	bl	8006d68 <remove_chain>
 8008eb6:	4603      	mov	r3, r0
 8008eb8:	f887 3457 	strb.w	r3, [r7, #1111]	; 0x457
					if (res == FR_OK) {
 8008ebc:	f897 3457 	ldrb.w	r3, [r7, #1111]	; 0x457
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d138      	bne.n	8008f36 <f_open+0x2ce>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 8008ec4:	f107 0320 	add.w	r3, r7, #32
 8008ec8:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8008ecc:	f8d7 2448 	ldr.w	r2, [r7, #1096]	; 0x448
 8008ed0:	3a01      	subs	r2, #1
 8008ed2:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
						res = move_window(dj.fs, dw);
 8008ed6:	f107 0320 	add.w	r3, r7, #32
 8008eda:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8008ede:	f8d7 144c 	ldr.w	r1, [r7, #1100]	; 0x44c
 8008ee2:	4618      	mov	r0, r3
 8008ee4:	f7fd fc15 	bl	8006712 <move_window>
 8008ee8:	4603      	mov	r3, r0
 8008eea:	f887 3457 	strb.w	r3, [r7, #1111]	; 0x457
 8008eee:	e022      	b.n	8008f36 <f_open+0x2ce>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 8008ef0:	f897 3457 	ldrb.w	r3, [r7, #1111]	; 0x457
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d11e      	bne.n	8008f36 <f_open+0x2ce>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 8008ef8:	f8d7 3450 	ldr.w	r3, [r7, #1104]	; 0x450
 8008efc:	330b      	adds	r3, #11
 8008efe:	781b      	ldrb	r3, [r3, #0]
 8008f00:	f003 0310 	and.w	r3, r3, #16
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d005      	beq.n	8008f14 <f_open+0x2ac>
					res = FR_NO_FILE;
 8008f08:	2304      	movs	r3, #4
 8008f0a:	f887 3457 	strb.w	r3, [r7, #1111]	; 0x457
 8008f0e:	e012      	b.n	8008f36 <f_open+0x2ce>
 8008f10:	200002e4 	.word	0x200002e4
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 8008f14:	1dfb      	adds	r3, r7, #7
 8008f16:	781b      	ldrb	r3, [r3, #0]
 8008f18:	f003 0302 	and.w	r3, r3, #2
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d00a      	beq.n	8008f36 <f_open+0x2ce>
 8008f20:	f8d7 3450 	ldr.w	r3, [r7, #1104]	; 0x450
 8008f24:	330b      	adds	r3, #11
 8008f26:	781b      	ldrb	r3, [r3, #0]
 8008f28:	f003 0301 	and.w	r3, r3, #1
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d002      	beq.n	8008f36 <f_open+0x2ce>
						res = FR_DENIED;
 8008f30:	2307      	movs	r3, #7
 8008f32:	f887 3457 	strb.w	r3, [r7, #1111]	; 0x457
				}
			}
		}
		if (res == FR_OK) {
 8008f36:	f897 3457 	ldrb.w	r3, [r7, #1111]	; 0x457
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d13d      	bne.n	8008fba <f_open+0x352>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8008f3e:	1dfb      	adds	r3, r7, #7
 8008f40:	781b      	ldrb	r3, [r3, #0]
 8008f42:	f003 0308 	and.w	r3, r3, #8
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d005      	beq.n	8008f56 <f_open+0x2ee>
				mode |= FA__WRITTEN;
 8008f4a:	1dfb      	adds	r3, r7, #7
 8008f4c:	1dfa      	adds	r2, r7, #7
 8008f4e:	7812      	ldrb	r2, [r2, #0]
 8008f50:	f042 0220 	orr.w	r2, r2, #32
 8008f54:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 8008f56:	f107 0320 	add.w	r3, r7, #32
 8008f5a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8008f5e:	f8d3 242c 	ldr.w	r2, [r3, #1068]	; 0x42c
 8008f62:	f107 030c 	add.w	r3, r7, #12
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
			fp->dir_ptr = dir;
 8008f6c:	f107 030c 	add.w	r3, r7, #12
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	f8d7 2450 	ldr.w	r2, [r7, #1104]	; 0x450
 8008f76:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008f7a:	1dfb      	adds	r3, r7, #7
 8008f7c:	781b      	ldrb	r3, [r3, #0]
 8008f7e:	f023 0301 	bic.w	r3, r3, #1
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	bf14      	ite	ne
 8008f86:	2301      	movne	r3, #1
 8008f88:	2300      	moveq	r3, #0
 8008f8a:	b2db      	uxtb	r3, r3
 8008f8c:	461a      	mov	r2, r3
 8008f8e:	f107 0320 	add.w	r3, r7, #32
 8008f92:	4611      	mov	r1, r2
 8008f94:	4618      	mov	r0, r3
 8008f96:	f7fd fa4f 	bl	8006438 <inc_lock>
 8008f9a:	4602      	mov	r2, r0
 8008f9c:	f107 030c 	add.w	r3, r7, #12
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
			if (!fp->lockid) res = FR_INT_ERR;
 8008fa6:	f107 030c 	add.w	r3, r7, #12
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	f8d3 3428 	ldr.w	r3, [r3, #1064]	; 0x428
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d102      	bne.n	8008fba <f_open+0x352>
 8008fb4:	2302      	movs	r3, #2
 8008fb6:	f887 3457 	strb.w	r3, [r7, #1111]	; 0x457
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 8008fba:	f897 3457 	ldrb.w	r3, [r7, #1111]	; 0x457
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d15d      	bne.n	800907e <f_open+0x416>
			fp->flag = mode;					/* File access mode */
 8008fc2:	f107 030c 	add.w	r3, r7, #12
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	1dfa      	adds	r2, r7, #7
 8008fca:	7812      	ldrb	r2, [r2, #0]
 8008fcc:	f883 2406 	strb.w	r2, [r3, #1030]	; 0x406
			fp->err = 0;						/* Clear error flag */
 8008fd0:	f107 030c 	add.w	r3, r7, #12
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	2200      	movs	r2, #0
 8008fd8:	f883 2407 	strb.w	r2, [r3, #1031]	; 0x407
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 8008fdc:	f107 0320 	add.w	r3, r7, #32
 8008fe0:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8008fe4:	f8d7 1450 	ldr.w	r1, [r7, #1104]	; 0x450
 8008fe8:	4618      	mov	r0, r3
 8008fea:	f7fe fa04 	bl	80073f6 <ld_clust>
 8008fee:	4602      	mov	r2, r0
 8008ff0:	f107 030c 	add.w	r3, r7, #12
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 8008ffa:	f8d7 3450 	ldr.w	r3, [r7, #1104]	; 0x450
 8008ffe:	331f      	adds	r3, #31
 8009000:	781b      	ldrb	r3, [r3, #0]
 8009002:	061a      	lsls	r2, r3, #24
 8009004:	f8d7 3450 	ldr.w	r3, [r7, #1104]	; 0x450
 8009008:	331e      	adds	r3, #30
 800900a:	781b      	ldrb	r3, [r3, #0]
 800900c:	041b      	lsls	r3, r3, #16
 800900e:	4313      	orrs	r3, r2
 8009010:	f8d7 2450 	ldr.w	r2, [r7, #1104]	; 0x450
 8009014:	321d      	adds	r2, #29
 8009016:	7812      	ldrb	r2, [r2, #0]
 8009018:	0212      	lsls	r2, r2, #8
 800901a:	4313      	orrs	r3, r2
 800901c:	f8d7 2450 	ldr.w	r2, [r7, #1104]	; 0x450
 8009020:	321c      	adds	r2, #28
 8009022:	7812      	ldrb	r2, [r2, #0]
 8009024:	431a      	orrs	r2, r3
 8009026:	f107 030c 	add.w	r3, r7, #12
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
			fp->fptr = 0;						/* File pointer */
 8009030:	f107 030c 	add.w	r3, r7, #12
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	2200      	movs	r2, #0
 8009038:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
			fp->dsect = 0;
 800903c:	f107 030c 	add.w	r3, r7, #12
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	2200      	movs	r2, #0
 8009044:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 8009048:	f107 030c 	add.w	r3, r7, #12
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	2200      	movs	r2, #0
 8009050:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 8009054:	f107 0320 	add.w	r3, r7, #32
 8009058:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 800905c:	f107 030c 	add.w	r3, r7, #12
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
			fp->id = fp->fs->id;
 8009066:	f107 030c 	add.w	r3, r7, #12
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8009070:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8009074:	f107 030c 	add.w	r3, r7, #12
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
		}
	}

	LEAVE_FF(dj.fs, res);
 800907e:	f897 3457 	ldrb.w	r3, [r7, #1111]	; 0x457
}
 8009082:	4618      	mov	r0, r3
 8009084:	f507 678b 	add.w	r7, r7, #1112	; 0x458
 8009088:	46bd      	mov	sp, r7
 800908a:	bd80      	pop	{r7, pc}

0800908c <f_read>:
	FIL* fp, 		/* Pointer to the file object */
	void* buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT* br		/* Pointer to number of bytes read */
)
{
 800908c:	b580      	push	{r7, lr}
 800908e:	b08c      	sub	sp, #48	; 0x30
 8009090:	af00      	add	r7, sp, #0
 8009092:	60f8      	str	r0, [r7, #12]
 8009094:	60b9      	str	r1, [r7, #8]
 8009096:	607a      	str	r2, [r7, #4]
 8009098:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = (BYTE*)buff;
 800909a:	68bb      	ldr	r3, [r7, #8]
 800909c:	623b      	str	r3, [r7, #32]


	*br = 0;	/* Clear read byte counter */
 800909e:	683b      	ldr	r3, [r7, #0]
 80090a0:	2200      	movs	r2, #0
 80090a2:	601a      	str	r2, [r3, #0]

	res = validate(fp);							/* Check validity */
 80090a4:	68f8      	ldr	r0, [r7, #12]
 80090a6:	f7ff fd63 	bl	8008b70 <validate>
 80090aa:	4603      	mov	r3, r0
 80090ac:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 80090ae:	7ffb      	ldrb	r3, [r7, #31]
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d001      	beq.n	80090b8 <f_read+0x2c>
 80090b4:	7ffb      	ldrb	r3, [r7, #31]
 80090b6:	e18a      	b.n	80093ce <f_read+0x342>
	if (fp->err)								/* Check error */
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	f893 3407 	ldrb.w	r3, [r3, #1031]	; 0x407
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d003      	beq.n	80090ca <f_read+0x3e>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	f893 3407 	ldrb.w	r3, [r3, #1031]	; 0x407
 80090c8:	e181      	b.n	80093ce <f_read+0x342>
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	f893 3406 	ldrb.w	r3, [r3, #1030]	; 0x406
 80090d0:	f003 0301 	and.w	r3, r3, #1
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d101      	bne.n	80090dc <f_read+0x50>
		LEAVE_FF(fp->fs, FR_DENIED);
 80090d8:	2307      	movs	r3, #7
 80090da:	e178      	b.n	80093ce <f_read+0x342>
	remain = fp->fsize - fp->fptr;
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80090e8:	1ad3      	subs	r3, r2, r3
 80090ea:	61bb      	str	r3, [r7, #24]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 80090ec:	687a      	ldr	r2, [r7, #4]
 80090ee:	69bb      	ldr	r3, [r7, #24]
 80090f0:	429a      	cmp	r2, r3
 80090f2:	f240 8167 	bls.w	80093c4 <f_read+0x338>
 80090f6:	69bb      	ldr	r3, [r7, #24]
 80090f8:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 80090fa:	e163      	b.n	80093c4 <f_read+0x338>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8009102:	68fa      	ldr	r2, [r7, #12]
 8009104:	f8d2 2400 	ldr.w	r2, [r2, #1024]	; 0x400
 8009108:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 800910c:	fbb3 f1f2 	udiv	r1, r3, r2
 8009110:	fb02 f201 	mul.w	r2, r2, r1
 8009114:	1a9b      	subs	r3, r3, r2
 8009116:	2b00      	cmp	r3, #0
 8009118:	f040 810f 	bne.w	800933a <f_read+0x2ae>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8009122:	68fa      	ldr	r2, [r7, #12]
 8009124:	f8d2 2400 	ldr.w	r2, [r2, #1024]	; 0x400
 8009128:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 800912c:	fbb3 f3f2 	udiv	r3, r3, r2
 8009130:	b2da      	uxtb	r2, r3
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8009138:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 800913c:	3b01      	subs	r3, #1
 800913e:	b2db      	uxtb	r3, r3
 8009140:	4013      	ands	r3, r2
 8009142:	75fb      	strb	r3, [r7, #23]
			if (!csect) {						/* On the cluster boundary? */
 8009144:	7dfb      	ldrb	r3, [r7, #23]
 8009146:	2b00      	cmp	r3, #0
 8009148:	d139      	bne.n	80091be <f_read+0x132>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8009150:	2b00      	cmp	r3, #0
 8009152:	d104      	bne.n	800915e <f_read+0xd2>
					clst = fp->sclust;			/* Follow from the origin */
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 800915a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800915c:	e018      	b.n	8009190 <f_read+0x104>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	f8d3 3424 	ldr.w	r3, [r3, #1060]	; 0x424
 8009164:	2b00      	cmp	r3, #0
 8009166:	d008      	beq.n	800917a <f_read+0xee>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800916e:	4619      	mov	r1, r3
 8009170:	68f8      	ldr	r0, [r7, #12]
 8009172:	f7fd fef0 	bl	8006f56 <clmt_clust>
 8009176:	62f8      	str	r0, [r7, #44]	; 0x2c
 8009178:	e00a      	b.n	8009190 <f_read+0x104>
					else
#endif
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8009186:	4619      	mov	r1, r3
 8009188:	4610      	mov	r0, r2
 800918a:	f7fd fbbf 	bl	800690c <get_fat>
 800918e:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
 8009190:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009192:	2b01      	cmp	r3, #1
 8009194:	d805      	bhi.n	80091a2 <f_read+0x116>
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	2202      	movs	r2, #2
 800919a:	f883 2407 	strb.w	r2, [r3, #1031]	; 0x407
 800919e:	2302      	movs	r3, #2
 80091a0:	e115      	b.n	80093ce <f_read+0x342>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 80091a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091a8:	d105      	bne.n	80091b6 <f_read+0x12a>
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	2201      	movs	r2, #1
 80091ae:	f883 2407 	strb.w	r2, [r3, #1031]	; 0x407
 80091b2:	2301      	movs	r3, #1
 80091b4:	e10b      	b.n	80093ce <f_read+0x342>
				fp->clust = clst;				/* Update current cluster */
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80091ba:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
			}
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 80091ca:	4619      	mov	r1, r3
 80091cc:	4610      	mov	r0, r2
 80091ce:	f7fd fb7c 	bl	80068ca <clust2sect>
 80091d2:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 80091d4:	693b      	ldr	r3, [r7, #16]
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d105      	bne.n	80091e6 <f_read+0x15a>
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	2202      	movs	r2, #2
 80091de:	f883 2407 	strb.w	r2, [r3, #1031]	; 0x407
 80091e2:	2302      	movs	r3, #2
 80091e4:	e0f3      	b.n	80093ce <f_read+0x342>
			sect += csect;
 80091e6:	7dfb      	ldrb	r3, [r7, #23]
 80091e8:	693a      	ldr	r2, [r7, #16]
 80091ea:	4413      	add	r3, r2
 80091ec:	613b      	str	r3, [r7, #16]
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80091f4:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 80091f8:	461a      	mov	r2, r3
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	fbb3 f3f2 	udiv	r3, r3, r2
 8009200:	627b      	str	r3, [r7, #36]	; 0x24
			if (cc) {							/* Read maximum contiguous sectors directly */
 8009202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009204:	2b00      	cmp	r3, #0
 8009206:	d056      	beq.n	80092b6 <f_read+0x22a>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 8009208:	7dfa      	ldrb	r2, [r7, #23]
 800920a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800920c:	4413      	add	r3, r2
 800920e:	68fa      	ldr	r2, [r7, #12]
 8009210:	f8d2 2400 	ldr.w	r2, [r2, #1024]	; 0x400
 8009214:	f892 2402 	ldrb.w	r2, [r2, #1026]	; 0x402
 8009218:	4293      	cmp	r3, r2
 800921a:	d908      	bls.n	800922e <f_read+0x1a2>
					cc = fp->fs->csize - csect;
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8009222:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 8009226:	461a      	mov	r2, r3
 8009228:	7dfb      	ldrb	r3, [r7, #23]
 800922a:	1ad3      	subs	r3, r2, r3
 800922c:	627b      	str	r3, [r7, #36]	; 0x24
				if (disk_read(fp->fs->drv, rbuff, sect, cc) != RES_OK)
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8009234:	f893 0401 	ldrb.w	r0, [r3, #1025]	; 0x401
 8009238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800923a:	693a      	ldr	r2, [r7, #16]
 800923c:	6a39      	ldr	r1, [r7, #32]
 800923e:	f7fc ff95 	bl	800616c <disk_read>
 8009242:	4603      	mov	r3, r0
 8009244:	2b00      	cmp	r3, #0
 8009246:	d005      	beq.n	8009254 <f_read+0x1c8>
					ABORT(fp->fs, FR_DISK_ERR);
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	2201      	movs	r2, #1
 800924c:	f883 2407 	strb.w	r2, [r3, #1031]	; 0x407
 8009250:	2301      	movs	r3, #1
 8009252:	e0bc      	b.n	80093ce <f_read+0x342>
#if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it contains a dirty sector */
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win.d8, SS(fp->fs));
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	f893 3406 	ldrb.w	r3, [r3, #1030]	; 0x406
 800925a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800925e:	2b00      	cmp	r3, #0
 8009260:	d01e      	beq.n	80092a0 <f_read+0x214>
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 8009268:	693b      	ldr	r3, [r7, #16]
 800926a:	1ad3      	subs	r3, r2, r3
 800926c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800926e:	429a      	cmp	r2, r3
 8009270:	d916      	bls.n	80092a0 <f_read+0x214>
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf.d8, SS(fp->fs));
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 8009278:	693b      	ldr	r3, [r7, #16]
 800927a:	1ad3      	subs	r3, r2, r3
 800927c:	68fa      	ldr	r2, [r7, #12]
 800927e:	f8d2 2400 	ldr.w	r2, [r2, #1024]	; 0x400
 8009282:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 8009286:	fb02 f303 	mul.w	r3, r2, r3
 800928a:	6a3a      	ldr	r2, [r7, #32]
 800928c:	18d0      	adds	r0, r2, r3
 800928e:	68f9      	ldr	r1, [r7, #12]
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8009296:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800929a:	461a      	mov	r2, r3
 800929c:	f7fc ffc4 	bl	8006228 <mem_cpy>
#endif
#endif
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80092a6:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 80092aa:	461a      	mov	r2, r3
 80092ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092ae:	fb02 f303 	mul.w	r3, r2, r3
 80092b2:	62bb      	str	r3, [r7, #40]	; 0x28
				continue;
 80092b4:	e070      	b.n	8009398 <f_read+0x30c>
			}
#if !_FS_TINY
			if (fp->dsect != sect) {			/* Load data sector if not in cache */
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 80092bc:	693a      	ldr	r2, [r7, #16]
 80092be:	429a      	cmp	r2, r3
 80092c0:	d037      	beq.n	8009332 <f_read+0x2a6>
#if !_FS_READONLY
				if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	f893 3406 	ldrb.w	r3, [r3, #1030]	; 0x406
 80092c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d01d      	beq.n	800930c <f_read+0x280>
					if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80092d6:	f893 0401 	ldrb.w	r0, [r3, #1025]	; 0x401
 80092da:	68f9      	ldr	r1, [r7, #12]
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 80092e2:	2301      	movs	r3, #1
 80092e4:	f7fc ff62 	bl	80061ac <disk_write>
 80092e8:	4603      	mov	r3, r0
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d005      	beq.n	80092fa <f_read+0x26e>
						ABORT(fp->fs, FR_DISK_ERR);
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	2201      	movs	r2, #1
 80092f2:	f883 2407 	strb.w	r2, [r3, #1031]	; 0x407
 80092f6:	2301      	movs	r3, #1
 80092f8:	e069      	b.n	80093ce <f_read+0x342>
					fp->flag &= ~FA__DIRTY;
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	f893 3406 	ldrb.w	r3, [r3, #1030]	; 0x406
 8009300:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009304:	b2da      	uxtb	r2, r3
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	f883 2406 	strb.w	r2, [r3, #1030]	; 0x406
				}
#endif
				if (disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)	/* Fill sector cache */
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8009312:	f893 0401 	ldrb.w	r0, [r3, #1025]	; 0x401
 8009316:	68f9      	ldr	r1, [r7, #12]
 8009318:	2301      	movs	r3, #1
 800931a:	693a      	ldr	r2, [r7, #16]
 800931c:	f7fc ff26 	bl	800616c <disk_read>
 8009320:	4603      	mov	r3, r0
 8009322:	2b00      	cmp	r3, #0
 8009324:	d005      	beq.n	8009332 <f_read+0x2a6>
					ABORT(fp->fs, FR_DISK_ERR);
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	2201      	movs	r2, #1
 800932a:	f883 2407 	strb.w	r2, [r3, #1031]	; 0x407
 800932e:	2301      	movs	r3, #1
 8009330:	e04d      	b.n	80093ce <f_read+0x342>
			}
#endif
			fp->dsect = sect;
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	693a      	ldr	r2, [r7, #16]
 8009336:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
		}
		rcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8009340:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 8009344:	4618      	mov	r0, r3
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800934c:	68fa      	ldr	r2, [r7, #12]
 800934e:	f8d2 2400 	ldr.w	r2, [r2, #1024]	; 0x400
 8009352:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 8009356:	fbb3 f1f2 	udiv	r1, r3, r2
 800935a:	fb02 f201 	mul.w	r2, r2, r1
 800935e:	1a9b      	subs	r3, r3, r2
 8009360:	1ac3      	subs	r3, r0, r3
 8009362:	62bb      	str	r3, [r7, #40]	; 0x28
		if (rcnt > btr) rcnt = btr;
 8009364:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	429a      	cmp	r2, r3
 800936a:	d901      	bls.n	8009370 <f_read+0x2e4>
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	62bb      	str	r3, [r7, #40]	; 0x28
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect) != FR_OK)		/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(rbuff, &fp->fs->win.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#else
		mem_cpy(rbuff, &fp->buf.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8009376:	68fa      	ldr	r2, [r7, #12]
 8009378:	f8d2 2400 	ldr.w	r2, [r2, #1024]	; 0x400
 800937c:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 8009380:	fbb3 f1f2 	udiv	r1, r3, r2
 8009384:	fb02 f201 	mul.w	r2, r2, r1
 8009388:	1a9b      	subs	r3, r3, r2
 800938a:	68fa      	ldr	r2, [r7, #12]
 800938c:	4413      	add	r3, r2
 800938e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009390:	4619      	mov	r1, r3
 8009392:	6a38      	ldr	r0, [r7, #32]
 8009394:	f7fc ff48 	bl	8006228 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8009398:	6a3a      	ldr	r2, [r7, #32]
 800939a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800939c:	4413      	add	r3, r2
 800939e:	623b      	str	r3, [r7, #32]
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 80093a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093a8:	441a      	add	r2, r3
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 80093b0:	683b      	ldr	r3, [r7, #0]
 80093b2:	681a      	ldr	r2, [r3, #0]
 80093b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093b6:	441a      	add	r2, r3
 80093b8:	683b      	ldr	r3, [r7, #0]
 80093ba:	601a      	str	r2, [r3, #0]
 80093bc:	687a      	ldr	r2, [r7, #4]
 80093be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093c0:	1ad3      	subs	r3, r2, r3
 80093c2:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	f47f ae98 	bne.w	80090fc <f_read+0x70>
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
 80093cc:	2300      	movs	r3, #0
}
 80093ce:	4618      	mov	r0, r3
 80093d0:	3730      	adds	r7, #48	; 0x30
 80093d2:	46bd      	mov	sp, r7
 80093d4:	bd80      	pop	{r7, pc}

080093d6 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80093d6:	b580      	push	{r7, lr}
 80093d8:	b08a      	sub	sp, #40	; 0x28
 80093da:	af00      	add	r7, sp, #0
 80093dc:	60f8      	str	r0, [r7, #12]
 80093de:	60b9      	str	r1, [r7, #8]
 80093e0:	607a      	str	r2, [r7, #4]
 80093e2:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
 80093e4:	68bb      	ldr	r3, [r7, #8]
 80093e6:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 80093e8:	683b      	ldr	r3, [r7, #0]
 80093ea:	2200      	movs	r2, #0
 80093ec:	601a      	str	r2, [r3, #0]

	res = validate(fp);						/* Check validity */
 80093ee:	68f8      	ldr	r0, [r7, #12]
 80093f0:	f7ff fbbe 	bl	8008b70 <validate>
 80093f4:	4603      	mov	r3, r0
 80093f6:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 80093f8:	7dfb      	ldrb	r3, [r7, #23]
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d001      	beq.n	8009402 <f_write+0x2c>
 80093fe:	7dfb      	ldrb	r3, [r7, #23]
 8009400:	e1cc      	b.n	800979c <f_write+0x3c6>
	if (fp->err)							/* Check error */
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	f893 3407 	ldrb.w	r3, [r3, #1031]	; 0x407
 8009408:	2b00      	cmp	r3, #0
 800940a:	d003      	beq.n	8009414 <f_write+0x3e>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	f893 3407 	ldrb.w	r3, [r3, #1031]	; 0x407
 8009412:	e1c3      	b.n	800979c <f_write+0x3c6>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	f893 3406 	ldrb.w	r3, [r3, #1030]	; 0x406
 800941a:	f003 0302 	and.w	r3, r3, #2
 800941e:	2b00      	cmp	r3, #0
 8009420:	d101      	bne.n	8009426 <f_write+0x50>
		LEAVE_FF(fp->fs, FR_DENIED);
 8009422:	2307      	movs	r3, #7
 8009424:	e1ba      	b.n	800979c <f_write+0x3c6>
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	441a      	add	r2, r3
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8009436:	429a      	cmp	r2, r3
 8009438:	f080 8192 	bcs.w	8009760 <f_write+0x38a>
 800943c:	2300      	movs	r3, #0
 800943e:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
 8009440:	e18e      	b.n	8009760 <f_write+0x38a>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8009448:	68fa      	ldr	r2, [r7, #12]
 800944a:	f8d2 2400 	ldr.w	r2, [r2, #1024]	; 0x400
 800944e:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 8009452:	fbb3 f1f2 	udiv	r1, r3, r2
 8009456:	fb02 f201 	mul.w	r2, r2, r1
 800945a:	1a9b      	subs	r3, r3, r2
 800945c:	2b00      	cmp	r3, #0
 800945e:	f040 8131 	bne.w	80096c4 <f_write+0x2ee>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8009468:	68fa      	ldr	r2, [r7, #12]
 800946a:	f8d2 2400 	ldr.w	r2, [r2, #1024]	; 0x400
 800946e:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 8009472:	fbb3 f3f2 	udiv	r3, r3, r2
 8009476:	b2da      	uxtb	r2, r3
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800947e:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 8009482:	3b01      	subs	r3, #1
 8009484:	b2db      	uxtb	r3, r3
 8009486:	4013      	ands	r3, r2
 8009488:	75bb      	strb	r3, [r7, #22]
			if (!csect) {					/* On the cluster boundary? */
 800948a:	7dbb      	ldrb	r3, [r7, #22]
 800948c:	2b00      	cmp	r3, #0
 800948e:	d151      	bne.n	8009534 <f_write+0x15e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8009496:	2b00      	cmp	r3, #0
 8009498:	d10f      	bne.n	80094ba <f_write+0xe4>
					clst = fp->sclust;		/* Follow from the origin */
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 80094a0:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
 80094a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d121      	bne.n	80094ec <f_write+0x116>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80094ae:	2100      	movs	r1, #0
 80094b0:	4618      	mov	r0, r3
 80094b2:	f7fd fcb3 	bl	8006e1c <create_chain>
 80094b6:	6278      	str	r0, [r7, #36]	; 0x24
 80094b8:	e018      	b.n	80094ec <f_write+0x116>
				} else {					/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	f8d3 3424 	ldr.w	r3, [r3, #1060]	; 0x424
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d008      	beq.n	80094d6 <f_write+0x100>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80094ca:	4619      	mov	r1, r3
 80094cc:	68f8      	ldr	r0, [r7, #12]
 80094ce:	f7fd fd42 	bl	8006f56 <clmt_clust>
 80094d2:	6278      	str	r0, [r7, #36]	; 0x24
 80094d4:	e00a      	b.n	80094ec <f_write+0x116>
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 80094e2:	4619      	mov	r1, r3
 80094e4:	4610      	mov	r0, r2
 80094e6:	f7fd fc99 	bl	8006e1c <create_chain>
 80094ea:	6278      	str	r0, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80094ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	f000 813b 	beq.w	800976a <f_write+0x394>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 80094f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094f6:	2b01      	cmp	r3, #1
 80094f8:	d105      	bne.n	8009506 <f_write+0x130>
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	2202      	movs	r2, #2
 80094fe:	f883 2407 	strb.w	r2, [r3, #1031]	; 0x407
 8009502:	2302      	movs	r3, #2
 8009504:	e14a      	b.n	800979c <f_write+0x3c6>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8009506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009508:	f1b3 3fff 	cmp.w	r3, #4294967295
 800950c:	d105      	bne.n	800951a <f_write+0x144>
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	2201      	movs	r2, #1
 8009512:	f883 2407 	strb.w	r2, [r3, #1031]	; 0x407
 8009516:	2301      	movs	r3, #1
 8009518:	e140      	b.n	800979c <f_write+0x3c6>
				fp->clust = clst;			/* Update current cluster */
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800951e:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8009528:	2b00      	cmp	r3, #0
 800952a:	d103      	bne.n	8009534 <f_write+0x15e>
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009530:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	f893 3406 	ldrb.w	r3, [r3, #1030]	; 0x406
 800953a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800953e:	2b00      	cmp	r3, #0
 8009540:	d01d      	beq.n	800957e <f_write+0x1a8>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8009548:	f893 0401 	ldrb.w	r0, [r3, #1025]	; 0x401
 800954c:	68f9      	ldr	r1, [r7, #12]
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 8009554:	2301      	movs	r3, #1
 8009556:	f7fc fe29 	bl	80061ac <disk_write>
 800955a:	4603      	mov	r3, r0
 800955c:	2b00      	cmp	r3, #0
 800955e:	d005      	beq.n	800956c <f_write+0x196>
					ABORT(fp->fs, FR_DISK_ERR);
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	2201      	movs	r2, #1
 8009564:	f883 2407 	strb.w	r2, [r3, #1031]	; 0x407
 8009568:	2301      	movs	r3, #1
 800956a:	e117      	b.n	800979c <f_write+0x3c6>
				fp->flag &= ~FA__DIRTY;
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	f893 3406 	ldrb.w	r3, [r3, #1030]	; 0x406
 8009572:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009576:	b2da      	uxtb	r2, r3
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	f883 2406 	strb.w	r2, [r3, #1030]	; 0x406
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 800958a:	4619      	mov	r1, r3
 800958c:	4610      	mov	r0, r2
 800958e:	f7fd f99c 	bl	80068ca <clust2sect>
 8009592:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 8009594:	693b      	ldr	r3, [r7, #16]
 8009596:	2b00      	cmp	r3, #0
 8009598:	d105      	bne.n	80095a6 <f_write+0x1d0>
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	2202      	movs	r2, #2
 800959e:	f883 2407 	strb.w	r2, [r3, #1031]	; 0x407
 80095a2:	2302      	movs	r3, #2
 80095a4:	e0fa      	b.n	800979c <f_write+0x3c6>
			sect += csect;
 80095a6:	7dbb      	ldrb	r3, [r7, #22]
 80095a8:	693a      	ldr	r2, [r7, #16]
 80095aa:	4413      	add	r3, r2
 80095ac:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80095b4:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 80095b8:	461a      	mov	r2, r3
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	fbb3 f3f2 	udiv	r3, r3, r2
 80095c0:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80095c2:	69fb      	ldr	r3, [r7, #28]
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d058      	beq.n	800967a <f_write+0x2a4>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 80095c8:	7dba      	ldrb	r2, [r7, #22]
 80095ca:	69fb      	ldr	r3, [r7, #28]
 80095cc:	4413      	add	r3, r2
 80095ce:	68fa      	ldr	r2, [r7, #12]
 80095d0:	f8d2 2400 	ldr.w	r2, [r2, #1024]	; 0x400
 80095d4:	f892 2402 	ldrb.w	r2, [r2, #1026]	; 0x402
 80095d8:	4293      	cmp	r3, r2
 80095da:	d908      	bls.n	80095ee <f_write+0x218>
					cc = fp->fs->csize - csect;
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80095e2:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 80095e6:	461a      	mov	r2, r3
 80095e8:	7dbb      	ldrb	r3, [r7, #22]
 80095ea:	1ad3      	subs	r3, r2, r3
 80095ec:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80095f4:	f893 0401 	ldrb.w	r0, [r3, #1025]	; 0x401
 80095f8:	69fb      	ldr	r3, [r7, #28]
 80095fa:	693a      	ldr	r2, [r7, #16]
 80095fc:	69b9      	ldr	r1, [r7, #24]
 80095fe:	f7fc fdd5 	bl	80061ac <disk_write>
 8009602:	4603      	mov	r3, r0
 8009604:	2b00      	cmp	r3, #0
 8009606:	d005      	beq.n	8009614 <f_write+0x23e>
					ABORT(fp->fs, FR_DISK_ERR);
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	2201      	movs	r2, #1
 800960c:	f883 2407 	strb.w	r2, [r3, #1031]	; 0x407
 8009610:	2301      	movs	r3, #1
 8009612:	e0c3      	b.n	800979c <f_write+0x3c6>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->fs->win.d8, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 800961a:	693b      	ldr	r3, [r7, #16]
 800961c:	1ad3      	subs	r3, r2, r3
 800961e:	69fa      	ldr	r2, [r7, #28]
 8009620:	429a      	cmp	r2, r3
 8009622:	d91f      	bls.n	8009664 <f_write+0x28e>
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 8009624:	68f8      	ldr	r0, [r7, #12]
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 800962c:	693b      	ldr	r3, [r7, #16]
 800962e:	1ad3      	subs	r3, r2, r3
 8009630:	68fa      	ldr	r2, [r7, #12]
 8009632:	f8d2 2400 	ldr.w	r2, [r2, #1024]	; 0x400
 8009636:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 800963a:	fb02 f303 	mul.w	r3, r2, r3
 800963e:	69ba      	ldr	r2, [r7, #24]
 8009640:	18d1      	adds	r1, r2, r3
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8009648:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800964c:	461a      	mov	r2, r3
 800964e:	f7fc fdeb 	bl	8006228 <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	f893 3406 	ldrb.w	r3, [r3, #1030]	; 0x406
 8009658:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800965c:	b2da      	uxtb	r2, r3
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	f883 2406 	strb.w	r2, [r3, #1030]	; 0x406
				}
#endif
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800966a:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800966e:	461a      	mov	r2, r3
 8009670:	69fb      	ldr	r3, [r7, #28]
 8009672:	fb02 f303 	mul.w	r3, r2, r3
 8009676:	623b      	str	r3, [r7, #32]
				continue;
 8009678:	e05c      	b.n	8009734 <f_write+0x35e>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 8009680:	693a      	ldr	r2, [r7, #16]
 8009682:	429a      	cmp	r2, r3
 8009684:	d01a      	beq.n	80096bc <f_write+0x2e6>
				if (fp->fptr < fp->fsize &&
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8009692:	429a      	cmp	r2, r3
 8009694:	d212      	bcs.n	80096bc <f_write+0x2e6>
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800969c:	f893 0401 	ldrb.w	r0, [r3, #1025]	; 0x401
 80096a0:	68f9      	ldr	r1, [r7, #12]
 80096a2:	2301      	movs	r3, #1
 80096a4:	693a      	ldr	r2, [r7, #16]
 80096a6:	f7fc fd61 	bl	800616c <disk_read>
 80096aa:	4603      	mov	r3, r0
				if (fp->fptr < fp->fsize &&
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d005      	beq.n	80096bc <f_write+0x2e6>
						ABORT(fp->fs, FR_DISK_ERR);
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	2201      	movs	r2, #1
 80096b4:	f883 2407 	strb.w	r2, [r3, #1031]	; 0x407
 80096b8:	2301      	movs	r3, #1
 80096ba:	e06f      	b.n	800979c <f_write+0x3c6>
			}
#endif
			fp->dsect = sect;
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	693a      	ldr	r2, [r7, #16]
 80096c0:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80096ca:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 80096ce:	4618      	mov	r0, r3
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80096d6:	68fa      	ldr	r2, [r7, #12]
 80096d8:	f8d2 2400 	ldr.w	r2, [r2, #1024]	; 0x400
 80096dc:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 80096e0:	fbb3 f1f2 	udiv	r1, r3, r2
 80096e4:	fb02 f201 	mul.w	r2, r2, r1
 80096e8:	1a9b      	subs	r3, r3, r2
 80096ea:	1ac3      	subs	r3, r0, r3
 80096ec:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
 80096ee:	6a3a      	ldr	r2, [r7, #32]
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	429a      	cmp	r2, r3
 80096f4:	d901      	bls.n	80096fa <f_write+0x324>
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	623b      	str	r3, [r7, #32]
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8009700:	68fa      	ldr	r2, [r7, #12]
 8009702:	f8d2 2400 	ldr.w	r2, [r2, #1024]	; 0x400
 8009706:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 800970a:	fbb3 f1f2 	udiv	r1, r3, r2
 800970e:	fb02 f201 	mul.w	r2, r2, r1
 8009712:	1a9b      	subs	r3, r3, r2
 8009714:	68fa      	ldr	r2, [r7, #12]
 8009716:	4413      	add	r3, r2
 8009718:	6a3a      	ldr	r2, [r7, #32]
 800971a:	69b9      	ldr	r1, [r7, #24]
 800971c:	4618      	mov	r0, r3
 800971e:	f7fc fd83 	bl	8006228 <mem_cpy>
		fp->flag |= FA__DIRTY;
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	f893 3406 	ldrb.w	r3, [r3, #1030]	; 0x406
 8009728:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800972c:	b2da      	uxtb	r2, r3
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	f883 2406 	strb.w	r2, [r3, #1030]	; 0x406
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 8009734:	69ba      	ldr	r2, [r7, #24]
 8009736:	6a3b      	ldr	r3, [r7, #32]
 8009738:	4413      	add	r3, r2
 800973a:	61bb      	str	r3, [r7, #24]
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8009742:	6a3b      	ldr	r3, [r7, #32]
 8009744:	441a      	add	r2, r3
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 800974c:	683b      	ldr	r3, [r7, #0]
 800974e:	681a      	ldr	r2, [r3, #0]
 8009750:	6a3b      	ldr	r3, [r7, #32]
 8009752:	441a      	add	r2, r3
 8009754:	683b      	ldr	r3, [r7, #0]
 8009756:	601a      	str	r2, [r3, #0]
 8009758:	687a      	ldr	r2, [r7, #4]
 800975a:	6a3b      	ldr	r3, [r7, #32]
 800975c:	1ad3      	subs	r3, r2, r3
 800975e:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	2b00      	cmp	r3, #0
 8009764:	f47f ae6d 	bne.w	8009442 <f_write+0x6c>
 8009768:	e000      	b.n	800976c <f_write+0x396>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800976a:	bf00      	nop
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8009778:	429a      	cmp	r2, r3
 800977a:	d905      	bls.n	8009788 <f_write+0x3b2>
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	f893 3406 	ldrb.w	r3, [r3, #1030]	; 0x406
 800978e:	f043 0320 	orr.w	r3, r3, #32
 8009792:	b2da      	uxtb	r2, r3
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	f883 2406 	strb.w	r2, [r3, #1030]	; 0x406

	LEAVE_FF(fp->fs, FR_OK);
 800979a:	2300      	movs	r3, #0
}
 800979c:	4618      	mov	r0, r3
 800979e:	3728      	adds	r7, #40	; 0x28
 80097a0:	46bd      	mov	sp, r7
 80097a2:	bd80      	pop	{r7, pc}

080097a4 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80097a4:	b580      	push	{r7, lr}
 80097a6:	b086      	sub	sp, #24
 80097a8:	af00      	add	r7, sp, #0
 80097aa:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 80097ac:	6878      	ldr	r0, [r7, #4]
 80097ae:	f7ff f9df 	bl	8008b70 <validate>
 80097b2:	4603      	mov	r3, r0
 80097b4:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80097b6:	7dfb      	ldrb	r3, [r7, #23]
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	f040 80a8 	bne.w	800990e <f_sync+0x16a>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	f893 3406 	ldrb.w	r3, [r3, #1030]	; 0x406
 80097c4:	f003 0320 	and.w	r3, r3, #32
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	f000 80a0 	beq.w	800990e <f_sync+0x16a>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	f893 3406 	ldrb.w	r3, [r3, #1030]	; 0x406
 80097d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d019      	beq.n	8009810 <f_sync+0x6c>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80097e2:	f893 0401 	ldrb.w	r0, [r3, #1025]	; 0x401
 80097e6:	6879      	ldr	r1, [r7, #4]
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 80097ee:	2301      	movs	r3, #1
 80097f0:	f7fc fcdc 	bl	80061ac <disk_write>
 80097f4:	4603      	mov	r3, r0
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d001      	beq.n	80097fe <f_sync+0x5a>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 80097fa:	2301      	movs	r3, #1
 80097fc:	e088      	b.n	8009910 <f_sync+0x16c>
				fp->flag &= ~FA__DIRTY;
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	f893 3406 	ldrb.w	r3, [r3, #1030]	; 0x406
 8009804:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009808:	b2da      	uxtb	r2, r3
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	f883 2406 	strb.w	r2, [r3, #1030]	; 0x406
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
 800981c:	4619      	mov	r1, r3
 800981e:	4610      	mov	r0, r2
 8009820:	f7fc ff77 	bl	8006712 <move_window>
 8009824:	4603      	mov	r3, r0
 8009826:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 8009828:	7dfb      	ldrb	r3, [r7, #23]
 800982a:	2b00      	cmp	r3, #0
 800982c:	d16f      	bne.n	800990e <f_sync+0x16a>
				dir = fp->dir_ptr;
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8009834:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 8009836:	693b      	ldr	r3, [r7, #16]
 8009838:	330b      	adds	r3, #11
 800983a:	781a      	ldrb	r2, [r3, #0]
 800983c:	693b      	ldr	r3, [r7, #16]
 800983e:	330b      	adds	r3, #11
 8009840:	f042 0220 	orr.w	r2, r2, #32
 8009844:	b2d2      	uxtb	r2, r2
 8009846:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 800984e:	693b      	ldr	r3, [r7, #16]
 8009850:	331c      	adds	r3, #28
 8009852:	b2d2      	uxtb	r2, r2
 8009854:	701a      	strb	r2, [r3, #0]
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800985c:	b29b      	uxth	r3, r3
 800985e:	0a1b      	lsrs	r3, r3, #8
 8009860:	b29a      	uxth	r2, r3
 8009862:	693b      	ldr	r3, [r7, #16]
 8009864:	331d      	adds	r3, #29
 8009866:	b2d2      	uxtb	r2, r2
 8009868:	701a      	strb	r2, [r3, #0]
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8009870:	0c1a      	lsrs	r2, r3, #16
 8009872:	693b      	ldr	r3, [r7, #16]
 8009874:	331e      	adds	r3, #30
 8009876:	b2d2      	uxtb	r2, r2
 8009878:	701a      	strb	r2, [r3, #0]
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8009880:	0e1a      	lsrs	r2, r3, #24
 8009882:	693b      	ldr	r3, [r7, #16]
 8009884:	331f      	adds	r3, #31
 8009886:	b2d2      	uxtb	r2, r2
 8009888:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8009890:	4619      	mov	r1, r3
 8009892:	6938      	ldr	r0, [r7, #16]
 8009894:	f7fd fddc 	bl	8007450 <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 8009898:	f7fc fbcc 	bl	8006034 <get_fattime>
 800989c:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 800989e:	693b      	ldr	r3, [r7, #16]
 80098a0:	3316      	adds	r3, #22
 80098a2:	68fa      	ldr	r2, [r7, #12]
 80098a4:	b2d2      	uxtb	r2, r2
 80098a6:	701a      	strb	r2, [r3, #0]
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	b29b      	uxth	r3, r3
 80098ac:	0a1b      	lsrs	r3, r3, #8
 80098ae:	b29a      	uxth	r2, r3
 80098b0:	693b      	ldr	r3, [r7, #16]
 80098b2:	3317      	adds	r3, #23
 80098b4:	b2d2      	uxtb	r2, r2
 80098b6:	701a      	strb	r2, [r3, #0]
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	0c1a      	lsrs	r2, r3, #16
 80098bc:	693b      	ldr	r3, [r7, #16]
 80098be:	3318      	adds	r3, #24
 80098c0:	b2d2      	uxtb	r2, r2
 80098c2:	701a      	strb	r2, [r3, #0]
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	0e1a      	lsrs	r2, r3, #24
 80098c8:	693b      	ldr	r3, [r7, #16]
 80098ca:	3319      	adds	r3, #25
 80098cc:	b2d2      	uxtb	r2, r2
 80098ce:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 80098d0:	693b      	ldr	r3, [r7, #16]
 80098d2:	3312      	adds	r3, #18
 80098d4:	2200      	movs	r2, #0
 80098d6:	701a      	strb	r2, [r3, #0]
 80098d8:	693b      	ldr	r3, [r7, #16]
 80098da:	3313      	adds	r3, #19
 80098dc:	2200      	movs	r2, #0
 80098de:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	f893 3406 	ldrb.w	r3, [r3, #1030]	; 0x406
 80098e6:	f023 0320 	bic.w	r3, r3, #32
 80098ea:	b2da      	uxtb	r2, r3
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	f883 2406 	strb.w	r2, [r3, #1030]	; 0x406
				fp->fs->wflag = 1;
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80098f8:	2201      	movs	r2, #1
 80098fa:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
				res = sync_fs(fp->fs);
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8009904:	4618      	mov	r0, r3
 8009906:	f7fc ff32 	bl	800676e <sync_fs>
 800990a:	4603      	mov	r3, r0
 800990c:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 800990e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009910:	4618      	mov	r0, r3
 8009912:	3718      	adds	r7, #24
 8009914:	46bd      	mov	sp, r7
 8009916:	bd80      	pop	{r7, pc}

08009918 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 8009918:	b580      	push	{r7, lr}
 800991a:	b084      	sub	sp, #16
 800991c:	af00      	add	r7, sp, #0
 800991e:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8009920:	6878      	ldr	r0, [r7, #4]
 8009922:	f7ff ff3f 	bl	80097a4 <f_sync>
 8009926:	4603      	mov	r3, r0
 8009928:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800992a:	7bfb      	ldrb	r3, [r7, #15]
 800992c:	2b00      	cmp	r3, #0
 800992e:	d116      	bne.n	800995e <f_close+0x46>
#endif
	{
		res = validate(fp);				/* Lock volume */
 8009930:	6878      	ldr	r0, [r7, #4]
 8009932:	f7ff f91d 	bl	8008b70 <validate>
 8009936:	4603      	mov	r3, r0
 8009938:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800993a:	7bfb      	ldrb	r3, [r7, #15]
 800993c:	2b00      	cmp	r3, #0
 800993e:	d10e      	bne.n	800995e <f_close+0x46>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	f8d3 3428 	ldr.w	r3, [r3, #1064]	; 0x428
 8009946:	4618      	mov	r0, r3
 8009948:	f7fc fe2c 	bl	80065a4 <dec_lock>
 800994c:	4603      	mov	r3, r0
 800994e:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8009950:	7bfb      	ldrb	r3, [r7, #15]
 8009952:	2b00      	cmp	r3, #0
 8009954:	d103      	bne.n	800995e <f_close+0x46>
#endif
				fp->fs = 0;				/* Invalidate file object */
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	2200      	movs	r2, #0
 800995a:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800995e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009960:	4618      	mov	r0, r3
 8009962:	3710      	adds	r7, #16
 8009964:	46bd      	mov	sp, r7
 8009966:	bd80      	pop	{r7, pc}

08009968 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8009968:	b580      	push	{r7, lr}
 800996a:	b088      	sub	sp, #32
 800996c:	af00      	add	r7, sp, #0
 800996e:	6078      	str	r0, [r7, #4]
 8009970:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS* fs;
	DEFINE_NAMEBUF;


	if (!dp) return FR_INVALID_OBJECT;
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	2b00      	cmp	r3, #0
 8009976:	d101      	bne.n	800997c <f_opendir+0x14>
 8009978:	2309      	movs	r3, #9
 800997a:	e077      	b.n	8009a6c <f_opendir+0x104>

	/* Get logical drive number */
	res = find_volume(&fs, &path, 0);
 800997c:	4639      	mov	r1, r7
 800997e:	f107 0318 	add.w	r3, r7, #24
 8009982:	2200      	movs	r2, #0
 8009984:	4618      	mov	r0, r3
 8009986:	f7fe fdf5 	bl	8008574 <find_volume>
 800998a:	4603      	mov	r3, r0
 800998c:	77fb      	strb	r3, [r7, #31]
	if (res == FR_OK) {
 800998e:	7ffb      	ldrb	r3, [r7, #31]
 8009990:	2b00      	cmp	r3, #0
 8009992:	d163      	bne.n	8009a5c <f_opendir+0xf4>
		dp->fs = fs;
 8009994:	69ba      	ldr	r2, [r7, #24]
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
		INIT_BUF(*dp);
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	f107 020c 	add.w	r2, r7, #12
 80099a2:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	4a32      	ldr	r2, [pc, #200]	; (8009a74 <f_opendir+0x10c>)
 80099aa:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
		res = follow_path(dp, path);			/* Follow the path to the directory */
 80099ae:	683b      	ldr	r3, [r7, #0]
 80099b0:	4619      	mov	r1, r3
 80099b2:	6878      	ldr	r0, [r7, #4]
 80099b4:	f7fe fcc2 	bl	800833c <follow_path>
 80099b8:	4603      	mov	r3, r0
 80099ba:	77fb      	strb	r3, [r7, #31]
		FREE_BUF();
		if (res == FR_OK) {						/* Follow completed */
 80099bc:	7ffb      	ldrb	r3, [r7, #31]
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d147      	bne.n	8009a52 <f_opendir+0xea>
			if (dp->dir) {						/* It is not the origin directory itself */
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d017      	beq.n	80099fc <f_opendir+0x94>
				if (dp->dir[DIR_Attr] & AM_DIR)	/* The object is a sub directory */
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 80099d2:	330b      	adds	r3, #11
 80099d4:	781b      	ldrb	r3, [r3, #0]
 80099d6:	f003 0310 	and.w	r3, r3, #16
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d00c      	beq.n	80099f8 <f_opendir+0x90>
					dp->sclust = ld_clust(fs, dp->dir);
 80099de:	69ba      	ldr	r2, [r7, #24]
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 80099e6:	4619      	mov	r1, r3
 80099e8:	4610      	mov	r0, r2
 80099ea:	f7fd fd04 	bl	80073f6 <ld_clust>
 80099ee:	4602      	mov	r2, r0
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 80099f6:	e001      	b.n	80099fc <f_opendir+0x94>
				else							/* The object is a file */
					res = FR_NO_PATH;
 80099f8:	2305      	movs	r3, #5
 80099fa:	77fb      	strb	r3, [r7, #31]
			}
			if (res == FR_OK) {
 80099fc:	7ffb      	ldrb	r3, [r7, #31]
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d127      	bne.n	8009a52 <f_opendir+0xea>
				dp->id = fs->id;
 8009a02:	69bb      	ldr	r3, [r7, #24]
 8009a04:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8009a0e:	2100      	movs	r1, #0
 8009a10:	6878      	ldr	r0, [r7, #4]
 8009a12:	f7fd fadb 	bl	8006fcc <dir_sdi>
 8009a16:	4603      	mov	r3, r0
 8009a18:	77fb      	strb	r3, [r7, #31]
#if _FS_LOCK
				if (res == FR_OK) {
 8009a1a:	7ffb      	ldrb	r3, [r7, #31]
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d118      	bne.n	8009a52 <f_opendir+0xea>
					if (dp->sclust) {
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d00f      	beq.n	8009a4a <f_opendir+0xe2>
						dp->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 8009a2a:	2100      	movs	r1, #0
 8009a2c:	6878      	ldr	r0, [r7, #4]
 8009a2e:	f7fc fd03 	bl	8006438 <inc_lock>
 8009a32:	4602      	mov	r2, r0
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
						if (!dp->lockid)
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d106      	bne.n	8009a52 <f_opendir+0xea>
							res = FR_TOO_MANY_OPEN_FILES;
 8009a44:	2312      	movs	r3, #18
 8009a46:	77fb      	strb	r3, [r7, #31]
 8009a48:	e003      	b.n	8009a52 <f_opendir+0xea>
					} else {
						dp->lockid = 0;	/* Root directory need not to be locked */
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	2200      	movs	r2, #0
 8009a4e:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
					}
				}
#endif
			}
		}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8009a52:	7ffb      	ldrb	r3, [r7, #31]
 8009a54:	2b04      	cmp	r3, #4
 8009a56:	d101      	bne.n	8009a5c <f_opendir+0xf4>
 8009a58:	2305      	movs	r3, #5
 8009a5a:	77fb      	strb	r3, [r7, #31]
	}
	if (res != FR_OK) dp->fs = 0;		/* Invalidate the directory object if function faild */
 8009a5c:	7ffb      	ldrb	r3, [r7, #31]
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d003      	beq.n	8009a6a <f_opendir+0x102>
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	2200      	movs	r2, #0
 8009a66:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

	LEAVE_FF(fs, res);
 8009a6a:	7ffb      	ldrb	r3, [r7, #31]
}
 8009a6c:	4618      	mov	r0, r3
 8009a6e:	3720      	adds	r7, #32
 8009a70:	46bd      	mov	sp, r7
 8009a72:	bd80      	pop	{r7, pc}
 8009a74:	200002e4 	.word	0x200002e4

08009a78 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 8009a78:	b580      	push	{r7, lr}
 8009a7a:	b084      	sub	sp, #16
 8009a7c:	af00      	add	r7, sp, #0
 8009a7e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = validate(dp);
 8009a80:	6878      	ldr	r0, [r7, #4]
 8009a82:	f7ff f875 	bl	8008b70 <validate>
 8009a86:	4603      	mov	r3, r0
 8009a88:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8009a8a:	7bfb      	ldrb	r3, [r7, #15]
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d113      	bne.n	8009ab8 <f_closedir+0x40>
#if _FS_REENTRANT
		FATFS *fs = dp->fs;
#endif
#if _FS_LOCK
		if (dp->lockid)				/* Decrement sub-directory open counter */
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d007      	beq.n	8009aaa <f_closedir+0x32>
			res = dec_lock(dp->lockid);
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
 8009aa0:	4618      	mov	r0, r3
 8009aa2:	f7fc fd7f 	bl	80065a4 <dec_lock>
 8009aa6:	4603      	mov	r3, r0
 8009aa8:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK)
 8009aaa:	7bfb      	ldrb	r3, [r7, #15]
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d103      	bne.n	8009ab8 <f_closedir+0x40>
#endif
			dp->fs = 0;				/* Invalidate directory object */
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	2200      	movs	r2, #0
 8009ab4:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 8009ab8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009aba:	4618      	mov	r0, r3
 8009abc:	3710      	adds	r7, #16
 8009abe:	46bd      	mov	sp, r7
 8009ac0:	bd80      	pop	{r7, pc}
	...

08009ac4 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8009ac4:	b580      	push	{r7, lr}
 8009ac6:	b086      	sub	sp, #24
 8009ac8:	af00      	add	r7, sp, #0
 8009aca:	6078      	str	r0, [r7, #4]
 8009acc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	DEFINE_NAMEBUF;


	res = validate(dp);						/* Check validity of the object */
 8009ace:	6878      	ldr	r0, [r7, #4]
 8009ad0:	f7ff f84e 	bl	8008b70 <validate>
 8009ad4:	4603      	mov	r3, r0
 8009ad6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8009ad8:	7dfb      	ldrb	r3, [r7, #23]
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d137      	bne.n	8009b4e <f_readdir+0x8a>
		if (!fno) {
 8009ade:	683b      	ldr	r3, [r7, #0]
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d106      	bne.n	8009af2 <f_readdir+0x2e>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 8009ae4:	2100      	movs	r1, #0
 8009ae6:	6878      	ldr	r0, [r7, #4]
 8009ae8:	f7fd fa70 	bl	8006fcc <dir_sdi>
 8009aec:	4603      	mov	r3, r0
 8009aee:	75fb      	strb	r3, [r7, #23]
 8009af0:	e02d      	b.n	8009b4e <f_readdir+0x8a>
		} else {
			INIT_BUF(*dp);
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	f107 0208 	add.w	r2, r7, #8
 8009af8:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	4a16      	ldr	r2, [pc, #88]	; (8009b58 <f_readdir+0x94>)
 8009b00:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
			res = dir_read(dp, 0);			/* Read an item */
 8009b04:	2100      	movs	r1, #0
 8009b06:	6878      	ldr	r0, [r7, #4]
 8009b08:	f7fd ff7e 	bl	8007a08 <dir_read>
 8009b0c:	4603      	mov	r3, r0
 8009b0e:	75fb      	strb	r3, [r7, #23]
			if (res == FR_NO_FILE) {		/* Reached end of directory */
 8009b10:	7dfb      	ldrb	r3, [r7, #23]
 8009b12:	2b04      	cmp	r3, #4
 8009b14:	d105      	bne.n	8009b22 <f_readdir+0x5e>
				dp->sect = 0;
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	2200      	movs	r2, #0
 8009b1a:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
				res = FR_OK;
 8009b1e:	2300      	movs	r3, #0
 8009b20:	75fb      	strb	r3, [r7, #23]
			}
			if (res == FR_OK) {				/* A valid entry is found */
 8009b22:	7dfb      	ldrb	r3, [r7, #23]
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d112      	bne.n	8009b4e <f_readdir+0x8a>
				get_fileinfo(dp, fno);		/* Get the object information */
 8009b28:	6839      	ldr	r1, [r7, #0]
 8009b2a:	6878      	ldr	r0, [r7, #4]
 8009b2c:	f7fe f97f 	bl	8007e2e <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 8009b30:	2100      	movs	r1, #0
 8009b32:	6878      	ldr	r0, [r7, #4]
 8009b34:	f7fd fafb 	bl	800712e <dir_next>
 8009b38:	4603      	mov	r3, r0
 8009b3a:	75fb      	strb	r3, [r7, #23]
				if (res == FR_NO_FILE) {
 8009b3c:	7dfb      	ldrb	r3, [r7, #23]
 8009b3e:	2b04      	cmp	r3, #4
 8009b40:	d105      	bne.n	8009b4e <f_readdir+0x8a>
					dp->sect = 0;
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	2200      	movs	r2, #0
 8009b46:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
					res = FR_OK;
 8009b4a:	2300      	movs	r3, #0
 8009b4c:	75fb      	strb	r3, [r7, #23]
			}
			FREE_BUF();
		}
	}

	LEAVE_FF(dp->fs, res);
 8009b4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b50:	4618      	mov	r0, r3
 8009b52:	3718      	adds	r7, #24
 8009b54:	46bd      	mov	sp, r7
 8009b56:	bd80      	pop	{r7, pc}
 8009b58:	200002e4 	.word	0x200002e4

08009b5c <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8009b5c:	b580      	push	{r7, lr}
 8009b5e:	f5ad 6d88 	sub.w	sp, sp, #1088	; 0x440
 8009b62:	af00      	add	r7, sp, #0
 8009b64:	1d3b      	adds	r3, r7, #4
 8009b66:	6018      	str	r0, [r3, #0]
 8009b68:	463b      	mov	r3, r7
 8009b6a:	6019      	str	r1, [r3, #0]
	DIR dj;
	DEFINE_NAMEBUF;


	/* Get logical drive number */
	res = find_volume(&dj.fs, &path, 0);
 8009b6c:	1d39      	adds	r1, r7, #4
 8009b6e:	f107 0314 	add.w	r3, r7, #20
 8009b72:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009b76:	2200      	movs	r2, #0
 8009b78:	4618      	mov	r0, r3
 8009b7a:	f7fe fcfb 	bl	8008574 <find_volume>
 8009b7e:	4603      	mov	r3, r0
 8009b80:	f887 343f 	strb.w	r3, [r7, #1087]	; 0x43f
	if (res == FR_OK) {
 8009b84:	f897 343f 	ldrb.w	r3, [r7, #1087]	; 0x43f
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d12e      	bne.n	8009bea <f_stat+0x8e>
		INIT_BUF(dj);
 8009b8c:	f107 0314 	add.w	r3, r7, #20
 8009b90:	f107 0208 	add.w	r2, r7, #8
 8009b94:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
 8009b98:	f107 0314 	add.w	r3, r7, #20
 8009b9c:	4a16      	ldr	r2, [pc, #88]	; (8009bf8 <f_stat+0x9c>)
 8009b9e:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
		res = follow_path(&dj, path);	/* Follow the file path */
 8009ba2:	1d3b      	adds	r3, r7, #4
 8009ba4:	681a      	ldr	r2, [r3, #0]
 8009ba6:	f107 0314 	add.w	r3, r7, #20
 8009baa:	4611      	mov	r1, r2
 8009bac:	4618      	mov	r0, r3
 8009bae:	f7fe fbc5 	bl	800833c <follow_path>
 8009bb2:	4603      	mov	r3, r0
 8009bb4:	f887 343f 	strb.w	r3, [r7, #1087]	; 0x43f
		if (res == FR_OK) {				/* Follow completed */
 8009bb8:	f897 343f 	ldrb.w	r3, [r7, #1087]	; 0x43f
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d114      	bne.n	8009bea <f_stat+0x8e>
			if (dj.dir) {		/* Found an object */
 8009bc0:	f107 0314 	add.w	r3, r7, #20
 8009bc4:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d00b      	beq.n	8009be4 <f_stat+0x88>
				if (fno) get_fileinfo(&dj, fno);
 8009bcc:	463b      	mov	r3, r7
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d00a      	beq.n	8009bea <f_stat+0x8e>
 8009bd4:	463b      	mov	r3, r7
 8009bd6:	f107 0214 	add.w	r2, r7, #20
 8009bda:	6819      	ldr	r1, [r3, #0]
 8009bdc:	4610      	mov	r0, r2
 8009bde:	f7fe f926 	bl	8007e2e <get_fileinfo>
 8009be2:	e002      	b.n	8009bea <f_stat+0x8e>
			} else {			/* It is root directory */
				res = FR_INVALID_NAME;
 8009be4:	2306      	movs	r3, #6
 8009be6:	f887 343f 	strb.w	r3, [r7, #1087]	; 0x43f
			}
		}
		FREE_BUF();
	}

	LEAVE_FF(dj.fs, res);
 8009bea:	f897 343f 	ldrb.w	r3, [r7, #1087]	; 0x43f
}
 8009bee:	4618      	mov	r0, r3
 8009bf0:	f507 6788 	add.w	r7, r7, #1088	; 0x440
 8009bf4:	46bd      	mov	sp, r7
 8009bf6:	bd80      	pop	{r7, pc}
 8009bf8:	200002e4 	.word	0x200002e4

08009bfc <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 8009bfc:	b580      	push	{r7, lr}
 8009bfe:	b08e      	sub	sp, #56	; 0x38
 8009c00:	af00      	add	r7, sp, #0
 8009c02:	60f8      	str	r0, [r7, #12]
 8009c04:	60b9      	str	r1, [r7, #8]
 8009c06:	607a      	str	r2, [r7, #4]
	UINT i;
	BYTE fat, *p;


	/* Get logical drive number */
	res = find_volume(fatfs, &path, 0);
 8009c08:	f107 030c 	add.w	r3, r7, #12
 8009c0c:	2200      	movs	r2, #0
 8009c0e:	4619      	mov	r1, r3
 8009c10:	6878      	ldr	r0, [r7, #4]
 8009c12:	f7fe fcaf 	bl	8008574 <find_volume>
 8009c16:	4603      	mov	r3, r0
 8009c18:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	fs = *fatfs;
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	61fb      	str	r3, [r7, #28]
	if (res == FR_OK) {
 8009c22:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	f040 80b0 	bne.w	8009d8c <f_getfree+0x190>
		/* If free_clust is valid, return it without full cluster scan */
		if (fs->free_clust <= fs->n_fatent - 2) {
 8009c2c:	69fb      	ldr	r3, [r7, #28]
 8009c2e:	f8d3 2410 	ldr.w	r2, [r3, #1040]	; 0x410
 8009c32:	69fb      	ldr	r3, [r7, #28]
 8009c34:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8009c38:	3b02      	subs	r3, #2
 8009c3a:	429a      	cmp	r2, r3
 8009c3c:	d805      	bhi.n	8009c4a <f_getfree+0x4e>
			*nclst = fs->free_clust;
 8009c3e:	69fb      	ldr	r3, [r7, #28]
 8009c40:	f8d3 2410 	ldr.w	r2, [r3, #1040]	; 0x410
 8009c44:	68bb      	ldr	r3, [r7, #8]
 8009c46:	601a      	str	r2, [r3, #0]
 8009c48:	e0a0      	b.n	8009d8c <f_getfree+0x190>
		} else {
			/* Get number of free clusters */
			fat = fs->fs_type;
 8009c4a:	69fb      	ldr	r3, [r7, #28]
 8009c4c:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 8009c50:	76fb      	strb	r3, [r7, #27]
			n = 0;
 8009c52:	2300      	movs	r3, #0
 8009c54:	633b      	str	r3, [r7, #48]	; 0x30
			if (fat == FS_FAT12) {
 8009c56:	7efb      	ldrb	r3, [r7, #27]
 8009c58:	2b01      	cmp	r3, #1
 8009c5a:	d125      	bne.n	8009ca8 <f_getfree+0xac>
				clst = 2;
 8009c5c:	2302      	movs	r3, #2
 8009c5e:	62fb      	str	r3, [r7, #44]	; 0x2c
				do {
					stat = get_fat(fs, clst);
 8009c60:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009c62:	69f8      	ldr	r0, [r7, #28]
 8009c64:	f7fc fe52 	bl	800690c <get_fat>
 8009c68:	6178      	str	r0, [r7, #20]
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8009c6a:	697b      	ldr	r3, [r7, #20]
 8009c6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c70:	d103      	bne.n	8009c7a <f_getfree+0x7e>
 8009c72:	2301      	movs	r3, #1
 8009c74:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8009c78:	e078      	b.n	8009d6c <f_getfree+0x170>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8009c7a:	697b      	ldr	r3, [r7, #20]
 8009c7c:	2b01      	cmp	r3, #1
 8009c7e:	d103      	bne.n	8009c88 <f_getfree+0x8c>
 8009c80:	2302      	movs	r3, #2
 8009c82:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8009c86:	e071      	b.n	8009d6c <f_getfree+0x170>
					if (stat == 0) n++;
 8009c88:	697b      	ldr	r3, [r7, #20]
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d102      	bne.n	8009c94 <f_getfree+0x98>
 8009c8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c90:	3301      	adds	r3, #1
 8009c92:	633b      	str	r3, [r7, #48]	; 0x30
				} while (++clst < fs->n_fatent);
 8009c94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c96:	3301      	adds	r3, #1
 8009c98:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009c9a:	69fb      	ldr	r3, [r7, #28]
 8009c9c:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8009ca0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009ca2:	429a      	cmp	r2, r3
 8009ca4:	d3dc      	bcc.n	8009c60 <f_getfree+0x64>
 8009ca6:	e061      	b.n	8009d6c <f_getfree+0x170>
			} else {
				clst = fs->n_fatent;
 8009ca8:	69fb      	ldr	r3, [r7, #28]
 8009caa:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8009cae:	62fb      	str	r3, [r7, #44]	; 0x2c
				sect = fs->fatbase;
 8009cb0:	69fb      	ldr	r3, [r7, #28]
 8009cb2:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8009cb6:	62bb      	str	r3, [r7, #40]	; 0x28
				i = 0; p = 0;
 8009cb8:	2300      	movs	r3, #0
 8009cba:	627b      	str	r3, [r7, #36]	; 0x24
 8009cbc:	2300      	movs	r3, #0
 8009cbe:	623b      	str	r3, [r7, #32]
				do {
					if (!i) {
 8009cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d113      	bne.n	8009cee <f_getfree+0xf2>
						res = move_window(fs, sect++);
 8009cc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cc8:	1c5a      	adds	r2, r3, #1
 8009cca:	62ba      	str	r2, [r7, #40]	; 0x28
 8009ccc:	4619      	mov	r1, r3
 8009cce:	69f8      	ldr	r0, [r7, #28]
 8009cd0:	f7fc fd1f 	bl	8006712 <move_window>
 8009cd4:	4603      	mov	r3, r0
 8009cd6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
						if (res != FR_OK) break;
 8009cda:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d143      	bne.n	8009d6a <f_getfree+0x16e>
						p = fs->win.d8;
 8009ce2:	69fb      	ldr	r3, [r7, #28]
 8009ce4:	623b      	str	r3, [r7, #32]
						i = SS(fs);
 8009ce6:	69fb      	ldr	r3, [r7, #28]
 8009ce8:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 8009cec:	627b      	str	r3, [r7, #36]	; 0x24
					}
					if (fat == FS_FAT16) {
 8009cee:	7efb      	ldrb	r3, [r7, #27]
 8009cf0:	2b02      	cmp	r3, #2
 8009cf2:	d115      	bne.n	8009d20 <f_getfree+0x124>
						if (LD_WORD(p) == 0) n++;
 8009cf4:	6a3b      	ldr	r3, [r7, #32]
 8009cf6:	3301      	adds	r3, #1
 8009cf8:	781b      	ldrb	r3, [r3, #0]
 8009cfa:	021b      	lsls	r3, r3, #8
 8009cfc:	b21a      	sxth	r2, r3
 8009cfe:	6a3b      	ldr	r3, [r7, #32]
 8009d00:	781b      	ldrb	r3, [r3, #0]
 8009d02:	b21b      	sxth	r3, r3
 8009d04:	4313      	orrs	r3, r2
 8009d06:	b21b      	sxth	r3, r3
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d102      	bne.n	8009d12 <f_getfree+0x116>
 8009d0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d0e:	3301      	adds	r3, #1
 8009d10:	633b      	str	r3, [r7, #48]	; 0x30
						p += 2; i -= 2;
 8009d12:	6a3b      	ldr	r3, [r7, #32]
 8009d14:	3302      	adds	r3, #2
 8009d16:	623b      	str	r3, [r7, #32]
 8009d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d1a:	3b02      	subs	r3, #2
 8009d1c:	627b      	str	r3, [r7, #36]	; 0x24
 8009d1e:	e01d      	b.n	8009d5c <f_getfree+0x160>
					} else {
						if ((LD_DWORD(p) & 0x0FFFFFFF) == 0) n++;
 8009d20:	6a3b      	ldr	r3, [r7, #32]
 8009d22:	3303      	adds	r3, #3
 8009d24:	781b      	ldrb	r3, [r3, #0]
 8009d26:	061a      	lsls	r2, r3, #24
 8009d28:	6a3b      	ldr	r3, [r7, #32]
 8009d2a:	3302      	adds	r3, #2
 8009d2c:	781b      	ldrb	r3, [r3, #0]
 8009d2e:	041b      	lsls	r3, r3, #16
 8009d30:	4313      	orrs	r3, r2
 8009d32:	6a3a      	ldr	r2, [r7, #32]
 8009d34:	3201      	adds	r2, #1
 8009d36:	7812      	ldrb	r2, [r2, #0]
 8009d38:	0212      	lsls	r2, r2, #8
 8009d3a:	4313      	orrs	r3, r2
 8009d3c:	6a3a      	ldr	r2, [r7, #32]
 8009d3e:	7812      	ldrb	r2, [r2, #0]
 8009d40:	4313      	orrs	r3, r2
 8009d42:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d102      	bne.n	8009d50 <f_getfree+0x154>
 8009d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d4c:	3301      	adds	r3, #1
 8009d4e:	633b      	str	r3, [r7, #48]	; 0x30
						p += 4; i -= 4;
 8009d50:	6a3b      	ldr	r3, [r7, #32]
 8009d52:	3304      	adds	r3, #4
 8009d54:	623b      	str	r3, [r7, #32]
 8009d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d58:	3b04      	subs	r3, #4
 8009d5a:	627b      	str	r3, [r7, #36]	; 0x24
					}
				} while (--clst);
 8009d5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d5e:	3b01      	subs	r3, #1
 8009d60:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009d62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d1ab      	bne.n	8009cc0 <f_getfree+0xc4>
 8009d68:	e000      	b.n	8009d6c <f_getfree+0x170>
						if (res != FR_OK) break;
 8009d6a:	bf00      	nop
			}
			fs->free_clust = n;
 8009d6c:	69fb      	ldr	r3, [r7, #28]
 8009d6e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009d70:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
			fs->fsi_flag |= 1;
 8009d74:	69fb      	ldr	r3, [r7, #28]
 8009d76:	f893 3405 	ldrb.w	r3, [r3, #1029]	; 0x405
 8009d7a:	f043 0301 	orr.w	r3, r3, #1
 8009d7e:	b2da      	uxtb	r2, r3
 8009d80:	69fb      	ldr	r3, [r7, #28]
 8009d82:	f883 2405 	strb.w	r2, [r3, #1029]	; 0x405
			*nclst = n;
 8009d86:	68bb      	ldr	r3, [r7, #8]
 8009d88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009d8a:	601a      	str	r2, [r3, #0]
		}
	}
	LEAVE_FF(fs, res);
 8009d8c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8009d90:	4618      	mov	r0, r3
 8009d92:	3738      	adds	r7, #56	; 0x38
 8009d94:	46bd      	mov	sp, r7
 8009d96:	bd80      	pop	{r7, pc}

08009d98 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 8009d98:	b580      	push	{r7, lr}
 8009d9a:	f5ad 6d07 	sub.w	sp, sp, #2160	; 0x870
 8009d9e:	af00      	add	r7, sp, #0
 8009da0:	1d3b      	adds	r3, r7, #4
 8009da2:	6018      	str	r0, [r3, #0]
	FRESULT res;
	DIR dj, sdj;
	BYTE *dir;
	DWORD dclst = 0;
 8009da4:	2300      	movs	r3, #0
 8009da6:	f8c7 3868 	str.w	r3, [r7, #2152]	; 0x868
	DEFINE_NAMEBUF;


	/* Get logical drive number */
	res = find_volume(&dj.fs, &path, 1);
 8009daa:	1d39      	adds	r1, r7, #4
 8009dac:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 8009db0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009db4:	2201      	movs	r2, #1
 8009db6:	4618      	mov	r0, r3
 8009db8:	f7fe fbdc 	bl	8008574 <find_volume>
 8009dbc:	4603      	mov	r3, r0
 8009dbe:	f887 386f 	strb.w	r3, [r7, #2159]	; 0x86f
	if (res == FR_OK) {
 8009dc2:	f897 386f 	ldrb.w	r3, [r7, #2159]	; 0x86f
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	f040 80bd 	bne.w	8009f46 <f_unlink+0x1ae>
		INIT_BUF(dj);
 8009dcc:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 8009dd0:	f107 0208 	add.w	r2, r7, #8
 8009dd4:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
 8009dd8:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 8009ddc:	4a5d      	ldr	r2, [pc, #372]	; (8009f54 <f_unlink+0x1bc>)
 8009dde:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
		res = follow_path(&dj, path);		/* Follow the file path */
 8009de2:	1d3b      	adds	r3, r7, #4
 8009de4:	681a      	ldr	r2, [r3, #0]
 8009de6:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 8009dea:	4611      	mov	r1, r2
 8009dec:	4618      	mov	r0, r3
 8009dee:	f7fe faa5 	bl	800833c <follow_path>
 8009df2:	4603      	mov	r3, r0
 8009df4:	f887 386f 	strb.w	r3, [r7, #2159]	; 0x86f
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT))
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
#if _FS_LOCK
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Cannot remove open object */
 8009df8:	f897 386f 	ldrb.w	r3, [r7, #2159]	; 0x86f
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d108      	bne.n	8009e12 <f_unlink+0x7a>
 8009e00:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 8009e04:	2102      	movs	r1, #2
 8009e06:	4618      	mov	r0, r3
 8009e08:	f7fc fa86 	bl	8006318 <chk_lock>
 8009e0c:	4603      	mov	r3, r0
 8009e0e:	f887 386f 	strb.w	r3, [r7, #2159]	; 0x86f
#endif
		if (res == FR_OK) {					/* The object is accessible */
 8009e12:	f897 386f 	ldrb.w	r3, [r7, #2159]	; 0x86f
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	f040 8095 	bne.w	8009f46 <f_unlink+0x1ae>
			dir = dj.dir;
 8009e1c:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 8009e20:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8009e24:	f8c7 3864 	str.w	r3, [r7, #2148]	; 0x864
			if (!dir) {
 8009e28:	f8d7 3864 	ldr.w	r3, [r7, #2148]	; 0x864
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d103      	bne.n	8009e38 <f_unlink+0xa0>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 8009e30:	2306      	movs	r3, #6
 8009e32:	f887 386f 	strb.w	r3, [r7, #2159]	; 0x86f
 8009e36:	e00a      	b.n	8009e4e <f_unlink+0xb6>
			} else {
				if (dir[DIR_Attr] & AM_RDO)
 8009e38:	f8d7 3864 	ldr.w	r3, [r7, #2148]	; 0x864
 8009e3c:	330b      	adds	r3, #11
 8009e3e:	781b      	ldrb	r3, [r3, #0]
 8009e40:	f003 0301 	and.w	r3, r3, #1
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d002      	beq.n	8009e4e <f_unlink+0xb6>
					res = FR_DENIED;		/* Cannot remove R/O object */
 8009e48:	2307      	movs	r3, #7
 8009e4a:	f887 386f 	strb.w	r3, [r7, #2159]	; 0x86f
			}
			if (res == FR_OK) {
 8009e4e:	f897 386f 	ldrb.w	r3, [r7, #2159]	; 0x86f
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d149      	bne.n	8009eea <f_unlink+0x152>
				dclst = ld_clust(dj.fs, dir);
 8009e56:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 8009e5a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8009e5e:	f8d7 1864 	ldr.w	r1, [r7, #2148]	; 0x864
 8009e62:	4618      	mov	r0, r3
 8009e64:	f7fd fac7 	bl	80073f6 <ld_clust>
 8009e68:	f8c7 0868 	str.w	r0, [r7, #2152]	; 0x868
				if (dclst && (dir[DIR_Attr] & AM_DIR)) {	/* Is it a sub-directory ? */
 8009e6c:	f8d7 3868 	ldr.w	r3, [r7, #2152]	; 0x868
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d03a      	beq.n	8009eea <f_unlink+0x152>
 8009e74:	f8d7 3864 	ldr.w	r3, [r7, #2148]	; 0x864
 8009e78:	330b      	adds	r3, #11
 8009e7a:	781b      	ldrb	r3, [r3, #0]
 8009e7c:	f003 0310 	and.w	r3, r3, #16
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d032      	beq.n	8009eea <f_unlink+0x152>
					if (dclst == dj.fs->cdir) {		 		/* Is it the current directory? */
						res = FR_DENIED;
					} else
#endif
					{
						mem_cpy(&sdj, &dj, sizeof (DIR));	/* Open the sub-directory */
 8009e84:	f207 413c 	addw	r1, r7, #1084	; 0x43c
 8009e88:	f107 0314 	add.w	r3, r7, #20
 8009e8c:	f44f 6285 	mov.w	r2, #1064	; 0x428
 8009e90:	4618      	mov	r0, r3
 8009e92:	f7fc f9c9 	bl	8006228 <mem_cpy>
						sdj.sclust = dclst;
 8009e96:	f107 0314 	add.w	r3, r7, #20
 8009e9a:	f8d7 2868 	ldr.w	r2, [r7, #2152]	; 0x868
 8009e9e:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
						res = dir_sdi(&sdj, 2);
 8009ea2:	f107 0314 	add.w	r3, r7, #20
 8009ea6:	2102      	movs	r1, #2
 8009ea8:	4618      	mov	r0, r3
 8009eaa:	f7fd f88f 	bl	8006fcc <dir_sdi>
 8009eae:	4603      	mov	r3, r0
 8009eb0:	f887 386f 	strb.w	r3, [r7, #2159]	; 0x86f
						if (res == FR_OK) {
 8009eb4:	f897 386f 	ldrb.w	r3, [r7, #2159]	; 0x86f
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d116      	bne.n	8009eea <f_unlink+0x152>
							res = dir_read(&sdj, 0);			/* Read an item (excluding dot entries) */
 8009ebc:	f107 0314 	add.w	r3, r7, #20
 8009ec0:	2100      	movs	r1, #0
 8009ec2:	4618      	mov	r0, r3
 8009ec4:	f7fd fda0 	bl	8007a08 <dir_read>
 8009ec8:	4603      	mov	r3, r0
 8009eca:	f887 386f 	strb.w	r3, [r7, #2159]	; 0x86f
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? (cannot remove) */
 8009ece:	f897 386f 	ldrb.w	r3, [r7, #2159]	; 0x86f
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d102      	bne.n	8009edc <f_unlink+0x144>
 8009ed6:	2307      	movs	r3, #7
 8009ed8:	f887 386f 	strb.w	r3, [r7, #2159]	; 0x86f
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? (can remove) */
 8009edc:	f897 386f 	ldrb.w	r3, [r7, #2159]	; 0x86f
 8009ee0:	2b04      	cmp	r3, #4
 8009ee2:	d102      	bne.n	8009eea <f_unlink+0x152>
 8009ee4:	2300      	movs	r3, #0
 8009ee6:	f887 386f 	strb.w	r3, [r7, #2159]	; 0x86f
						}
					}
				}
			}
			if (res == FR_OK) {
 8009eea:	f897 386f 	ldrb.w	r3, [r7, #2159]	; 0x86f
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d129      	bne.n	8009f46 <f_unlink+0x1ae>
				res = dir_remove(&dj);		/* Remove the directory entry */
 8009ef2:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 8009ef6:	4618      	mov	r0, r3
 8009ef8:	f7fd ff3c 	bl	8007d74 <dir_remove>
 8009efc:	4603      	mov	r3, r0
 8009efe:	f887 386f 	strb.w	r3, [r7, #2159]	; 0x86f
				if (res == FR_OK && dclst)	/* Remove the cluster chain if exist */
 8009f02:	f897 386f 	ldrb.w	r3, [r7, #2159]	; 0x86f
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d10f      	bne.n	8009f2a <f_unlink+0x192>
 8009f0a:	f8d7 3868 	ldr.w	r3, [r7, #2152]	; 0x868
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d00b      	beq.n	8009f2a <f_unlink+0x192>
					res = remove_chain(dj.fs, dclst);
 8009f12:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 8009f16:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8009f1a:	f8d7 1868 	ldr.w	r1, [r7, #2152]	; 0x868
 8009f1e:	4618      	mov	r0, r3
 8009f20:	f7fc ff22 	bl	8006d68 <remove_chain>
 8009f24:	4603      	mov	r3, r0
 8009f26:	f887 386f 	strb.w	r3, [r7, #2159]	; 0x86f
				if (res == FR_OK) res = sync_fs(dj.fs);
 8009f2a:	f897 386f 	ldrb.w	r3, [r7, #2159]	; 0x86f
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d109      	bne.n	8009f46 <f_unlink+0x1ae>
 8009f32:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 8009f36:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8009f3a:	4618      	mov	r0, r3
 8009f3c:	f7fc fc17 	bl	800676e <sync_fs>
 8009f40:	4603      	mov	r3, r0
 8009f42:	f887 386f 	strb.w	r3, [r7, #2159]	; 0x86f
			}
		}
		FREE_BUF();
	}

	LEAVE_FF(dj.fs, res);
 8009f46:	f897 386f 	ldrb.w	r3, [r7, #2159]	; 0x86f
}
 8009f4a:	4618      	mov	r0, r3
 8009f4c:	f507 6707 	add.w	r7, r7, #2160	; 0x870
 8009f50:	46bd      	mov	sp, r7
 8009f52:	bd80      	pop	{r7, pc}
 8009f54:	200002e4 	.word	0x200002e4

08009f58 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 8009f58:	b580      	push	{r7, lr}
 8009f5a:	f5ad 6d8b 	sub.w	sp, sp, #1112	; 0x458
 8009f5e:	af00      	add	r7, sp, #0
 8009f60:	1d3b      	adds	r3, r7, #4
 8009f62:	6018      	str	r0, [r3, #0]
	FRESULT res;
	DIR dj;
	BYTE *dir, n;
	DWORD dsc, dcl, pcl, tm = GET_FATTIME();
 8009f64:	f7fc f866 	bl	8006034 <get_fattime>
 8009f68:	f8c7 0448 	str.w	r0, [r7, #1096]	; 0x448
	DEFINE_NAMEBUF;


	/* Get logical drive number */
	res = find_volume(&dj.fs, &path, 1);
 8009f6c:	1d39      	adds	r1, r7, #4
 8009f6e:	f107 0318 	add.w	r3, r7, #24
 8009f72:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009f76:	2201      	movs	r2, #1
 8009f78:	4618      	mov	r0, r3
 8009f7a:	f7fe fafb 	bl	8008574 <find_volume>
 8009f7e:	4603      	mov	r3, r0
 8009f80:	f887 3457 	strb.w	r3, [r7, #1111]	; 0x457
	if (res == FR_OK) {
 8009f84:	f897 3457 	ldrb.w	r3, [r7, #1111]	; 0x457
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	f040 8179 	bne.w	800a280 <f_mkdir+0x328>
		INIT_BUF(dj);
 8009f8e:	f107 0318 	add.w	r3, r7, #24
 8009f92:	f107 020c 	add.w	r2, r7, #12
 8009f96:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
 8009f9a:	f107 0318 	add.w	r3, r7, #24
 8009f9e:	4abc      	ldr	r2, [pc, #752]	; (800a290 <f_mkdir+0x338>)
 8009fa0:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
		res = follow_path(&dj, path);			/* Follow the file path */
 8009fa4:	1d3b      	adds	r3, r7, #4
 8009fa6:	681a      	ldr	r2, [r3, #0]
 8009fa8:	f107 0318 	add.w	r3, r7, #24
 8009fac:	4611      	mov	r1, r2
 8009fae:	4618      	mov	r0, r3
 8009fb0:	f7fe f9c4 	bl	800833c <follow_path>
 8009fb4:	4603      	mov	r3, r0
 8009fb6:	f887 3457 	strb.w	r3, [r7, #1111]	; 0x457
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 8009fba:	f897 3457 	ldrb.w	r3, [r7, #1111]	; 0x457
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d102      	bne.n	8009fc8 <f_mkdir+0x70>
 8009fc2:	2308      	movs	r3, #8
 8009fc4:	f887 3457 	strb.w	r3, [r7, #1111]	; 0x457
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT))
			res = FR_INVALID_NAME;
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 8009fc8:	f897 3457 	ldrb.w	r3, [r7, #1111]	; 0x457
 8009fcc:	2b04      	cmp	r3, #4
 8009fce:	f040 8157 	bne.w	800a280 <f_mkdir+0x328>
			dcl = create_chain(dj.fs, 0);		/* Allocate a cluster for the new directory table */
 8009fd2:	f107 0318 	add.w	r3, r7, #24
 8009fd6:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8009fda:	2100      	movs	r1, #0
 8009fdc:	4618      	mov	r0, r3
 8009fde:	f7fc ff1d 	bl	8006e1c <create_chain>
 8009fe2:	f8c7 0444 	str.w	r0, [r7, #1092]	; 0x444
			res = FR_OK;
 8009fe6:	2300      	movs	r3, #0
 8009fe8:	f887 3457 	strb.w	r3, [r7, #1111]	; 0x457
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 8009fec:	f8d7 3444 	ldr.w	r3, [r7, #1092]	; 0x444
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d102      	bne.n	8009ffa <f_mkdir+0xa2>
 8009ff4:	2307      	movs	r3, #7
 8009ff6:	f887 3457 	strb.w	r3, [r7, #1111]	; 0x457
			if (dcl == 1) res = FR_INT_ERR;
 8009ffa:	f8d7 3444 	ldr.w	r3, [r7, #1092]	; 0x444
 8009ffe:	2b01      	cmp	r3, #1
 800a000:	d102      	bne.n	800a008 <f_mkdir+0xb0>
 800a002:	2302      	movs	r3, #2
 800a004:	f887 3457 	strb.w	r3, [r7, #1111]	; 0x457
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 800a008:	f8d7 3444 	ldr.w	r3, [r7, #1092]	; 0x444
 800a00c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a010:	d102      	bne.n	800a018 <f_mkdir+0xc0>
 800a012:	2301      	movs	r3, #1
 800a014:	f887 3457 	strb.w	r3, [r7, #1111]	; 0x457
			if (res == FR_OK)					/* Flush FAT */
 800a018:	f897 3457 	ldrb.w	r3, [r7, #1111]	; 0x457
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d109      	bne.n	800a034 <f_mkdir+0xdc>
				res = sync_window(dj.fs);
 800a020:	f107 0318 	add.w	r3, r7, #24
 800a024:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800a028:	4618      	mov	r0, r3
 800a02a:	f7fc fb29 	bl	8006680 <sync_window>
 800a02e:	4603      	mov	r3, r0
 800a030:	f887 3457 	strb.w	r3, [r7, #1111]	; 0x457
			if (res == FR_OK) {					/* Initialize the new directory table */
 800a034:	f897 3457 	ldrb.w	r3, [r7, #1111]	; 0x457
 800a038:	2b00      	cmp	r3, #0
 800a03a:	f040 80c4 	bne.w	800a1c6 <f_mkdir+0x26e>
				dsc = clust2sect(dj.fs, dcl);
 800a03e:	f107 0318 	add.w	r3, r7, #24
 800a042:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800a046:	f8d7 1444 	ldr.w	r1, [r7, #1092]	; 0x444
 800a04a:	4618      	mov	r0, r3
 800a04c:	f7fc fc3d 	bl	80068ca <clust2sect>
 800a050:	f8c7 0450 	str.w	r0, [r7, #1104]	; 0x450
				dir = dj.fs->win.d8;
 800a054:	f107 0318 	add.w	r3, r7, #24
 800a058:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800a05c:	f8c7 3440 	str.w	r3, [r7, #1088]	; 0x440
				mem_set(dir, 0, SS(dj.fs));
 800a060:	f107 0318 	add.w	r3, r7, #24
 800a064:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800a068:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800a06c:	461a      	mov	r2, r3
 800a06e:	2100      	movs	r1, #0
 800a070:	f8d7 0440 	ldr.w	r0, [r7, #1088]	; 0x440
 800a074:	f7fc f8f6 	bl	8006264 <mem_set>
				mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 800a078:	220b      	movs	r2, #11
 800a07a:	2120      	movs	r1, #32
 800a07c:	f8d7 0440 	ldr.w	r0, [r7, #1088]	; 0x440
 800a080:	f7fc f8f0 	bl	8006264 <mem_set>
				dir[DIR_Name] = '.';
 800a084:	f8d7 3440 	ldr.w	r3, [r7, #1088]	; 0x440
 800a088:	222e      	movs	r2, #46	; 0x2e
 800a08a:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = AM_DIR;
 800a08c:	f8d7 3440 	ldr.w	r3, [r7, #1088]	; 0x440
 800a090:	330b      	adds	r3, #11
 800a092:	2210      	movs	r2, #16
 800a094:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_WrtTime, tm);
 800a096:	f8d7 3440 	ldr.w	r3, [r7, #1088]	; 0x440
 800a09a:	3316      	adds	r3, #22
 800a09c:	f8d7 2448 	ldr.w	r2, [r7, #1096]	; 0x448
 800a0a0:	b2d2      	uxtb	r2, r2
 800a0a2:	701a      	strb	r2, [r3, #0]
 800a0a4:	f8d7 3448 	ldr.w	r3, [r7, #1096]	; 0x448
 800a0a8:	b29b      	uxth	r3, r3
 800a0aa:	0a1b      	lsrs	r3, r3, #8
 800a0ac:	b29a      	uxth	r2, r3
 800a0ae:	f8d7 3440 	ldr.w	r3, [r7, #1088]	; 0x440
 800a0b2:	3317      	adds	r3, #23
 800a0b4:	b2d2      	uxtb	r2, r2
 800a0b6:	701a      	strb	r2, [r3, #0]
 800a0b8:	f8d7 3448 	ldr.w	r3, [r7, #1096]	; 0x448
 800a0bc:	0c1a      	lsrs	r2, r3, #16
 800a0be:	f8d7 3440 	ldr.w	r3, [r7, #1088]	; 0x440
 800a0c2:	3318      	adds	r3, #24
 800a0c4:	b2d2      	uxtb	r2, r2
 800a0c6:	701a      	strb	r2, [r3, #0]
 800a0c8:	f8d7 3448 	ldr.w	r3, [r7, #1096]	; 0x448
 800a0cc:	0e1a      	lsrs	r2, r3, #24
 800a0ce:	f8d7 3440 	ldr.w	r3, [r7, #1088]	; 0x440
 800a0d2:	3319      	adds	r3, #25
 800a0d4:	b2d2      	uxtb	r2, r2
 800a0d6:	701a      	strb	r2, [r3, #0]
				st_clust(dir, dcl);
 800a0d8:	f8d7 1444 	ldr.w	r1, [r7, #1092]	; 0x444
 800a0dc:	f8d7 0440 	ldr.w	r0, [r7, #1088]	; 0x440
 800a0e0:	f7fd f9b6 	bl	8007450 <st_clust>
				mem_cpy(dir + SZ_DIRE, dir, SZ_DIRE); 	/* Create ".." entry */
 800a0e4:	f8d7 3440 	ldr.w	r3, [r7, #1088]	; 0x440
 800a0e8:	3320      	adds	r3, #32
 800a0ea:	2220      	movs	r2, #32
 800a0ec:	f8d7 1440 	ldr.w	r1, [r7, #1088]	; 0x440
 800a0f0:	4618      	mov	r0, r3
 800a0f2:	f7fc f899 	bl	8006228 <mem_cpy>
				dir[SZ_DIRE + 1] = '.'; pcl = dj.sclust;
 800a0f6:	f8d7 3440 	ldr.w	r3, [r7, #1088]	; 0x440
 800a0fa:	3321      	adds	r3, #33	; 0x21
 800a0fc:	222e      	movs	r2, #46	; 0x2e
 800a0fe:	701a      	strb	r2, [r3, #0]
 800a100:	f107 0318 	add.w	r3, r7, #24
 800a104:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800a108:	f8c7 344c 	str.w	r3, [r7, #1100]	; 0x44c
				if (dj.fs->fs_type == FS_FAT32 && pcl == dj.fs->dirbase)
 800a10c:	f107 0318 	add.w	r3, r7, #24
 800a110:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800a114:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 800a118:	2b03      	cmp	r3, #3
 800a11a:	d10c      	bne.n	800a136 <f_mkdir+0x1de>
 800a11c:	f107 0318 	add.w	r3, r7, #24
 800a120:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800a124:	f8d3 3424 	ldr.w	r3, [r3, #1060]	; 0x424
 800a128:	f8d7 244c 	ldr.w	r2, [r7, #1100]	; 0x44c
 800a12c:	429a      	cmp	r2, r3
 800a12e:	d102      	bne.n	800a136 <f_mkdir+0x1de>
					pcl = 0;
 800a130:	2300      	movs	r3, #0
 800a132:	f8c7 344c 	str.w	r3, [r7, #1100]	; 0x44c
				st_clust(dir + SZ_DIRE, pcl);
 800a136:	f8d7 3440 	ldr.w	r3, [r7, #1088]	; 0x440
 800a13a:	3320      	adds	r3, #32
 800a13c:	f8d7 144c 	ldr.w	r1, [r7, #1100]	; 0x44c
 800a140:	4618      	mov	r0, r3
 800a142:	f7fd f985 	bl	8007450 <st_clust>
				for (n = dj.fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 800a146:	f107 0318 	add.w	r3, r7, #24
 800a14a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800a14e:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 800a152:	f887 3456 	strb.w	r3, [r7, #1110]	; 0x456
 800a156:	e030      	b.n	800a1ba <f_mkdir+0x262>
					dj.fs->winsect = dsc++;
 800a158:	f8d7 3450 	ldr.w	r3, [r7, #1104]	; 0x450
 800a15c:	1c5a      	adds	r2, r3, #1
 800a15e:	f8c7 2450 	str.w	r2, [r7, #1104]	; 0x450
 800a162:	f107 0218 	add.w	r2, r7, #24
 800a166:	f8d2 2400 	ldr.w	r2, [r2, #1024]	; 0x400
 800a16a:	f8c2 342c 	str.w	r3, [r2, #1068]	; 0x42c
					dj.fs->wflag = 1;
 800a16e:	f107 0318 	add.w	r3, r7, #24
 800a172:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800a176:	2201      	movs	r2, #1
 800a178:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
					res = sync_window(dj.fs);
 800a17c:	f107 0318 	add.w	r3, r7, #24
 800a180:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800a184:	4618      	mov	r0, r3
 800a186:	f7fc fa7b 	bl	8006680 <sync_window>
 800a18a:	4603      	mov	r3, r0
 800a18c:	f887 3457 	strb.w	r3, [r7, #1111]	; 0x457
					if (res != FR_OK) break;
 800a190:	f897 3457 	ldrb.w	r3, [r7, #1111]	; 0x457
 800a194:	2b00      	cmp	r3, #0
 800a196:	d115      	bne.n	800a1c4 <f_mkdir+0x26c>
					mem_set(dir, 0, SS(dj.fs));
 800a198:	f107 0318 	add.w	r3, r7, #24
 800a19c:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800a1a0:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800a1a4:	461a      	mov	r2, r3
 800a1a6:	2100      	movs	r1, #0
 800a1a8:	f8d7 0440 	ldr.w	r0, [r7, #1088]	; 0x440
 800a1ac:	f7fc f85a 	bl	8006264 <mem_set>
				for (n = dj.fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 800a1b0:	f897 3456 	ldrb.w	r3, [r7, #1110]	; 0x456
 800a1b4:	3b01      	subs	r3, #1
 800a1b6:	f887 3456 	strb.w	r3, [r7, #1110]	; 0x456
 800a1ba:	f897 3456 	ldrb.w	r3, [r7, #1110]	; 0x456
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d1ca      	bne.n	800a158 <f_mkdir+0x200>
 800a1c2:	e000      	b.n	800a1c6 <f_mkdir+0x26e>
					if (res != FR_OK) break;
 800a1c4:	bf00      	nop
				}
			}
			if (res == FR_OK) res = dir_register(&dj);	/* Register the object to the directoy */
 800a1c6:	f897 3457 	ldrb.w	r3, [r7, #1111]	; 0x457
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d107      	bne.n	800a1de <f_mkdir+0x286>
 800a1ce:	f107 0318 	add.w	r3, r7, #24
 800a1d2:	4618      	mov	r0, r3
 800a1d4:	f7fd fcc0 	bl	8007b58 <dir_register>
 800a1d8:	4603      	mov	r3, r0
 800a1da:	f887 3457 	strb.w	r3, [r7, #1111]	; 0x457
			if (res != FR_OK) {
 800a1de:	f897 3457 	ldrb.w	r3, [r7, #1111]	; 0x457
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d009      	beq.n	800a1fa <f_mkdir+0x2a2>
				remove_chain(dj.fs, dcl);			/* Could not register, remove cluster chain */
 800a1e6:	f107 0318 	add.w	r3, r7, #24
 800a1ea:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800a1ee:	f8d7 1444 	ldr.w	r1, [r7, #1092]	; 0x444
 800a1f2:	4618      	mov	r0, r3
 800a1f4:	f7fc fdb8 	bl	8006d68 <remove_chain>
 800a1f8:	e042      	b.n	800a280 <f_mkdir+0x328>
			} else {
				dir = dj.dir;
 800a1fa:	f107 0318 	add.w	r3, r7, #24
 800a1fe:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 800a202:	f8c7 3440 	str.w	r3, [r7, #1088]	; 0x440
				dir[DIR_Attr] = AM_DIR;				/* Attribute */
 800a206:	f8d7 3440 	ldr.w	r3, [r7, #1088]	; 0x440
 800a20a:	330b      	adds	r3, #11
 800a20c:	2210      	movs	r2, #16
 800a20e:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_WrtTime, tm);	/* Created time */
 800a210:	f8d7 3440 	ldr.w	r3, [r7, #1088]	; 0x440
 800a214:	3316      	adds	r3, #22
 800a216:	f8d7 2448 	ldr.w	r2, [r7, #1096]	; 0x448
 800a21a:	b2d2      	uxtb	r2, r2
 800a21c:	701a      	strb	r2, [r3, #0]
 800a21e:	f8d7 3448 	ldr.w	r3, [r7, #1096]	; 0x448
 800a222:	b29b      	uxth	r3, r3
 800a224:	0a1b      	lsrs	r3, r3, #8
 800a226:	b29a      	uxth	r2, r3
 800a228:	f8d7 3440 	ldr.w	r3, [r7, #1088]	; 0x440
 800a22c:	3317      	adds	r3, #23
 800a22e:	b2d2      	uxtb	r2, r2
 800a230:	701a      	strb	r2, [r3, #0]
 800a232:	f8d7 3448 	ldr.w	r3, [r7, #1096]	; 0x448
 800a236:	0c1a      	lsrs	r2, r3, #16
 800a238:	f8d7 3440 	ldr.w	r3, [r7, #1088]	; 0x440
 800a23c:	3318      	adds	r3, #24
 800a23e:	b2d2      	uxtb	r2, r2
 800a240:	701a      	strb	r2, [r3, #0]
 800a242:	f8d7 3448 	ldr.w	r3, [r7, #1096]	; 0x448
 800a246:	0e1a      	lsrs	r2, r3, #24
 800a248:	f8d7 3440 	ldr.w	r3, [r7, #1088]	; 0x440
 800a24c:	3319      	adds	r3, #25
 800a24e:	b2d2      	uxtb	r2, r2
 800a250:	701a      	strb	r2, [r3, #0]
				st_clust(dir, dcl);					/* Table start cluster */
 800a252:	f8d7 1444 	ldr.w	r1, [r7, #1092]	; 0x444
 800a256:	f8d7 0440 	ldr.w	r0, [r7, #1088]	; 0x440
 800a25a:	f7fd f8f9 	bl	8007450 <st_clust>
				dj.fs->wflag = 1;
 800a25e:	f107 0318 	add.w	r3, r7, #24
 800a262:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800a266:	2201      	movs	r2, #1
 800a268:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
				res = sync_fs(dj.fs);
 800a26c:	f107 0318 	add.w	r3, r7, #24
 800a270:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800a274:	4618      	mov	r0, r3
 800a276:	f7fc fa7a 	bl	800676e <sync_fs>
 800a27a:	4603      	mov	r3, r0
 800a27c:	f887 3457 	strb.w	r3, [r7, #1111]	; 0x457
			}
		}
		FREE_BUF();
	}

	LEAVE_FF(dj.fs, res);
 800a280:	f897 3457 	ldrb.w	r3, [r7, #1111]	; 0x457
}
 800a284:	4618      	mov	r0, r3
 800a286:	f507 678b 	add.w	r7, r7, #1112	; 0x458
 800a28a:	46bd      	mov	sp, r7
 800a28c:	bd80      	pop	{r7, pc}
 800a28e:	bf00      	nop
 800a290:	200002e4 	.word	0x200002e4

0800a294 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800a294:	b480      	push	{r7}
 800a296:	b087      	sub	sp, #28
 800a298:	af00      	add	r7, sp, #0
 800a29a:	60f8      	str	r0, [r7, #12]
 800a29c:	60b9      	str	r1, [r7, #8]
 800a29e:	4613      	mov	r3, r2
 800a2a0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800a2a2:	2301      	movs	r3, #1
 800a2a4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800a2a6:	2300      	movs	r3, #0
 800a2a8:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 800a2aa:	4b1e      	ldr	r3, [pc, #120]	; (800a324 <FATFS_LinkDriverEx+0x90>)
 800a2ac:	7a5b      	ldrb	r3, [r3, #9]
 800a2ae:	b2db      	uxtb	r3, r3
 800a2b0:	2b01      	cmp	r3, #1
 800a2b2:	d831      	bhi.n	800a318 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800a2b4:	4b1b      	ldr	r3, [pc, #108]	; (800a324 <FATFS_LinkDriverEx+0x90>)
 800a2b6:	7a5b      	ldrb	r3, [r3, #9]
 800a2b8:	b2db      	uxtb	r3, r3
 800a2ba:	461a      	mov	r2, r3
 800a2bc:	4b19      	ldr	r3, [pc, #100]	; (800a324 <FATFS_LinkDriverEx+0x90>)
 800a2be:	2100      	movs	r1, #0
 800a2c0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 800a2c2:	4b18      	ldr	r3, [pc, #96]	; (800a324 <FATFS_LinkDriverEx+0x90>)
 800a2c4:	7a5b      	ldrb	r3, [r3, #9]
 800a2c6:	b2db      	uxtb	r3, r3
 800a2c8:	4a16      	ldr	r2, [pc, #88]	; (800a324 <FATFS_LinkDriverEx+0x90>)
 800a2ca:	009b      	lsls	r3, r3, #2
 800a2cc:	4413      	add	r3, r2
 800a2ce:	68fa      	ldr	r2, [r7, #12]
 800a2d0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 800a2d2:	4b14      	ldr	r3, [pc, #80]	; (800a324 <FATFS_LinkDriverEx+0x90>)
 800a2d4:	7a5b      	ldrb	r3, [r3, #9]
 800a2d6:	b2db      	uxtb	r3, r3
 800a2d8:	461a      	mov	r2, r3
 800a2da:	4b12      	ldr	r3, [pc, #72]	; (800a324 <FATFS_LinkDriverEx+0x90>)
 800a2dc:	4413      	add	r3, r2
 800a2de:	79fa      	ldrb	r2, [r7, #7]
 800a2e0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800a2e2:	4b10      	ldr	r3, [pc, #64]	; (800a324 <FATFS_LinkDriverEx+0x90>)
 800a2e4:	7a5b      	ldrb	r3, [r3, #9]
 800a2e6:	b2db      	uxtb	r3, r3
 800a2e8:	1c5a      	adds	r2, r3, #1
 800a2ea:	b2d1      	uxtb	r1, r2
 800a2ec:	4a0d      	ldr	r2, [pc, #52]	; (800a324 <FATFS_LinkDriverEx+0x90>)
 800a2ee:	7251      	strb	r1, [r2, #9]
 800a2f0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800a2f2:	7dbb      	ldrb	r3, [r7, #22]
 800a2f4:	3330      	adds	r3, #48	; 0x30
 800a2f6:	b2da      	uxtb	r2, r3
 800a2f8:	68bb      	ldr	r3, [r7, #8]
 800a2fa:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800a2fc:	68bb      	ldr	r3, [r7, #8]
 800a2fe:	3301      	adds	r3, #1
 800a300:	223a      	movs	r2, #58	; 0x3a
 800a302:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800a304:	68bb      	ldr	r3, [r7, #8]
 800a306:	3302      	adds	r3, #2
 800a308:	222f      	movs	r2, #47	; 0x2f
 800a30a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800a30c:	68bb      	ldr	r3, [r7, #8]
 800a30e:	3303      	adds	r3, #3
 800a310:	2200      	movs	r2, #0
 800a312:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800a314:	2300      	movs	r3, #0
 800a316:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 800a318:	7dfb      	ldrb	r3, [r7, #23]
}
 800a31a:	4618      	mov	r0, r3
 800a31c:	371c      	adds	r7, #28
 800a31e:	46bd      	mov	sp, r7
 800a320:	bc80      	pop	{r7}
 800a322:	4770      	bx	lr
 800a324:	200004e4 	.word	0x200004e4

0800a328 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 800a328:	b580      	push	{r7, lr}
 800a32a:	b082      	sub	sp, #8
 800a32c:	af00      	add	r7, sp, #0
 800a32e:	6078      	str	r0, [r7, #4]
 800a330:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800a332:	2200      	movs	r2, #0
 800a334:	6839      	ldr	r1, [r7, #0]
 800a336:	6878      	ldr	r0, [r7, #4]
 800a338:	f7ff ffac 	bl	800a294 <FATFS_LinkDriverEx>
 800a33c:	4603      	mov	r3, r0
}
 800a33e:	4618      	mov	r0, r3
 800a340:	3708      	adds	r7, #8
 800a342:	46bd      	mov	sp, r7
 800a344:	bd80      	pop	{r7, pc}
	...

0800a348 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEMCP, 1: OEMCP to Unicode */
)
{
 800a348:	b480      	push	{r7}
 800a34a:	b085      	sub	sp, #20
 800a34c:	af00      	add	r7, sp, #0
 800a34e:	4603      	mov	r3, r0
 800a350:	6039      	str	r1, [r7, #0]
 800a352:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800a354:	88fb      	ldrh	r3, [r7, #6]
 800a356:	2b7f      	cmp	r3, #127	; 0x7f
 800a358:	d802      	bhi.n	800a360 <ff_convert+0x18>
		c = chr;
 800a35a:	88fb      	ldrh	r3, [r7, #6]
 800a35c:	81fb      	strh	r3, [r7, #14]
 800a35e:	e025      	b.n	800a3ac <ff_convert+0x64>

	} else {
		if (dir) {		/* OEMCP to Unicode */
 800a360:	683b      	ldr	r3, [r7, #0]
 800a362:	2b00      	cmp	r3, #0
 800a364:	d00b      	beq.n	800a37e <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800a366:	88fb      	ldrh	r3, [r7, #6]
 800a368:	2bff      	cmp	r3, #255	; 0xff
 800a36a:	d805      	bhi.n	800a378 <ff_convert+0x30>
 800a36c:	88fb      	ldrh	r3, [r7, #6]
 800a36e:	3b80      	subs	r3, #128	; 0x80
 800a370:	4a11      	ldr	r2, [pc, #68]	; (800a3b8 <ff_convert+0x70>)
 800a372:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a376:	e000      	b.n	800a37a <ff_convert+0x32>
 800a378:	2300      	movs	r3, #0
 800a37a:	81fb      	strh	r3, [r7, #14]
 800a37c:	e016      	b.n	800a3ac <ff_convert+0x64>

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
 800a37e:	2300      	movs	r3, #0
 800a380:	81fb      	strh	r3, [r7, #14]
 800a382:	e009      	b.n	800a398 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800a384:	89fb      	ldrh	r3, [r7, #14]
 800a386:	4a0c      	ldr	r2, [pc, #48]	; (800a3b8 <ff_convert+0x70>)
 800a388:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a38c:	88fa      	ldrh	r2, [r7, #6]
 800a38e:	429a      	cmp	r2, r3
 800a390:	d006      	beq.n	800a3a0 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800a392:	89fb      	ldrh	r3, [r7, #14]
 800a394:	3301      	adds	r3, #1
 800a396:	81fb      	strh	r3, [r7, #14]
 800a398:	89fb      	ldrh	r3, [r7, #14]
 800a39a:	2b7f      	cmp	r3, #127	; 0x7f
 800a39c:	d9f2      	bls.n	800a384 <ff_convert+0x3c>
 800a39e:	e000      	b.n	800a3a2 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800a3a0:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800a3a2:	89fb      	ldrh	r3, [r7, #14]
 800a3a4:	3380      	adds	r3, #128	; 0x80
 800a3a6:	b29b      	uxth	r3, r3
 800a3a8:	b2db      	uxtb	r3, r3
 800a3aa:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800a3ac:	89fb      	ldrh	r3, [r7, #14]
}
 800a3ae:	4618      	mov	r0, r3
 800a3b0:	3714      	adds	r7, #20
 800a3b2:	46bd      	mov	sp, r7
 800a3b4:	bc80      	pop	{r7}
 800a3b6:	4770      	bx	lr
 800a3b8:	0800d938 	.word	0x0800d938

0800a3bc <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Upper converted character */
	WCHAR chr		/* Input character */
)
{
 800a3bc:	b480      	push	{r7}
 800a3be:	b085      	sub	sp, #20
 800a3c0:	af00      	add	r7, sp, #0
 800a3c2:	4603      	mov	r3, r0
 800a3c4:	80fb      	strh	r3, [r7, #6]
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
 800a3c6:	2300      	movs	r3, #0
 800a3c8:	60fb      	str	r3, [r7, #12]
 800a3ca:	e002      	b.n	800a3d2 <ff_wtoupper+0x16>
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	3301      	adds	r3, #1
 800a3d0:	60fb      	str	r3, [r7, #12]
 800a3d2:	4a0f      	ldr	r2, [pc, #60]	; (800a410 <ff_wtoupper+0x54>)
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d006      	beq.n	800a3ec <ff_wtoupper+0x30>
 800a3de:	4a0c      	ldr	r2, [pc, #48]	; (800a410 <ff_wtoupper+0x54>)
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a3e6:	88fa      	ldrh	r2, [r7, #6]
 800a3e8:	429a      	cmp	r2, r3
 800a3ea:	d1ef      	bne.n	800a3cc <ff_wtoupper+0x10>

	return tbl_lower[i] ? tbl_upper[i] : chr;
 800a3ec:	4a08      	ldr	r2, [pc, #32]	; (800a410 <ff_wtoupper+0x54>)
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d004      	beq.n	800a402 <ff_wtoupper+0x46>
 800a3f8:	4a06      	ldr	r2, [pc, #24]	; (800a414 <ff_wtoupper+0x58>)
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a400:	e000      	b.n	800a404 <ff_wtoupper+0x48>
 800a402:	88fb      	ldrh	r3, [r7, #6]
}
 800a404:	4618      	mov	r0, r3
 800a406:	3714      	adds	r7, #20
 800a408:	46bd      	mov	sp, r7
 800a40a:	bc80      	pop	{r7}
 800a40c:	4770      	bx	lr
 800a40e:	bf00      	nop
 800a410:	0800da38 	.word	0x0800da38
 800a414:	0800dc18 	.word	0x0800dc18

0800a418 <__errno>:
 800a418:	4b01      	ldr	r3, [pc, #4]	; (800a420 <__errno+0x8>)
 800a41a:	6818      	ldr	r0, [r3, #0]
 800a41c:	4770      	bx	lr
 800a41e:	bf00      	nop
 800a420:	20000034 	.word	0x20000034

0800a424 <__libc_init_array>:
 800a424:	b570      	push	{r4, r5, r6, lr}
 800a426:	2600      	movs	r6, #0
 800a428:	4d0c      	ldr	r5, [pc, #48]	; (800a45c <__libc_init_array+0x38>)
 800a42a:	4c0d      	ldr	r4, [pc, #52]	; (800a460 <__libc_init_array+0x3c>)
 800a42c:	1b64      	subs	r4, r4, r5
 800a42e:	10a4      	asrs	r4, r4, #2
 800a430:	42a6      	cmp	r6, r4
 800a432:	d109      	bne.n	800a448 <__libc_init_array+0x24>
 800a434:	f002 feda 	bl	800d1ec <_init>
 800a438:	2600      	movs	r6, #0
 800a43a:	4d0a      	ldr	r5, [pc, #40]	; (800a464 <__libc_init_array+0x40>)
 800a43c:	4c0a      	ldr	r4, [pc, #40]	; (800a468 <__libc_init_array+0x44>)
 800a43e:	1b64      	subs	r4, r4, r5
 800a440:	10a4      	asrs	r4, r4, #2
 800a442:	42a6      	cmp	r6, r4
 800a444:	d105      	bne.n	800a452 <__libc_init_array+0x2e>
 800a446:	bd70      	pop	{r4, r5, r6, pc}
 800a448:	f855 3b04 	ldr.w	r3, [r5], #4
 800a44c:	4798      	blx	r3
 800a44e:	3601      	adds	r6, #1
 800a450:	e7ee      	b.n	800a430 <__libc_init_array+0xc>
 800a452:	f855 3b04 	ldr.w	r3, [r5], #4
 800a456:	4798      	blx	r3
 800a458:	3601      	adds	r6, #1
 800a45a:	e7f2      	b.n	800a442 <__libc_init_array+0x1e>
 800a45c:	0800e1dc 	.word	0x0800e1dc
 800a460:	0800e1dc 	.word	0x0800e1dc
 800a464:	0800e1dc 	.word	0x0800e1dc
 800a468:	0800e1e0 	.word	0x0800e1e0

0800a46c <memccpy>:
 800a46c:	b510      	push	{r4, lr}
 800a46e:	b2d2      	uxtb	r2, r2
 800a470:	3901      	subs	r1, #1
 800a472:	4403      	add	r3, r0
 800a474:	4298      	cmp	r0, r3
 800a476:	d101      	bne.n	800a47c <memccpy+0x10>
 800a478:	2000      	movs	r0, #0
 800a47a:	e005      	b.n	800a488 <memccpy+0x1c>
 800a47c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800a480:	4294      	cmp	r4, r2
 800a482:	f800 4b01 	strb.w	r4, [r0], #1
 800a486:	d1f5      	bne.n	800a474 <memccpy+0x8>
 800a488:	bd10      	pop	{r4, pc}

0800a48a <memset>:
 800a48a:	4603      	mov	r3, r0
 800a48c:	4402      	add	r2, r0
 800a48e:	4293      	cmp	r3, r2
 800a490:	d100      	bne.n	800a494 <memset+0xa>
 800a492:	4770      	bx	lr
 800a494:	f803 1b01 	strb.w	r1, [r3], #1
 800a498:	e7f9      	b.n	800a48e <memset+0x4>

0800a49a <__cvt>:
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a4a0:	461f      	mov	r7, r3
 800a4a2:	bfbb      	ittet	lt
 800a4a4:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800a4a8:	461f      	movlt	r7, r3
 800a4aa:	2300      	movge	r3, #0
 800a4ac:	232d      	movlt	r3, #45	; 0x2d
 800a4ae:	b088      	sub	sp, #32
 800a4b0:	4614      	mov	r4, r2
 800a4b2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a4b4:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800a4b6:	7013      	strb	r3, [r2, #0]
 800a4b8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a4ba:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800a4be:	f023 0820 	bic.w	r8, r3, #32
 800a4c2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a4c6:	d005      	beq.n	800a4d4 <__cvt+0x3a>
 800a4c8:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800a4cc:	d100      	bne.n	800a4d0 <__cvt+0x36>
 800a4ce:	3501      	adds	r5, #1
 800a4d0:	2302      	movs	r3, #2
 800a4d2:	e000      	b.n	800a4d6 <__cvt+0x3c>
 800a4d4:	2303      	movs	r3, #3
 800a4d6:	aa07      	add	r2, sp, #28
 800a4d8:	9204      	str	r2, [sp, #16]
 800a4da:	aa06      	add	r2, sp, #24
 800a4dc:	e9cd a202 	strd	sl, r2, [sp, #8]
 800a4e0:	e9cd 3500 	strd	r3, r5, [sp]
 800a4e4:	4622      	mov	r2, r4
 800a4e6:	463b      	mov	r3, r7
 800a4e8:	f000 fcf6 	bl	800aed8 <_dtoa_r>
 800a4ec:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a4f0:	4606      	mov	r6, r0
 800a4f2:	d102      	bne.n	800a4fa <__cvt+0x60>
 800a4f4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a4f6:	07db      	lsls	r3, r3, #31
 800a4f8:	d522      	bpl.n	800a540 <__cvt+0xa6>
 800a4fa:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a4fe:	eb06 0905 	add.w	r9, r6, r5
 800a502:	d110      	bne.n	800a526 <__cvt+0x8c>
 800a504:	7833      	ldrb	r3, [r6, #0]
 800a506:	2b30      	cmp	r3, #48	; 0x30
 800a508:	d10a      	bne.n	800a520 <__cvt+0x86>
 800a50a:	2200      	movs	r2, #0
 800a50c:	2300      	movs	r3, #0
 800a50e:	4620      	mov	r0, r4
 800a510:	4639      	mov	r1, r7
 800a512:	f7f6 fa53 	bl	80009bc <__aeabi_dcmpeq>
 800a516:	b918      	cbnz	r0, 800a520 <__cvt+0x86>
 800a518:	f1c5 0501 	rsb	r5, r5, #1
 800a51c:	f8ca 5000 	str.w	r5, [sl]
 800a520:	f8da 3000 	ldr.w	r3, [sl]
 800a524:	4499      	add	r9, r3
 800a526:	2200      	movs	r2, #0
 800a528:	2300      	movs	r3, #0
 800a52a:	4620      	mov	r0, r4
 800a52c:	4639      	mov	r1, r7
 800a52e:	f7f6 fa45 	bl	80009bc <__aeabi_dcmpeq>
 800a532:	b108      	cbz	r0, 800a538 <__cvt+0x9e>
 800a534:	f8cd 901c 	str.w	r9, [sp, #28]
 800a538:	2230      	movs	r2, #48	; 0x30
 800a53a:	9b07      	ldr	r3, [sp, #28]
 800a53c:	454b      	cmp	r3, r9
 800a53e:	d307      	bcc.n	800a550 <__cvt+0xb6>
 800a540:	4630      	mov	r0, r6
 800a542:	9b07      	ldr	r3, [sp, #28]
 800a544:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a546:	1b9b      	subs	r3, r3, r6
 800a548:	6013      	str	r3, [r2, #0]
 800a54a:	b008      	add	sp, #32
 800a54c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a550:	1c59      	adds	r1, r3, #1
 800a552:	9107      	str	r1, [sp, #28]
 800a554:	701a      	strb	r2, [r3, #0]
 800a556:	e7f0      	b.n	800a53a <__cvt+0xa0>

0800a558 <__exponent>:
 800a558:	4603      	mov	r3, r0
 800a55a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a55c:	2900      	cmp	r1, #0
 800a55e:	f803 2b02 	strb.w	r2, [r3], #2
 800a562:	bfb6      	itet	lt
 800a564:	222d      	movlt	r2, #45	; 0x2d
 800a566:	222b      	movge	r2, #43	; 0x2b
 800a568:	4249      	neglt	r1, r1
 800a56a:	2909      	cmp	r1, #9
 800a56c:	7042      	strb	r2, [r0, #1]
 800a56e:	dd2b      	ble.n	800a5c8 <__exponent+0x70>
 800a570:	f10d 0407 	add.w	r4, sp, #7
 800a574:	46a4      	mov	ip, r4
 800a576:	270a      	movs	r7, #10
 800a578:	fb91 f6f7 	sdiv	r6, r1, r7
 800a57c:	460a      	mov	r2, r1
 800a57e:	46a6      	mov	lr, r4
 800a580:	fb07 1516 	mls	r5, r7, r6, r1
 800a584:	2a63      	cmp	r2, #99	; 0x63
 800a586:	f105 0530 	add.w	r5, r5, #48	; 0x30
 800a58a:	4631      	mov	r1, r6
 800a58c:	f104 34ff 	add.w	r4, r4, #4294967295
 800a590:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800a594:	dcf0      	bgt.n	800a578 <__exponent+0x20>
 800a596:	3130      	adds	r1, #48	; 0x30
 800a598:	f1ae 0502 	sub.w	r5, lr, #2
 800a59c:	f804 1c01 	strb.w	r1, [r4, #-1]
 800a5a0:	4629      	mov	r1, r5
 800a5a2:	1c44      	adds	r4, r0, #1
 800a5a4:	4561      	cmp	r1, ip
 800a5a6:	d30a      	bcc.n	800a5be <__exponent+0x66>
 800a5a8:	f10d 0209 	add.w	r2, sp, #9
 800a5ac:	eba2 020e 	sub.w	r2, r2, lr
 800a5b0:	4565      	cmp	r5, ip
 800a5b2:	bf88      	it	hi
 800a5b4:	2200      	movhi	r2, #0
 800a5b6:	4413      	add	r3, r2
 800a5b8:	1a18      	subs	r0, r3, r0
 800a5ba:	b003      	add	sp, #12
 800a5bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a5be:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a5c2:	f804 2f01 	strb.w	r2, [r4, #1]!
 800a5c6:	e7ed      	b.n	800a5a4 <__exponent+0x4c>
 800a5c8:	2330      	movs	r3, #48	; 0x30
 800a5ca:	3130      	adds	r1, #48	; 0x30
 800a5cc:	7083      	strb	r3, [r0, #2]
 800a5ce:	70c1      	strb	r1, [r0, #3]
 800a5d0:	1d03      	adds	r3, r0, #4
 800a5d2:	e7f1      	b.n	800a5b8 <__exponent+0x60>

0800a5d4 <_printf_float>:
 800a5d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5d8:	b091      	sub	sp, #68	; 0x44
 800a5da:	460c      	mov	r4, r1
 800a5dc:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800a5e0:	4616      	mov	r6, r2
 800a5e2:	461f      	mov	r7, r3
 800a5e4:	4605      	mov	r5, r0
 800a5e6:	f001 fa65 	bl	800bab4 <_localeconv_r>
 800a5ea:	6803      	ldr	r3, [r0, #0]
 800a5ec:	4618      	mov	r0, r3
 800a5ee:	9309      	str	r3, [sp, #36]	; 0x24
 800a5f0:	f7f5 fdb8 	bl	8000164 <strlen>
 800a5f4:	2300      	movs	r3, #0
 800a5f6:	930e      	str	r3, [sp, #56]	; 0x38
 800a5f8:	f8d8 3000 	ldr.w	r3, [r8]
 800a5fc:	900a      	str	r0, [sp, #40]	; 0x28
 800a5fe:	3307      	adds	r3, #7
 800a600:	f023 0307 	bic.w	r3, r3, #7
 800a604:	f103 0208 	add.w	r2, r3, #8
 800a608:	f894 9018 	ldrb.w	r9, [r4, #24]
 800a60c:	f8d4 b000 	ldr.w	fp, [r4]
 800a610:	f8c8 2000 	str.w	r2, [r8]
 800a614:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a618:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800a61c:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 800a620:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800a624:	930b      	str	r3, [sp, #44]	; 0x2c
 800a626:	f04f 32ff 	mov.w	r2, #4294967295
 800a62a:	4640      	mov	r0, r8
 800a62c:	4b9c      	ldr	r3, [pc, #624]	; (800a8a0 <_printf_float+0x2cc>)
 800a62e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a630:	f7f6 f9f6 	bl	8000a20 <__aeabi_dcmpun>
 800a634:	bb70      	cbnz	r0, 800a694 <_printf_float+0xc0>
 800a636:	f04f 32ff 	mov.w	r2, #4294967295
 800a63a:	4640      	mov	r0, r8
 800a63c:	4b98      	ldr	r3, [pc, #608]	; (800a8a0 <_printf_float+0x2cc>)
 800a63e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a640:	f7f6 f9d0 	bl	80009e4 <__aeabi_dcmple>
 800a644:	bb30      	cbnz	r0, 800a694 <_printf_float+0xc0>
 800a646:	2200      	movs	r2, #0
 800a648:	2300      	movs	r3, #0
 800a64a:	4640      	mov	r0, r8
 800a64c:	4651      	mov	r1, sl
 800a64e:	f7f6 f9bf 	bl	80009d0 <__aeabi_dcmplt>
 800a652:	b110      	cbz	r0, 800a65a <_printf_float+0x86>
 800a654:	232d      	movs	r3, #45	; 0x2d
 800a656:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a65a:	4b92      	ldr	r3, [pc, #584]	; (800a8a4 <_printf_float+0x2d0>)
 800a65c:	4892      	ldr	r0, [pc, #584]	; (800a8a8 <_printf_float+0x2d4>)
 800a65e:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800a662:	bf94      	ite	ls
 800a664:	4698      	movls	r8, r3
 800a666:	4680      	movhi	r8, r0
 800a668:	2303      	movs	r3, #3
 800a66a:	f04f 0a00 	mov.w	sl, #0
 800a66e:	6123      	str	r3, [r4, #16]
 800a670:	f02b 0304 	bic.w	r3, fp, #4
 800a674:	6023      	str	r3, [r4, #0]
 800a676:	4633      	mov	r3, r6
 800a678:	4621      	mov	r1, r4
 800a67a:	4628      	mov	r0, r5
 800a67c:	9700      	str	r7, [sp, #0]
 800a67e:	aa0f      	add	r2, sp, #60	; 0x3c
 800a680:	f000 f9d4 	bl	800aa2c <_printf_common>
 800a684:	3001      	adds	r0, #1
 800a686:	f040 8090 	bne.w	800a7aa <_printf_float+0x1d6>
 800a68a:	f04f 30ff 	mov.w	r0, #4294967295
 800a68e:	b011      	add	sp, #68	; 0x44
 800a690:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a694:	4642      	mov	r2, r8
 800a696:	4653      	mov	r3, sl
 800a698:	4640      	mov	r0, r8
 800a69a:	4651      	mov	r1, sl
 800a69c:	f7f6 f9c0 	bl	8000a20 <__aeabi_dcmpun>
 800a6a0:	b148      	cbz	r0, 800a6b6 <_printf_float+0xe2>
 800a6a2:	f1ba 0f00 	cmp.w	sl, #0
 800a6a6:	bfb8      	it	lt
 800a6a8:	232d      	movlt	r3, #45	; 0x2d
 800a6aa:	4880      	ldr	r0, [pc, #512]	; (800a8ac <_printf_float+0x2d8>)
 800a6ac:	bfb8      	it	lt
 800a6ae:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a6b2:	4b7f      	ldr	r3, [pc, #508]	; (800a8b0 <_printf_float+0x2dc>)
 800a6b4:	e7d3      	b.n	800a65e <_printf_float+0x8a>
 800a6b6:	6863      	ldr	r3, [r4, #4]
 800a6b8:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800a6bc:	1c5a      	adds	r2, r3, #1
 800a6be:	d142      	bne.n	800a746 <_printf_float+0x172>
 800a6c0:	2306      	movs	r3, #6
 800a6c2:	6063      	str	r3, [r4, #4]
 800a6c4:	2200      	movs	r2, #0
 800a6c6:	9206      	str	r2, [sp, #24]
 800a6c8:	aa0e      	add	r2, sp, #56	; 0x38
 800a6ca:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800a6ce:	aa0d      	add	r2, sp, #52	; 0x34
 800a6d0:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800a6d4:	9203      	str	r2, [sp, #12]
 800a6d6:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800a6da:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800a6de:	6023      	str	r3, [r4, #0]
 800a6e0:	6863      	ldr	r3, [r4, #4]
 800a6e2:	4642      	mov	r2, r8
 800a6e4:	9300      	str	r3, [sp, #0]
 800a6e6:	4628      	mov	r0, r5
 800a6e8:	4653      	mov	r3, sl
 800a6ea:	910b      	str	r1, [sp, #44]	; 0x2c
 800a6ec:	f7ff fed5 	bl	800a49a <__cvt>
 800a6f0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a6f2:	4680      	mov	r8, r0
 800a6f4:	2947      	cmp	r1, #71	; 0x47
 800a6f6:	990d      	ldr	r1, [sp, #52]	; 0x34
 800a6f8:	d108      	bne.n	800a70c <_printf_float+0x138>
 800a6fa:	1cc8      	adds	r0, r1, #3
 800a6fc:	db02      	blt.n	800a704 <_printf_float+0x130>
 800a6fe:	6863      	ldr	r3, [r4, #4]
 800a700:	4299      	cmp	r1, r3
 800a702:	dd40      	ble.n	800a786 <_printf_float+0x1b2>
 800a704:	f1a9 0902 	sub.w	r9, r9, #2
 800a708:	fa5f f989 	uxtb.w	r9, r9
 800a70c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800a710:	d81f      	bhi.n	800a752 <_printf_float+0x17e>
 800a712:	464a      	mov	r2, r9
 800a714:	3901      	subs	r1, #1
 800a716:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a71a:	910d      	str	r1, [sp, #52]	; 0x34
 800a71c:	f7ff ff1c 	bl	800a558 <__exponent>
 800a720:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a722:	4682      	mov	sl, r0
 800a724:	1813      	adds	r3, r2, r0
 800a726:	2a01      	cmp	r2, #1
 800a728:	6123      	str	r3, [r4, #16]
 800a72a:	dc02      	bgt.n	800a732 <_printf_float+0x15e>
 800a72c:	6822      	ldr	r2, [r4, #0]
 800a72e:	07d2      	lsls	r2, r2, #31
 800a730:	d501      	bpl.n	800a736 <_printf_float+0x162>
 800a732:	3301      	adds	r3, #1
 800a734:	6123      	str	r3, [r4, #16]
 800a736:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d09b      	beq.n	800a676 <_printf_float+0xa2>
 800a73e:	232d      	movs	r3, #45	; 0x2d
 800a740:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a744:	e797      	b.n	800a676 <_printf_float+0xa2>
 800a746:	2947      	cmp	r1, #71	; 0x47
 800a748:	d1bc      	bne.n	800a6c4 <_printf_float+0xf0>
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d1ba      	bne.n	800a6c4 <_printf_float+0xf0>
 800a74e:	2301      	movs	r3, #1
 800a750:	e7b7      	b.n	800a6c2 <_printf_float+0xee>
 800a752:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800a756:	d118      	bne.n	800a78a <_printf_float+0x1b6>
 800a758:	2900      	cmp	r1, #0
 800a75a:	6863      	ldr	r3, [r4, #4]
 800a75c:	dd0b      	ble.n	800a776 <_printf_float+0x1a2>
 800a75e:	6121      	str	r1, [r4, #16]
 800a760:	b913      	cbnz	r3, 800a768 <_printf_float+0x194>
 800a762:	6822      	ldr	r2, [r4, #0]
 800a764:	07d0      	lsls	r0, r2, #31
 800a766:	d502      	bpl.n	800a76e <_printf_float+0x19a>
 800a768:	3301      	adds	r3, #1
 800a76a:	440b      	add	r3, r1
 800a76c:	6123      	str	r3, [r4, #16]
 800a76e:	f04f 0a00 	mov.w	sl, #0
 800a772:	65a1      	str	r1, [r4, #88]	; 0x58
 800a774:	e7df      	b.n	800a736 <_printf_float+0x162>
 800a776:	b913      	cbnz	r3, 800a77e <_printf_float+0x1aa>
 800a778:	6822      	ldr	r2, [r4, #0]
 800a77a:	07d2      	lsls	r2, r2, #31
 800a77c:	d501      	bpl.n	800a782 <_printf_float+0x1ae>
 800a77e:	3302      	adds	r3, #2
 800a780:	e7f4      	b.n	800a76c <_printf_float+0x198>
 800a782:	2301      	movs	r3, #1
 800a784:	e7f2      	b.n	800a76c <_printf_float+0x198>
 800a786:	f04f 0967 	mov.w	r9, #103	; 0x67
 800a78a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a78c:	4299      	cmp	r1, r3
 800a78e:	db05      	blt.n	800a79c <_printf_float+0x1c8>
 800a790:	6823      	ldr	r3, [r4, #0]
 800a792:	6121      	str	r1, [r4, #16]
 800a794:	07d8      	lsls	r0, r3, #31
 800a796:	d5ea      	bpl.n	800a76e <_printf_float+0x19a>
 800a798:	1c4b      	adds	r3, r1, #1
 800a79a:	e7e7      	b.n	800a76c <_printf_float+0x198>
 800a79c:	2900      	cmp	r1, #0
 800a79e:	bfcc      	ite	gt
 800a7a0:	2201      	movgt	r2, #1
 800a7a2:	f1c1 0202 	rsble	r2, r1, #2
 800a7a6:	4413      	add	r3, r2
 800a7a8:	e7e0      	b.n	800a76c <_printf_float+0x198>
 800a7aa:	6823      	ldr	r3, [r4, #0]
 800a7ac:	055a      	lsls	r2, r3, #21
 800a7ae:	d407      	bmi.n	800a7c0 <_printf_float+0x1ec>
 800a7b0:	6923      	ldr	r3, [r4, #16]
 800a7b2:	4642      	mov	r2, r8
 800a7b4:	4631      	mov	r1, r6
 800a7b6:	4628      	mov	r0, r5
 800a7b8:	47b8      	blx	r7
 800a7ba:	3001      	adds	r0, #1
 800a7bc:	d12b      	bne.n	800a816 <_printf_float+0x242>
 800a7be:	e764      	b.n	800a68a <_printf_float+0xb6>
 800a7c0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800a7c4:	f240 80dd 	bls.w	800a982 <_printf_float+0x3ae>
 800a7c8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a7cc:	2200      	movs	r2, #0
 800a7ce:	2300      	movs	r3, #0
 800a7d0:	f7f6 f8f4 	bl	80009bc <__aeabi_dcmpeq>
 800a7d4:	2800      	cmp	r0, #0
 800a7d6:	d033      	beq.n	800a840 <_printf_float+0x26c>
 800a7d8:	2301      	movs	r3, #1
 800a7da:	4631      	mov	r1, r6
 800a7dc:	4628      	mov	r0, r5
 800a7de:	4a35      	ldr	r2, [pc, #212]	; (800a8b4 <_printf_float+0x2e0>)
 800a7e0:	47b8      	blx	r7
 800a7e2:	3001      	adds	r0, #1
 800a7e4:	f43f af51 	beq.w	800a68a <_printf_float+0xb6>
 800a7e8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800a7ec:	429a      	cmp	r2, r3
 800a7ee:	db02      	blt.n	800a7f6 <_printf_float+0x222>
 800a7f0:	6823      	ldr	r3, [r4, #0]
 800a7f2:	07d8      	lsls	r0, r3, #31
 800a7f4:	d50f      	bpl.n	800a816 <_printf_float+0x242>
 800a7f6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a7fa:	4631      	mov	r1, r6
 800a7fc:	4628      	mov	r0, r5
 800a7fe:	47b8      	blx	r7
 800a800:	3001      	adds	r0, #1
 800a802:	f43f af42 	beq.w	800a68a <_printf_float+0xb6>
 800a806:	f04f 0800 	mov.w	r8, #0
 800a80a:	f104 091a 	add.w	r9, r4, #26
 800a80e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a810:	3b01      	subs	r3, #1
 800a812:	4543      	cmp	r3, r8
 800a814:	dc09      	bgt.n	800a82a <_printf_float+0x256>
 800a816:	6823      	ldr	r3, [r4, #0]
 800a818:	079b      	lsls	r3, r3, #30
 800a81a:	f100 8102 	bmi.w	800aa22 <_printf_float+0x44e>
 800a81e:	68e0      	ldr	r0, [r4, #12]
 800a820:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a822:	4298      	cmp	r0, r3
 800a824:	bfb8      	it	lt
 800a826:	4618      	movlt	r0, r3
 800a828:	e731      	b.n	800a68e <_printf_float+0xba>
 800a82a:	2301      	movs	r3, #1
 800a82c:	464a      	mov	r2, r9
 800a82e:	4631      	mov	r1, r6
 800a830:	4628      	mov	r0, r5
 800a832:	47b8      	blx	r7
 800a834:	3001      	adds	r0, #1
 800a836:	f43f af28 	beq.w	800a68a <_printf_float+0xb6>
 800a83a:	f108 0801 	add.w	r8, r8, #1
 800a83e:	e7e6      	b.n	800a80e <_printf_float+0x23a>
 800a840:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a842:	2b00      	cmp	r3, #0
 800a844:	dc38      	bgt.n	800a8b8 <_printf_float+0x2e4>
 800a846:	2301      	movs	r3, #1
 800a848:	4631      	mov	r1, r6
 800a84a:	4628      	mov	r0, r5
 800a84c:	4a19      	ldr	r2, [pc, #100]	; (800a8b4 <_printf_float+0x2e0>)
 800a84e:	47b8      	blx	r7
 800a850:	3001      	adds	r0, #1
 800a852:	f43f af1a 	beq.w	800a68a <_printf_float+0xb6>
 800a856:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800a85a:	4313      	orrs	r3, r2
 800a85c:	d102      	bne.n	800a864 <_printf_float+0x290>
 800a85e:	6823      	ldr	r3, [r4, #0]
 800a860:	07d9      	lsls	r1, r3, #31
 800a862:	d5d8      	bpl.n	800a816 <_printf_float+0x242>
 800a864:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a868:	4631      	mov	r1, r6
 800a86a:	4628      	mov	r0, r5
 800a86c:	47b8      	blx	r7
 800a86e:	3001      	adds	r0, #1
 800a870:	f43f af0b 	beq.w	800a68a <_printf_float+0xb6>
 800a874:	f04f 0900 	mov.w	r9, #0
 800a878:	f104 0a1a 	add.w	sl, r4, #26
 800a87c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a87e:	425b      	negs	r3, r3
 800a880:	454b      	cmp	r3, r9
 800a882:	dc01      	bgt.n	800a888 <_printf_float+0x2b4>
 800a884:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a886:	e794      	b.n	800a7b2 <_printf_float+0x1de>
 800a888:	2301      	movs	r3, #1
 800a88a:	4652      	mov	r2, sl
 800a88c:	4631      	mov	r1, r6
 800a88e:	4628      	mov	r0, r5
 800a890:	47b8      	blx	r7
 800a892:	3001      	adds	r0, #1
 800a894:	f43f aef9 	beq.w	800a68a <_printf_float+0xb6>
 800a898:	f109 0901 	add.w	r9, r9, #1
 800a89c:	e7ee      	b.n	800a87c <_printf_float+0x2a8>
 800a89e:	bf00      	nop
 800a8a0:	7fefffff 	.word	0x7fefffff
 800a8a4:	0800ddfc 	.word	0x0800ddfc
 800a8a8:	0800de00 	.word	0x0800de00
 800a8ac:	0800de08 	.word	0x0800de08
 800a8b0:	0800de04 	.word	0x0800de04
 800a8b4:	0800de0c 	.word	0x0800de0c
 800a8b8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a8ba:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a8bc:	429a      	cmp	r2, r3
 800a8be:	bfa8      	it	ge
 800a8c0:	461a      	movge	r2, r3
 800a8c2:	2a00      	cmp	r2, #0
 800a8c4:	4691      	mov	r9, r2
 800a8c6:	dc37      	bgt.n	800a938 <_printf_float+0x364>
 800a8c8:	f04f 0b00 	mov.w	fp, #0
 800a8cc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a8d0:	f104 021a 	add.w	r2, r4, #26
 800a8d4:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800a8d8:	ebaa 0309 	sub.w	r3, sl, r9
 800a8dc:	455b      	cmp	r3, fp
 800a8de:	dc33      	bgt.n	800a948 <_printf_float+0x374>
 800a8e0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800a8e4:	429a      	cmp	r2, r3
 800a8e6:	db3b      	blt.n	800a960 <_printf_float+0x38c>
 800a8e8:	6823      	ldr	r3, [r4, #0]
 800a8ea:	07da      	lsls	r2, r3, #31
 800a8ec:	d438      	bmi.n	800a960 <_printf_float+0x38c>
 800a8ee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a8f0:	990d      	ldr	r1, [sp, #52]	; 0x34
 800a8f2:	eba2 030a 	sub.w	r3, r2, sl
 800a8f6:	eba2 0901 	sub.w	r9, r2, r1
 800a8fa:	4599      	cmp	r9, r3
 800a8fc:	bfa8      	it	ge
 800a8fe:	4699      	movge	r9, r3
 800a900:	f1b9 0f00 	cmp.w	r9, #0
 800a904:	dc34      	bgt.n	800a970 <_printf_float+0x39c>
 800a906:	f04f 0800 	mov.w	r8, #0
 800a90a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a90e:	f104 0a1a 	add.w	sl, r4, #26
 800a912:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800a916:	1a9b      	subs	r3, r3, r2
 800a918:	eba3 0309 	sub.w	r3, r3, r9
 800a91c:	4543      	cmp	r3, r8
 800a91e:	f77f af7a 	ble.w	800a816 <_printf_float+0x242>
 800a922:	2301      	movs	r3, #1
 800a924:	4652      	mov	r2, sl
 800a926:	4631      	mov	r1, r6
 800a928:	4628      	mov	r0, r5
 800a92a:	47b8      	blx	r7
 800a92c:	3001      	adds	r0, #1
 800a92e:	f43f aeac 	beq.w	800a68a <_printf_float+0xb6>
 800a932:	f108 0801 	add.w	r8, r8, #1
 800a936:	e7ec      	b.n	800a912 <_printf_float+0x33e>
 800a938:	4613      	mov	r3, r2
 800a93a:	4631      	mov	r1, r6
 800a93c:	4642      	mov	r2, r8
 800a93e:	4628      	mov	r0, r5
 800a940:	47b8      	blx	r7
 800a942:	3001      	adds	r0, #1
 800a944:	d1c0      	bne.n	800a8c8 <_printf_float+0x2f4>
 800a946:	e6a0      	b.n	800a68a <_printf_float+0xb6>
 800a948:	2301      	movs	r3, #1
 800a94a:	4631      	mov	r1, r6
 800a94c:	4628      	mov	r0, r5
 800a94e:	920b      	str	r2, [sp, #44]	; 0x2c
 800a950:	47b8      	blx	r7
 800a952:	3001      	adds	r0, #1
 800a954:	f43f ae99 	beq.w	800a68a <_printf_float+0xb6>
 800a958:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a95a:	f10b 0b01 	add.w	fp, fp, #1
 800a95e:	e7b9      	b.n	800a8d4 <_printf_float+0x300>
 800a960:	4631      	mov	r1, r6
 800a962:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a966:	4628      	mov	r0, r5
 800a968:	47b8      	blx	r7
 800a96a:	3001      	adds	r0, #1
 800a96c:	d1bf      	bne.n	800a8ee <_printf_float+0x31a>
 800a96e:	e68c      	b.n	800a68a <_printf_float+0xb6>
 800a970:	464b      	mov	r3, r9
 800a972:	4631      	mov	r1, r6
 800a974:	4628      	mov	r0, r5
 800a976:	eb08 020a 	add.w	r2, r8, sl
 800a97a:	47b8      	blx	r7
 800a97c:	3001      	adds	r0, #1
 800a97e:	d1c2      	bne.n	800a906 <_printf_float+0x332>
 800a980:	e683      	b.n	800a68a <_printf_float+0xb6>
 800a982:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a984:	2a01      	cmp	r2, #1
 800a986:	dc01      	bgt.n	800a98c <_printf_float+0x3b8>
 800a988:	07db      	lsls	r3, r3, #31
 800a98a:	d537      	bpl.n	800a9fc <_printf_float+0x428>
 800a98c:	2301      	movs	r3, #1
 800a98e:	4642      	mov	r2, r8
 800a990:	4631      	mov	r1, r6
 800a992:	4628      	mov	r0, r5
 800a994:	47b8      	blx	r7
 800a996:	3001      	adds	r0, #1
 800a998:	f43f ae77 	beq.w	800a68a <_printf_float+0xb6>
 800a99c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a9a0:	4631      	mov	r1, r6
 800a9a2:	4628      	mov	r0, r5
 800a9a4:	47b8      	blx	r7
 800a9a6:	3001      	adds	r0, #1
 800a9a8:	f43f ae6f 	beq.w	800a68a <_printf_float+0xb6>
 800a9ac:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a9b0:	2200      	movs	r2, #0
 800a9b2:	2300      	movs	r3, #0
 800a9b4:	f7f6 f802 	bl	80009bc <__aeabi_dcmpeq>
 800a9b8:	b9d8      	cbnz	r0, 800a9f2 <_printf_float+0x41e>
 800a9ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a9bc:	f108 0201 	add.w	r2, r8, #1
 800a9c0:	3b01      	subs	r3, #1
 800a9c2:	4631      	mov	r1, r6
 800a9c4:	4628      	mov	r0, r5
 800a9c6:	47b8      	blx	r7
 800a9c8:	3001      	adds	r0, #1
 800a9ca:	d10e      	bne.n	800a9ea <_printf_float+0x416>
 800a9cc:	e65d      	b.n	800a68a <_printf_float+0xb6>
 800a9ce:	2301      	movs	r3, #1
 800a9d0:	464a      	mov	r2, r9
 800a9d2:	4631      	mov	r1, r6
 800a9d4:	4628      	mov	r0, r5
 800a9d6:	47b8      	blx	r7
 800a9d8:	3001      	adds	r0, #1
 800a9da:	f43f ae56 	beq.w	800a68a <_printf_float+0xb6>
 800a9de:	f108 0801 	add.w	r8, r8, #1
 800a9e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a9e4:	3b01      	subs	r3, #1
 800a9e6:	4543      	cmp	r3, r8
 800a9e8:	dcf1      	bgt.n	800a9ce <_printf_float+0x3fa>
 800a9ea:	4653      	mov	r3, sl
 800a9ec:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a9f0:	e6e0      	b.n	800a7b4 <_printf_float+0x1e0>
 800a9f2:	f04f 0800 	mov.w	r8, #0
 800a9f6:	f104 091a 	add.w	r9, r4, #26
 800a9fa:	e7f2      	b.n	800a9e2 <_printf_float+0x40e>
 800a9fc:	2301      	movs	r3, #1
 800a9fe:	4642      	mov	r2, r8
 800aa00:	e7df      	b.n	800a9c2 <_printf_float+0x3ee>
 800aa02:	2301      	movs	r3, #1
 800aa04:	464a      	mov	r2, r9
 800aa06:	4631      	mov	r1, r6
 800aa08:	4628      	mov	r0, r5
 800aa0a:	47b8      	blx	r7
 800aa0c:	3001      	adds	r0, #1
 800aa0e:	f43f ae3c 	beq.w	800a68a <_printf_float+0xb6>
 800aa12:	f108 0801 	add.w	r8, r8, #1
 800aa16:	68e3      	ldr	r3, [r4, #12]
 800aa18:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800aa1a:	1a5b      	subs	r3, r3, r1
 800aa1c:	4543      	cmp	r3, r8
 800aa1e:	dcf0      	bgt.n	800aa02 <_printf_float+0x42e>
 800aa20:	e6fd      	b.n	800a81e <_printf_float+0x24a>
 800aa22:	f04f 0800 	mov.w	r8, #0
 800aa26:	f104 0919 	add.w	r9, r4, #25
 800aa2a:	e7f4      	b.n	800aa16 <_printf_float+0x442>

0800aa2c <_printf_common>:
 800aa2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa30:	4616      	mov	r6, r2
 800aa32:	4699      	mov	r9, r3
 800aa34:	688a      	ldr	r2, [r1, #8]
 800aa36:	690b      	ldr	r3, [r1, #16]
 800aa38:	4607      	mov	r7, r0
 800aa3a:	4293      	cmp	r3, r2
 800aa3c:	bfb8      	it	lt
 800aa3e:	4613      	movlt	r3, r2
 800aa40:	6033      	str	r3, [r6, #0]
 800aa42:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800aa46:	460c      	mov	r4, r1
 800aa48:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800aa4c:	b10a      	cbz	r2, 800aa52 <_printf_common+0x26>
 800aa4e:	3301      	adds	r3, #1
 800aa50:	6033      	str	r3, [r6, #0]
 800aa52:	6823      	ldr	r3, [r4, #0]
 800aa54:	0699      	lsls	r1, r3, #26
 800aa56:	bf42      	ittt	mi
 800aa58:	6833      	ldrmi	r3, [r6, #0]
 800aa5a:	3302      	addmi	r3, #2
 800aa5c:	6033      	strmi	r3, [r6, #0]
 800aa5e:	6825      	ldr	r5, [r4, #0]
 800aa60:	f015 0506 	ands.w	r5, r5, #6
 800aa64:	d106      	bne.n	800aa74 <_printf_common+0x48>
 800aa66:	f104 0a19 	add.w	sl, r4, #25
 800aa6a:	68e3      	ldr	r3, [r4, #12]
 800aa6c:	6832      	ldr	r2, [r6, #0]
 800aa6e:	1a9b      	subs	r3, r3, r2
 800aa70:	42ab      	cmp	r3, r5
 800aa72:	dc28      	bgt.n	800aac6 <_printf_common+0x9a>
 800aa74:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800aa78:	1e13      	subs	r3, r2, #0
 800aa7a:	6822      	ldr	r2, [r4, #0]
 800aa7c:	bf18      	it	ne
 800aa7e:	2301      	movne	r3, #1
 800aa80:	0692      	lsls	r2, r2, #26
 800aa82:	d42d      	bmi.n	800aae0 <_printf_common+0xb4>
 800aa84:	4649      	mov	r1, r9
 800aa86:	4638      	mov	r0, r7
 800aa88:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800aa8c:	47c0      	blx	r8
 800aa8e:	3001      	adds	r0, #1
 800aa90:	d020      	beq.n	800aad4 <_printf_common+0xa8>
 800aa92:	6823      	ldr	r3, [r4, #0]
 800aa94:	68e5      	ldr	r5, [r4, #12]
 800aa96:	f003 0306 	and.w	r3, r3, #6
 800aa9a:	2b04      	cmp	r3, #4
 800aa9c:	bf18      	it	ne
 800aa9e:	2500      	movne	r5, #0
 800aaa0:	6832      	ldr	r2, [r6, #0]
 800aaa2:	f04f 0600 	mov.w	r6, #0
 800aaa6:	68a3      	ldr	r3, [r4, #8]
 800aaa8:	bf08      	it	eq
 800aaaa:	1aad      	subeq	r5, r5, r2
 800aaac:	6922      	ldr	r2, [r4, #16]
 800aaae:	bf08      	it	eq
 800aab0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800aab4:	4293      	cmp	r3, r2
 800aab6:	bfc4      	itt	gt
 800aab8:	1a9b      	subgt	r3, r3, r2
 800aaba:	18ed      	addgt	r5, r5, r3
 800aabc:	341a      	adds	r4, #26
 800aabe:	42b5      	cmp	r5, r6
 800aac0:	d11a      	bne.n	800aaf8 <_printf_common+0xcc>
 800aac2:	2000      	movs	r0, #0
 800aac4:	e008      	b.n	800aad8 <_printf_common+0xac>
 800aac6:	2301      	movs	r3, #1
 800aac8:	4652      	mov	r2, sl
 800aaca:	4649      	mov	r1, r9
 800aacc:	4638      	mov	r0, r7
 800aace:	47c0      	blx	r8
 800aad0:	3001      	adds	r0, #1
 800aad2:	d103      	bne.n	800aadc <_printf_common+0xb0>
 800aad4:	f04f 30ff 	mov.w	r0, #4294967295
 800aad8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aadc:	3501      	adds	r5, #1
 800aade:	e7c4      	b.n	800aa6a <_printf_common+0x3e>
 800aae0:	2030      	movs	r0, #48	; 0x30
 800aae2:	18e1      	adds	r1, r4, r3
 800aae4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800aae8:	1c5a      	adds	r2, r3, #1
 800aaea:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800aaee:	4422      	add	r2, r4
 800aaf0:	3302      	adds	r3, #2
 800aaf2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800aaf6:	e7c5      	b.n	800aa84 <_printf_common+0x58>
 800aaf8:	2301      	movs	r3, #1
 800aafa:	4622      	mov	r2, r4
 800aafc:	4649      	mov	r1, r9
 800aafe:	4638      	mov	r0, r7
 800ab00:	47c0      	blx	r8
 800ab02:	3001      	adds	r0, #1
 800ab04:	d0e6      	beq.n	800aad4 <_printf_common+0xa8>
 800ab06:	3601      	adds	r6, #1
 800ab08:	e7d9      	b.n	800aabe <_printf_common+0x92>
	...

0800ab0c <_printf_i>:
 800ab0c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ab10:	460c      	mov	r4, r1
 800ab12:	7e27      	ldrb	r7, [r4, #24]
 800ab14:	4691      	mov	r9, r2
 800ab16:	2f78      	cmp	r7, #120	; 0x78
 800ab18:	4680      	mov	r8, r0
 800ab1a:	469a      	mov	sl, r3
 800ab1c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800ab1e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ab22:	d807      	bhi.n	800ab34 <_printf_i+0x28>
 800ab24:	2f62      	cmp	r7, #98	; 0x62
 800ab26:	d80a      	bhi.n	800ab3e <_printf_i+0x32>
 800ab28:	2f00      	cmp	r7, #0
 800ab2a:	f000 80d9 	beq.w	800ace0 <_printf_i+0x1d4>
 800ab2e:	2f58      	cmp	r7, #88	; 0x58
 800ab30:	f000 80a4 	beq.w	800ac7c <_printf_i+0x170>
 800ab34:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800ab38:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ab3c:	e03a      	b.n	800abb4 <_printf_i+0xa8>
 800ab3e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ab42:	2b15      	cmp	r3, #21
 800ab44:	d8f6      	bhi.n	800ab34 <_printf_i+0x28>
 800ab46:	a001      	add	r0, pc, #4	; (adr r0, 800ab4c <_printf_i+0x40>)
 800ab48:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800ab4c:	0800aba5 	.word	0x0800aba5
 800ab50:	0800abb9 	.word	0x0800abb9
 800ab54:	0800ab35 	.word	0x0800ab35
 800ab58:	0800ab35 	.word	0x0800ab35
 800ab5c:	0800ab35 	.word	0x0800ab35
 800ab60:	0800ab35 	.word	0x0800ab35
 800ab64:	0800abb9 	.word	0x0800abb9
 800ab68:	0800ab35 	.word	0x0800ab35
 800ab6c:	0800ab35 	.word	0x0800ab35
 800ab70:	0800ab35 	.word	0x0800ab35
 800ab74:	0800ab35 	.word	0x0800ab35
 800ab78:	0800acc7 	.word	0x0800acc7
 800ab7c:	0800abe9 	.word	0x0800abe9
 800ab80:	0800aca9 	.word	0x0800aca9
 800ab84:	0800ab35 	.word	0x0800ab35
 800ab88:	0800ab35 	.word	0x0800ab35
 800ab8c:	0800ace9 	.word	0x0800ace9
 800ab90:	0800ab35 	.word	0x0800ab35
 800ab94:	0800abe9 	.word	0x0800abe9
 800ab98:	0800ab35 	.word	0x0800ab35
 800ab9c:	0800ab35 	.word	0x0800ab35
 800aba0:	0800acb1 	.word	0x0800acb1
 800aba4:	680b      	ldr	r3, [r1, #0]
 800aba6:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800abaa:	1d1a      	adds	r2, r3, #4
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	600a      	str	r2, [r1, #0]
 800abb0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800abb4:	2301      	movs	r3, #1
 800abb6:	e0a4      	b.n	800ad02 <_printf_i+0x1f6>
 800abb8:	6825      	ldr	r5, [r4, #0]
 800abba:	6808      	ldr	r0, [r1, #0]
 800abbc:	062e      	lsls	r6, r5, #24
 800abbe:	f100 0304 	add.w	r3, r0, #4
 800abc2:	d50a      	bpl.n	800abda <_printf_i+0xce>
 800abc4:	6805      	ldr	r5, [r0, #0]
 800abc6:	600b      	str	r3, [r1, #0]
 800abc8:	2d00      	cmp	r5, #0
 800abca:	da03      	bge.n	800abd4 <_printf_i+0xc8>
 800abcc:	232d      	movs	r3, #45	; 0x2d
 800abce:	426d      	negs	r5, r5
 800abd0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800abd4:	230a      	movs	r3, #10
 800abd6:	485e      	ldr	r0, [pc, #376]	; (800ad50 <_printf_i+0x244>)
 800abd8:	e019      	b.n	800ac0e <_printf_i+0x102>
 800abda:	f015 0f40 	tst.w	r5, #64	; 0x40
 800abde:	6805      	ldr	r5, [r0, #0]
 800abe0:	600b      	str	r3, [r1, #0]
 800abe2:	bf18      	it	ne
 800abe4:	b22d      	sxthne	r5, r5
 800abe6:	e7ef      	b.n	800abc8 <_printf_i+0xbc>
 800abe8:	680b      	ldr	r3, [r1, #0]
 800abea:	6825      	ldr	r5, [r4, #0]
 800abec:	1d18      	adds	r0, r3, #4
 800abee:	6008      	str	r0, [r1, #0]
 800abf0:	0628      	lsls	r0, r5, #24
 800abf2:	d501      	bpl.n	800abf8 <_printf_i+0xec>
 800abf4:	681d      	ldr	r5, [r3, #0]
 800abf6:	e002      	b.n	800abfe <_printf_i+0xf2>
 800abf8:	0669      	lsls	r1, r5, #25
 800abfa:	d5fb      	bpl.n	800abf4 <_printf_i+0xe8>
 800abfc:	881d      	ldrh	r5, [r3, #0]
 800abfe:	2f6f      	cmp	r7, #111	; 0x6f
 800ac00:	bf0c      	ite	eq
 800ac02:	2308      	moveq	r3, #8
 800ac04:	230a      	movne	r3, #10
 800ac06:	4852      	ldr	r0, [pc, #328]	; (800ad50 <_printf_i+0x244>)
 800ac08:	2100      	movs	r1, #0
 800ac0a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ac0e:	6866      	ldr	r6, [r4, #4]
 800ac10:	2e00      	cmp	r6, #0
 800ac12:	bfa8      	it	ge
 800ac14:	6821      	ldrge	r1, [r4, #0]
 800ac16:	60a6      	str	r6, [r4, #8]
 800ac18:	bfa4      	itt	ge
 800ac1a:	f021 0104 	bicge.w	r1, r1, #4
 800ac1e:	6021      	strge	r1, [r4, #0]
 800ac20:	b90d      	cbnz	r5, 800ac26 <_printf_i+0x11a>
 800ac22:	2e00      	cmp	r6, #0
 800ac24:	d04d      	beq.n	800acc2 <_printf_i+0x1b6>
 800ac26:	4616      	mov	r6, r2
 800ac28:	fbb5 f1f3 	udiv	r1, r5, r3
 800ac2c:	fb03 5711 	mls	r7, r3, r1, r5
 800ac30:	5dc7      	ldrb	r7, [r0, r7]
 800ac32:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ac36:	462f      	mov	r7, r5
 800ac38:	42bb      	cmp	r3, r7
 800ac3a:	460d      	mov	r5, r1
 800ac3c:	d9f4      	bls.n	800ac28 <_printf_i+0x11c>
 800ac3e:	2b08      	cmp	r3, #8
 800ac40:	d10b      	bne.n	800ac5a <_printf_i+0x14e>
 800ac42:	6823      	ldr	r3, [r4, #0]
 800ac44:	07df      	lsls	r7, r3, #31
 800ac46:	d508      	bpl.n	800ac5a <_printf_i+0x14e>
 800ac48:	6923      	ldr	r3, [r4, #16]
 800ac4a:	6861      	ldr	r1, [r4, #4]
 800ac4c:	4299      	cmp	r1, r3
 800ac4e:	bfde      	ittt	le
 800ac50:	2330      	movle	r3, #48	; 0x30
 800ac52:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ac56:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ac5a:	1b92      	subs	r2, r2, r6
 800ac5c:	6122      	str	r2, [r4, #16]
 800ac5e:	464b      	mov	r3, r9
 800ac60:	4621      	mov	r1, r4
 800ac62:	4640      	mov	r0, r8
 800ac64:	f8cd a000 	str.w	sl, [sp]
 800ac68:	aa03      	add	r2, sp, #12
 800ac6a:	f7ff fedf 	bl	800aa2c <_printf_common>
 800ac6e:	3001      	adds	r0, #1
 800ac70:	d14c      	bne.n	800ad0c <_printf_i+0x200>
 800ac72:	f04f 30ff 	mov.w	r0, #4294967295
 800ac76:	b004      	add	sp, #16
 800ac78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac7c:	4834      	ldr	r0, [pc, #208]	; (800ad50 <_printf_i+0x244>)
 800ac7e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800ac82:	680e      	ldr	r6, [r1, #0]
 800ac84:	6823      	ldr	r3, [r4, #0]
 800ac86:	f856 5b04 	ldr.w	r5, [r6], #4
 800ac8a:	061f      	lsls	r7, r3, #24
 800ac8c:	600e      	str	r6, [r1, #0]
 800ac8e:	d514      	bpl.n	800acba <_printf_i+0x1ae>
 800ac90:	07d9      	lsls	r1, r3, #31
 800ac92:	bf44      	itt	mi
 800ac94:	f043 0320 	orrmi.w	r3, r3, #32
 800ac98:	6023      	strmi	r3, [r4, #0]
 800ac9a:	b91d      	cbnz	r5, 800aca4 <_printf_i+0x198>
 800ac9c:	6823      	ldr	r3, [r4, #0]
 800ac9e:	f023 0320 	bic.w	r3, r3, #32
 800aca2:	6023      	str	r3, [r4, #0]
 800aca4:	2310      	movs	r3, #16
 800aca6:	e7af      	b.n	800ac08 <_printf_i+0xfc>
 800aca8:	6823      	ldr	r3, [r4, #0]
 800acaa:	f043 0320 	orr.w	r3, r3, #32
 800acae:	6023      	str	r3, [r4, #0]
 800acb0:	2378      	movs	r3, #120	; 0x78
 800acb2:	4828      	ldr	r0, [pc, #160]	; (800ad54 <_printf_i+0x248>)
 800acb4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800acb8:	e7e3      	b.n	800ac82 <_printf_i+0x176>
 800acba:	065e      	lsls	r6, r3, #25
 800acbc:	bf48      	it	mi
 800acbe:	b2ad      	uxthmi	r5, r5
 800acc0:	e7e6      	b.n	800ac90 <_printf_i+0x184>
 800acc2:	4616      	mov	r6, r2
 800acc4:	e7bb      	b.n	800ac3e <_printf_i+0x132>
 800acc6:	680b      	ldr	r3, [r1, #0]
 800acc8:	6826      	ldr	r6, [r4, #0]
 800acca:	1d1d      	adds	r5, r3, #4
 800accc:	6960      	ldr	r0, [r4, #20]
 800acce:	600d      	str	r5, [r1, #0]
 800acd0:	0635      	lsls	r5, r6, #24
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	d501      	bpl.n	800acda <_printf_i+0x1ce>
 800acd6:	6018      	str	r0, [r3, #0]
 800acd8:	e002      	b.n	800ace0 <_printf_i+0x1d4>
 800acda:	0671      	lsls	r1, r6, #25
 800acdc:	d5fb      	bpl.n	800acd6 <_printf_i+0x1ca>
 800acde:	8018      	strh	r0, [r3, #0]
 800ace0:	2300      	movs	r3, #0
 800ace2:	4616      	mov	r6, r2
 800ace4:	6123      	str	r3, [r4, #16]
 800ace6:	e7ba      	b.n	800ac5e <_printf_i+0x152>
 800ace8:	680b      	ldr	r3, [r1, #0]
 800acea:	1d1a      	adds	r2, r3, #4
 800acec:	600a      	str	r2, [r1, #0]
 800acee:	681e      	ldr	r6, [r3, #0]
 800acf0:	2100      	movs	r1, #0
 800acf2:	4630      	mov	r0, r6
 800acf4:	6862      	ldr	r2, [r4, #4]
 800acf6:	f000 fee9 	bl	800bacc <memchr>
 800acfa:	b108      	cbz	r0, 800ad00 <_printf_i+0x1f4>
 800acfc:	1b80      	subs	r0, r0, r6
 800acfe:	6060      	str	r0, [r4, #4]
 800ad00:	6863      	ldr	r3, [r4, #4]
 800ad02:	6123      	str	r3, [r4, #16]
 800ad04:	2300      	movs	r3, #0
 800ad06:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ad0a:	e7a8      	b.n	800ac5e <_printf_i+0x152>
 800ad0c:	4632      	mov	r2, r6
 800ad0e:	4649      	mov	r1, r9
 800ad10:	4640      	mov	r0, r8
 800ad12:	6923      	ldr	r3, [r4, #16]
 800ad14:	47d0      	blx	sl
 800ad16:	3001      	adds	r0, #1
 800ad18:	d0ab      	beq.n	800ac72 <_printf_i+0x166>
 800ad1a:	6823      	ldr	r3, [r4, #0]
 800ad1c:	079b      	lsls	r3, r3, #30
 800ad1e:	d413      	bmi.n	800ad48 <_printf_i+0x23c>
 800ad20:	68e0      	ldr	r0, [r4, #12]
 800ad22:	9b03      	ldr	r3, [sp, #12]
 800ad24:	4298      	cmp	r0, r3
 800ad26:	bfb8      	it	lt
 800ad28:	4618      	movlt	r0, r3
 800ad2a:	e7a4      	b.n	800ac76 <_printf_i+0x16a>
 800ad2c:	2301      	movs	r3, #1
 800ad2e:	4632      	mov	r2, r6
 800ad30:	4649      	mov	r1, r9
 800ad32:	4640      	mov	r0, r8
 800ad34:	47d0      	blx	sl
 800ad36:	3001      	adds	r0, #1
 800ad38:	d09b      	beq.n	800ac72 <_printf_i+0x166>
 800ad3a:	3501      	adds	r5, #1
 800ad3c:	68e3      	ldr	r3, [r4, #12]
 800ad3e:	9903      	ldr	r1, [sp, #12]
 800ad40:	1a5b      	subs	r3, r3, r1
 800ad42:	42ab      	cmp	r3, r5
 800ad44:	dcf2      	bgt.n	800ad2c <_printf_i+0x220>
 800ad46:	e7eb      	b.n	800ad20 <_printf_i+0x214>
 800ad48:	2500      	movs	r5, #0
 800ad4a:	f104 0619 	add.w	r6, r4, #25
 800ad4e:	e7f5      	b.n	800ad3c <_printf_i+0x230>
 800ad50:	0800de0e 	.word	0x0800de0e
 800ad54:	0800de1f 	.word	0x0800de1f

0800ad58 <siprintf>:
 800ad58:	b40e      	push	{r1, r2, r3}
 800ad5a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ad5e:	b500      	push	{lr}
 800ad60:	b09c      	sub	sp, #112	; 0x70
 800ad62:	ab1d      	add	r3, sp, #116	; 0x74
 800ad64:	9002      	str	r0, [sp, #8]
 800ad66:	9006      	str	r0, [sp, #24]
 800ad68:	9107      	str	r1, [sp, #28]
 800ad6a:	9104      	str	r1, [sp, #16]
 800ad6c:	4808      	ldr	r0, [pc, #32]	; (800ad90 <siprintf+0x38>)
 800ad6e:	4909      	ldr	r1, [pc, #36]	; (800ad94 <siprintf+0x3c>)
 800ad70:	f853 2b04 	ldr.w	r2, [r3], #4
 800ad74:	9105      	str	r1, [sp, #20]
 800ad76:	6800      	ldr	r0, [r0, #0]
 800ad78:	a902      	add	r1, sp, #8
 800ad7a:	9301      	str	r3, [sp, #4]
 800ad7c:	f001 fb54 	bl	800c428 <_svfiprintf_r>
 800ad80:	2200      	movs	r2, #0
 800ad82:	9b02      	ldr	r3, [sp, #8]
 800ad84:	701a      	strb	r2, [r3, #0]
 800ad86:	b01c      	add	sp, #112	; 0x70
 800ad88:	f85d eb04 	ldr.w	lr, [sp], #4
 800ad8c:	b003      	add	sp, #12
 800ad8e:	4770      	bx	lr
 800ad90:	20000034 	.word	0x20000034
 800ad94:	ffff0208 	.word	0xffff0208

0800ad98 <strncmp>:
 800ad98:	b510      	push	{r4, lr}
 800ad9a:	b16a      	cbz	r2, 800adb8 <strncmp+0x20>
 800ad9c:	3901      	subs	r1, #1
 800ad9e:	1884      	adds	r4, r0, r2
 800ada0:	f810 3b01 	ldrb.w	r3, [r0], #1
 800ada4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800ada8:	4293      	cmp	r3, r2
 800adaa:	d103      	bne.n	800adb4 <strncmp+0x1c>
 800adac:	42a0      	cmp	r0, r4
 800adae:	d001      	beq.n	800adb4 <strncmp+0x1c>
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d1f5      	bne.n	800ada0 <strncmp+0x8>
 800adb4:	1a98      	subs	r0, r3, r2
 800adb6:	bd10      	pop	{r4, pc}
 800adb8:	4610      	mov	r0, r2
 800adba:	e7fc      	b.n	800adb6 <strncmp+0x1e>

0800adbc <quorem>:
 800adbc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800adc0:	6903      	ldr	r3, [r0, #16]
 800adc2:	690c      	ldr	r4, [r1, #16]
 800adc4:	4607      	mov	r7, r0
 800adc6:	42a3      	cmp	r3, r4
 800adc8:	f2c0 8083 	blt.w	800aed2 <quorem+0x116>
 800adcc:	3c01      	subs	r4, #1
 800adce:	f100 0514 	add.w	r5, r0, #20
 800add2:	f101 0814 	add.w	r8, r1, #20
 800add6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800adda:	9301      	str	r3, [sp, #4]
 800addc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ade0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ade4:	3301      	adds	r3, #1
 800ade6:	429a      	cmp	r2, r3
 800ade8:	fbb2 f6f3 	udiv	r6, r2, r3
 800adec:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800adf0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800adf4:	d332      	bcc.n	800ae5c <quorem+0xa0>
 800adf6:	f04f 0e00 	mov.w	lr, #0
 800adfa:	4640      	mov	r0, r8
 800adfc:	46ac      	mov	ip, r5
 800adfe:	46f2      	mov	sl, lr
 800ae00:	f850 2b04 	ldr.w	r2, [r0], #4
 800ae04:	b293      	uxth	r3, r2
 800ae06:	fb06 e303 	mla	r3, r6, r3, lr
 800ae0a:	0c12      	lsrs	r2, r2, #16
 800ae0c:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800ae10:	fb06 e202 	mla	r2, r6, r2, lr
 800ae14:	b29b      	uxth	r3, r3
 800ae16:	ebaa 0303 	sub.w	r3, sl, r3
 800ae1a:	f8dc a000 	ldr.w	sl, [ip]
 800ae1e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800ae22:	fa1f fa8a 	uxth.w	sl, sl
 800ae26:	4453      	add	r3, sl
 800ae28:	fa1f fa82 	uxth.w	sl, r2
 800ae2c:	f8dc 2000 	ldr.w	r2, [ip]
 800ae30:	4581      	cmp	r9, r0
 800ae32:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800ae36:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ae3a:	b29b      	uxth	r3, r3
 800ae3c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ae40:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800ae44:	f84c 3b04 	str.w	r3, [ip], #4
 800ae48:	d2da      	bcs.n	800ae00 <quorem+0x44>
 800ae4a:	f855 300b 	ldr.w	r3, [r5, fp]
 800ae4e:	b92b      	cbnz	r3, 800ae5c <quorem+0xa0>
 800ae50:	9b01      	ldr	r3, [sp, #4]
 800ae52:	3b04      	subs	r3, #4
 800ae54:	429d      	cmp	r5, r3
 800ae56:	461a      	mov	r2, r3
 800ae58:	d32f      	bcc.n	800aeba <quorem+0xfe>
 800ae5a:	613c      	str	r4, [r7, #16]
 800ae5c:	4638      	mov	r0, r7
 800ae5e:	f001 f8cb 	bl	800bff8 <__mcmp>
 800ae62:	2800      	cmp	r0, #0
 800ae64:	db25      	blt.n	800aeb2 <quorem+0xf6>
 800ae66:	4628      	mov	r0, r5
 800ae68:	f04f 0c00 	mov.w	ip, #0
 800ae6c:	3601      	adds	r6, #1
 800ae6e:	f858 1b04 	ldr.w	r1, [r8], #4
 800ae72:	f8d0 e000 	ldr.w	lr, [r0]
 800ae76:	b28b      	uxth	r3, r1
 800ae78:	ebac 0303 	sub.w	r3, ip, r3
 800ae7c:	fa1f f28e 	uxth.w	r2, lr
 800ae80:	4413      	add	r3, r2
 800ae82:	0c0a      	lsrs	r2, r1, #16
 800ae84:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800ae88:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ae8c:	b29b      	uxth	r3, r3
 800ae8e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ae92:	45c1      	cmp	r9, r8
 800ae94:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800ae98:	f840 3b04 	str.w	r3, [r0], #4
 800ae9c:	d2e7      	bcs.n	800ae6e <quorem+0xb2>
 800ae9e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800aea2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800aea6:	b922      	cbnz	r2, 800aeb2 <quorem+0xf6>
 800aea8:	3b04      	subs	r3, #4
 800aeaa:	429d      	cmp	r5, r3
 800aeac:	461a      	mov	r2, r3
 800aeae:	d30a      	bcc.n	800aec6 <quorem+0x10a>
 800aeb0:	613c      	str	r4, [r7, #16]
 800aeb2:	4630      	mov	r0, r6
 800aeb4:	b003      	add	sp, #12
 800aeb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aeba:	6812      	ldr	r2, [r2, #0]
 800aebc:	3b04      	subs	r3, #4
 800aebe:	2a00      	cmp	r2, #0
 800aec0:	d1cb      	bne.n	800ae5a <quorem+0x9e>
 800aec2:	3c01      	subs	r4, #1
 800aec4:	e7c6      	b.n	800ae54 <quorem+0x98>
 800aec6:	6812      	ldr	r2, [r2, #0]
 800aec8:	3b04      	subs	r3, #4
 800aeca:	2a00      	cmp	r2, #0
 800aecc:	d1f0      	bne.n	800aeb0 <quorem+0xf4>
 800aece:	3c01      	subs	r4, #1
 800aed0:	e7eb      	b.n	800aeaa <quorem+0xee>
 800aed2:	2000      	movs	r0, #0
 800aed4:	e7ee      	b.n	800aeb4 <quorem+0xf8>
	...

0800aed8 <_dtoa_r>:
 800aed8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aedc:	4616      	mov	r6, r2
 800aede:	461f      	mov	r7, r3
 800aee0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800aee2:	b099      	sub	sp, #100	; 0x64
 800aee4:	4605      	mov	r5, r0
 800aee6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800aeea:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800aeee:	b974      	cbnz	r4, 800af0e <_dtoa_r+0x36>
 800aef0:	2010      	movs	r0, #16
 800aef2:	f000 fde3 	bl	800babc <malloc>
 800aef6:	4602      	mov	r2, r0
 800aef8:	6268      	str	r0, [r5, #36]	; 0x24
 800aefa:	b920      	cbnz	r0, 800af06 <_dtoa_r+0x2e>
 800aefc:	21ea      	movs	r1, #234	; 0xea
 800aefe:	4bae      	ldr	r3, [pc, #696]	; (800b1b8 <_dtoa_r+0x2e0>)
 800af00:	48ae      	ldr	r0, [pc, #696]	; (800b1bc <_dtoa_r+0x2e4>)
 800af02:	f001 fba1 	bl	800c648 <__assert_func>
 800af06:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800af0a:	6004      	str	r4, [r0, #0]
 800af0c:	60c4      	str	r4, [r0, #12]
 800af0e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800af10:	6819      	ldr	r1, [r3, #0]
 800af12:	b151      	cbz	r1, 800af2a <_dtoa_r+0x52>
 800af14:	685a      	ldr	r2, [r3, #4]
 800af16:	2301      	movs	r3, #1
 800af18:	4093      	lsls	r3, r2
 800af1a:	604a      	str	r2, [r1, #4]
 800af1c:	608b      	str	r3, [r1, #8]
 800af1e:	4628      	mov	r0, r5
 800af20:	f000 fe30 	bl	800bb84 <_Bfree>
 800af24:	2200      	movs	r2, #0
 800af26:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800af28:	601a      	str	r2, [r3, #0]
 800af2a:	1e3b      	subs	r3, r7, #0
 800af2c:	bfaf      	iteee	ge
 800af2e:	2300      	movge	r3, #0
 800af30:	2201      	movlt	r2, #1
 800af32:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800af36:	9305      	strlt	r3, [sp, #20]
 800af38:	bfa8      	it	ge
 800af3a:	f8c8 3000 	strge.w	r3, [r8]
 800af3e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800af42:	4b9f      	ldr	r3, [pc, #636]	; (800b1c0 <_dtoa_r+0x2e8>)
 800af44:	bfb8      	it	lt
 800af46:	f8c8 2000 	strlt.w	r2, [r8]
 800af4a:	ea33 0309 	bics.w	r3, r3, r9
 800af4e:	d119      	bne.n	800af84 <_dtoa_r+0xac>
 800af50:	f242 730f 	movw	r3, #9999	; 0x270f
 800af54:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800af56:	6013      	str	r3, [r2, #0]
 800af58:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800af5c:	4333      	orrs	r3, r6
 800af5e:	f000 8580 	beq.w	800ba62 <_dtoa_r+0xb8a>
 800af62:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800af64:	b953      	cbnz	r3, 800af7c <_dtoa_r+0xa4>
 800af66:	4b97      	ldr	r3, [pc, #604]	; (800b1c4 <_dtoa_r+0x2ec>)
 800af68:	e022      	b.n	800afb0 <_dtoa_r+0xd8>
 800af6a:	4b97      	ldr	r3, [pc, #604]	; (800b1c8 <_dtoa_r+0x2f0>)
 800af6c:	9308      	str	r3, [sp, #32]
 800af6e:	3308      	adds	r3, #8
 800af70:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800af72:	6013      	str	r3, [r2, #0]
 800af74:	9808      	ldr	r0, [sp, #32]
 800af76:	b019      	add	sp, #100	; 0x64
 800af78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af7c:	4b91      	ldr	r3, [pc, #580]	; (800b1c4 <_dtoa_r+0x2ec>)
 800af7e:	9308      	str	r3, [sp, #32]
 800af80:	3303      	adds	r3, #3
 800af82:	e7f5      	b.n	800af70 <_dtoa_r+0x98>
 800af84:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800af88:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800af8c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800af90:	2200      	movs	r2, #0
 800af92:	2300      	movs	r3, #0
 800af94:	f7f5 fd12 	bl	80009bc <__aeabi_dcmpeq>
 800af98:	4680      	mov	r8, r0
 800af9a:	b158      	cbz	r0, 800afb4 <_dtoa_r+0xdc>
 800af9c:	2301      	movs	r3, #1
 800af9e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800afa0:	6013      	str	r3, [r2, #0]
 800afa2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	f000 8559 	beq.w	800ba5c <_dtoa_r+0xb84>
 800afaa:	4888      	ldr	r0, [pc, #544]	; (800b1cc <_dtoa_r+0x2f4>)
 800afac:	6018      	str	r0, [r3, #0]
 800afae:	1e43      	subs	r3, r0, #1
 800afb0:	9308      	str	r3, [sp, #32]
 800afb2:	e7df      	b.n	800af74 <_dtoa_r+0x9c>
 800afb4:	ab16      	add	r3, sp, #88	; 0x58
 800afb6:	9301      	str	r3, [sp, #4]
 800afb8:	ab17      	add	r3, sp, #92	; 0x5c
 800afba:	9300      	str	r3, [sp, #0]
 800afbc:	4628      	mov	r0, r5
 800afbe:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800afc2:	f001 f8c5 	bl	800c150 <__d2b>
 800afc6:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800afca:	4682      	mov	sl, r0
 800afcc:	2c00      	cmp	r4, #0
 800afce:	d07e      	beq.n	800b0ce <_dtoa_r+0x1f6>
 800afd0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800afd4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800afd6:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800afda:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800afde:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800afe2:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800afe6:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800afea:	2200      	movs	r2, #0
 800afec:	4b78      	ldr	r3, [pc, #480]	; (800b1d0 <_dtoa_r+0x2f8>)
 800afee:	f7f5 f8c5 	bl	800017c <__aeabi_dsub>
 800aff2:	a36b      	add	r3, pc, #428	; (adr r3, 800b1a0 <_dtoa_r+0x2c8>)
 800aff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aff8:	f7f5 fa78 	bl	80004ec <__aeabi_dmul>
 800affc:	a36a      	add	r3, pc, #424	; (adr r3, 800b1a8 <_dtoa_r+0x2d0>)
 800affe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b002:	f7f5 f8bd 	bl	8000180 <__adddf3>
 800b006:	4606      	mov	r6, r0
 800b008:	4620      	mov	r0, r4
 800b00a:	460f      	mov	r7, r1
 800b00c:	f7f5 fa04 	bl	8000418 <__aeabi_i2d>
 800b010:	a367      	add	r3, pc, #412	; (adr r3, 800b1b0 <_dtoa_r+0x2d8>)
 800b012:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b016:	f7f5 fa69 	bl	80004ec <__aeabi_dmul>
 800b01a:	4602      	mov	r2, r0
 800b01c:	460b      	mov	r3, r1
 800b01e:	4630      	mov	r0, r6
 800b020:	4639      	mov	r1, r7
 800b022:	f7f5 f8ad 	bl	8000180 <__adddf3>
 800b026:	4606      	mov	r6, r0
 800b028:	460f      	mov	r7, r1
 800b02a:	f7f5 fd0f 	bl	8000a4c <__aeabi_d2iz>
 800b02e:	2200      	movs	r2, #0
 800b030:	4681      	mov	r9, r0
 800b032:	2300      	movs	r3, #0
 800b034:	4630      	mov	r0, r6
 800b036:	4639      	mov	r1, r7
 800b038:	f7f5 fcca 	bl	80009d0 <__aeabi_dcmplt>
 800b03c:	b148      	cbz	r0, 800b052 <_dtoa_r+0x17a>
 800b03e:	4648      	mov	r0, r9
 800b040:	f7f5 f9ea 	bl	8000418 <__aeabi_i2d>
 800b044:	4632      	mov	r2, r6
 800b046:	463b      	mov	r3, r7
 800b048:	f7f5 fcb8 	bl	80009bc <__aeabi_dcmpeq>
 800b04c:	b908      	cbnz	r0, 800b052 <_dtoa_r+0x17a>
 800b04e:	f109 39ff 	add.w	r9, r9, #4294967295
 800b052:	f1b9 0f16 	cmp.w	r9, #22
 800b056:	d857      	bhi.n	800b108 <_dtoa_r+0x230>
 800b058:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b05c:	4b5d      	ldr	r3, [pc, #372]	; (800b1d4 <_dtoa_r+0x2fc>)
 800b05e:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800b062:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b066:	f7f5 fcb3 	bl	80009d0 <__aeabi_dcmplt>
 800b06a:	2800      	cmp	r0, #0
 800b06c:	d04e      	beq.n	800b10c <_dtoa_r+0x234>
 800b06e:	2300      	movs	r3, #0
 800b070:	f109 39ff 	add.w	r9, r9, #4294967295
 800b074:	930f      	str	r3, [sp, #60]	; 0x3c
 800b076:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800b078:	1b1c      	subs	r4, r3, r4
 800b07a:	1e63      	subs	r3, r4, #1
 800b07c:	9309      	str	r3, [sp, #36]	; 0x24
 800b07e:	bf49      	itett	mi
 800b080:	f1c4 0301 	rsbmi	r3, r4, #1
 800b084:	2300      	movpl	r3, #0
 800b086:	9306      	strmi	r3, [sp, #24]
 800b088:	2300      	movmi	r3, #0
 800b08a:	bf54      	ite	pl
 800b08c:	9306      	strpl	r3, [sp, #24]
 800b08e:	9309      	strmi	r3, [sp, #36]	; 0x24
 800b090:	f1b9 0f00 	cmp.w	r9, #0
 800b094:	db3c      	blt.n	800b110 <_dtoa_r+0x238>
 800b096:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b098:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800b09c:	444b      	add	r3, r9
 800b09e:	9309      	str	r3, [sp, #36]	; 0x24
 800b0a0:	2300      	movs	r3, #0
 800b0a2:	930a      	str	r3, [sp, #40]	; 0x28
 800b0a4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b0a6:	2b09      	cmp	r3, #9
 800b0a8:	d86c      	bhi.n	800b184 <_dtoa_r+0x2ac>
 800b0aa:	2b05      	cmp	r3, #5
 800b0ac:	bfc4      	itt	gt
 800b0ae:	3b04      	subgt	r3, #4
 800b0b0:	9322      	strgt	r3, [sp, #136]	; 0x88
 800b0b2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b0b4:	bfc8      	it	gt
 800b0b6:	2400      	movgt	r4, #0
 800b0b8:	f1a3 0302 	sub.w	r3, r3, #2
 800b0bc:	bfd8      	it	le
 800b0be:	2401      	movle	r4, #1
 800b0c0:	2b03      	cmp	r3, #3
 800b0c2:	f200 808b 	bhi.w	800b1dc <_dtoa_r+0x304>
 800b0c6:	e8df f003 	tbb	[pc, r3]
 800b0ca:	4f2d      	.short	0x4f2d
 800b0cc:	5b4d      	.short	0x5b4d
 800b0ce:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800b0d2:	441c      	add	r4, r3
 800b0d4:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800b0d8:	2b20      	cmp	r3, #32
 800b0da:	bfc3      	ittte	gt
 800b0dc:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b0e0:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800b0e4:	fa09 f303 	lslgt.w	r3, r9, r3
 800b0e8:	f1c3 0320 	rsble	r3, r3, #32
 800b0ec:	bfc6      	itte	gt
 800b0ee:	fa26 f000 	lsrgt.w	r0, r6, r0
 800b0f2:	4318      	orrgt	r0, r3
 800b0f4:	fa06 f003 	lslle.w	r0, r6, r3
 800b0f8:	f7f5 f97e 	bl	80003f8 <__aeabi_ui2d>
 800b0fc:	2301      	movs	r3, #1
 800b0fe:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800b102:	3c01      	subs	r4, #1
 800b104:	9313      	str	r3, [sp, #76]	; 0x4c
 800b106:	e770      	b.n	800afea <_dtoa_r+0x112>
 800b108:	2301      	movs	r3, #1
 800b10a:	e7b3      	b.n	800b074 <_dtoa_r+0x19c>
 800b10c:	900f      	str	r0, [sp, #60]	; 0x3c
 800b10e:	e7b2      	b.n	800b076 <_dtoa_r+0x19e>
 800b110:	9b06      	ldr	r3, [sp, #24]
 800b112:	eba3 0309 	sub.w	r3, r3, r9
 800b116:	9306      	str	r3, [sp, #24]
 800b118:	f1c9 0300 	rsb	r3, r9, #0
 800b11c:	930a      	str	r3, [sp, #40]	; 0x28
 800b11e:	2300      	movs	r3, #0
 800b120:	930e      	str	r3, [sp, #56]	; 0x38
 800b122:	e7bf      	b.n	800b0a4 <_dtoa_r+0x1cc>
 800b124:	2300      	movs	r3, #0
 800b126:	930b      	str	r3, [sp, #44]	; 0x2c
 800b128:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	dc59      	bgt.n	800b1e2 <_dtoa_r+0x30a>
 800b12e:	f04f 0b01 	mov.w	fp, #1
 800b132:	465b      	mov	r3, fp
 800b134:	f8cd b008 	str.w	fp, [sp, #8]
 800b138:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 800b13c:	2200      	movs	r2, #0
 800b13e:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800b140:	6042      	str	r2, [r0, #4]
 800b142:	2204      	movs	r2, #4
 800b144:	f102 0614 	add.w	r6, r2, #20
 800b148:	429e      	cmp	r6, r3
 800b14a:	6841      	ldr	r1, [r0, #4]
 800b14c:	d94f      	bls.n	800b1ee <_dtoa_r+0x316>
 800b14e:	4628      	mov	r0, r5
 800b150:	f000 fcd8 	bl	800bb04 <_Balloc>
 800b154:	9008      	str	r0, [sp, #32]
 800b156:	2800      	cmp	r0, #0
 800b158:	d14d      	bne.n	800b1f6 <_dtoa_r+0x31e>
 800b15a:	4602      	mov	r2, r0
 800b15c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800b160:	4b1d      	ldr	r3, [pc, #116]	; (800b1d8 <_dtoa_r+0x300>)
 800b162:	e6cd      	b.n	800af00 <_dtoa_r+0x28>
 800b164:	2301      	movs	r3, #1
 800b166:	e7de      	b.n	800b126 <_dtoa_r+0x24e>
 800b168:	2300      	movs	r3, #0
 800b16a:	930b      	str	r3, [sp, #44]	; 0x2c
 800b16c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b16e:	eb09 0b03 	add.w	fp, r9, r3
 800b172:	f10b 0301 	add.w	r3, fp, #1
 800b176:	2b01      	cmp	r3, #1
 800b178:	9302      	str	r3, [sp, #8]
 800b17a:	bfb8      	it	lt
 800b17c:	2301      	movlt	r3, #1
 800b17e:	e7dd      	b.n	800b13c <_dtoa_r+0x264>
 800b180:	2301      	movs	r3, #1
 800b182:	e7f2      	b.n	800b16a <_dtoa_r+0x292>
 800b184:	2401      	movs	r4, #1
 800b186:	2300      	movs	r3, #0
 800b188:	940b      	str	r4, [sp, #44]	; 0x2c
 800b18a:	9322      	str	r3, [sp, #136]	; 0x88
 800b18c:	f04f 3bff 	mov.w	fp, #4294967295
 800b190:	2200      	movs	r2, #0
 800b192:	2312      	movs	r3, #18
 800b194:	f8cd b008 	str.w	fp, [sp, #8]
 800b198:	9223      	str	r2, [sp, #140]	; 0x8c
 800b19a:	e7cf      	b.n	800b13c <_dtoa_r+0x264>
 800b19c:	f3af 8000 	nop.w
 800b1a0:	636f4361 	.word	0x636f4361
 800b1a4:	3fd287a7 	.word	0x3fd287a7
 800b1a8:	8b60c8b3 	.word	0x8b60c8b3
 800b1ac:	3fc68a28 	.word	0x3fc68a28
 800b1b0:	509f79fb 	.word	0x509f79fb
 800b1b4:	3fd34413 	.word	0x3fd34413
 800b1b8:	0800de3d 	.word	0x0800de3d
 800b1bc:	0800de54 	.word	0x0800de54
 800b1c0:	7ff00000 	.word	0x7ff00000
 800b1c4:	0800de39 	.word	0x0800de39
 800b1c8:	0800de30 	.word	0x0800de30
 800b1cc:	0800de0d 	.word	0x0800de0d
 800b1d0:	3ff80000 	.word	0x3ff80000
 800b1d4:	0800df50 	.word	0x0800df50
 800b1d8:	0800deb3 	.word	0x0800deb3
 800b1dc:	2301      	movs	r3, #1
 800b1de:	930b      	str	r3, [sp, #44]	; 0x2c
 800b1e0:	e7d4      	b.n	800b18c <_dtoa_r+0x2b4>
 800b1e2:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 800b1e6:	465b      	mov	r3, fp
 800b1e8:	f8cd b008 	str.w	fp, [sp, #8]
 800b1ec:	e7a6      	b.n	800b13c <_dtoa_r+0x264>
 800b1ee:	3101      	adds	r1, #1
 800b1f0:	6041      	str	r1, [r0, #4]
 800b1f2:	0052      	lsls	r2, r2, #1
 800b1f4:	e7a6      	b.n	800b144 <_dtoa_r+0x26c>
 800b1f6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b1f8:	9a08      	ldr	r2, [sp, #32]
 800b1fa:	601a      	str	r2, [r3, #0]
 800b1fc:	9b02      	ldr	r3, [sp, #8]
 800b1fe:	2b0e      	cmp	r3, #14
 800b200:	f200 80a8 	bhi.w	800b354 <_dtoa_r+0x47c>
 800b204:	2c00      	cmp	r4, #0
 800b206:	f000 80a5 	beq.w	800b354 <_dtoa_r+0x47c>
 800b20a:	f1b9 0f00 	cmp.w	r9, #0
 800b20e:	dd34      	ble.n	800b27a <_dtoa_r+0x3a2>
 800b210:	4a9a      	ldr	r2, [pc, #616]	; (800b47c <_dtoa_r+0x5a4>)
 800b212:	f009 030f 	and.w	r3, r9, #15
 800b216:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b21a:	f419 7f80 	tst.w	r9, #256	; 0x100
 800b21e:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b222:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800b226:	ea4f 1429 	mov.w	r4, r9, asr #4
 800b22a:	d016      	beq.n	800b25a <_dtoa_r+0x382>
 800b22c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b230:	4b93      	ldr	r3, [pc, #588]	; (800b480 <_dtoa_r+0x5a8>)
 800b232:	2703      	movs	r7, #3
 800b234:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b238:	f7f5 fa82 	bl	8000740 <__aeabi_ddiv>
 800b23c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b240:	f004 040f 	and.w	r4, r4, #15
 800b244:	4e8e      	ldr	r6, [pc, #568]	; (800b480 <_dtoa_r+0x5a8>)
 800b246:	b954      	cbnz	r4, 800b25e <_dtoa_r+0x386>
 800b248:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b24c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b250:	f7f5 fa76 	bl	8000740 <__aeabi_ddiv>
 800b254:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b258:	e029      	b.n	800b2ae <_dtoa_r+0x3d6>
 800b25a:	2702      	movs	r7, #2
 800b25c:	e7f2      	b.n	800b244 <_dtoa_r+0x36c>
 800b25e:	07e1      	lsls	r1, r4, #31
 800b260:	d508      	bpl.n	800b274 <_dtoa_r+0x39c>
 800b262:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b266:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b26a:	f7f5 f93f 	bl	80004ec <__aeabi_dmul>
 800b26e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800b272:	3701      	adds	r7, #1
 800b274:	1064      	asrs	r4, r4, #1
 800b276:	3608      	adds	r6, #8
 800b278:	e7e5      	b.n	800b246 <_dtoa_r+0x36e>
 800b27a:	f000 80a5 	beq.w	800b3c8 <_dtoa_r+0x4f0>
 800b27e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b282:	f1c9 0400 	rsb	r4, r9, #0
 800b286:	4b7d      	ldr	r3, [pc, #500]	; (800b47c <_dtoa_r+0x5a4>)
 800b288:	f004 020f 	and.w	r2, r4, #15
 800b28c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b290:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b294:	f7f5 f92a 	bl	80004ec <__aeabi_dmul>
 800b298:	2702      	movs	r7, #2
 800b29a:	2300      	movs	r3, #0
 800b29c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b2a0:	4e77      	ldr	r6, [pc, #476]	; (800b480 <_dtoa_r+0x5a8>)
 800b2a2:	1124      	asrs	r4, r4, #4
 800b2a4:	2c00      	cmp	r4, #0
 800b2a6:	f040 8084 	bne.w	800b3b2 <_dtoa_r+0x4da>
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d1d2      	bne.n	800b254 <_dtoa_r+0x37c>
 800b2ae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	f000 808b 	beq.w	800b3cc <_dtoa_r+0x4f4>
 800b2b6:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800b2ba:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800b2be:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b2c2:	2200      	movs	r2, #0
 800b2c4:	4b6f      	ldr	r3, [pc, #444]	; (800b484 <_dtoa_r+0x5ac>)
 800b2c6:	f7f5 fb83 	bl	80009d0 <__aeabi_dcmplt>
 800b2ca:	2800      	cmp	r0, #0
 800b2cc:	d07e      	beq.n	800b3cc <_dtoa_r+0x4f4>
 800b2ce:	9b02      	ldr	r3, [sp, #8]
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d07b      	beq.n	800b3cc <_dtoa_r+0x4f4>
 800b2d4:	f1bb 0f00 	cmp.w	fp, #0
 800b2d8:	dd38      	ble.n	800b34c <_dtoa_r+0x474>
 800b2da:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b2de:	2200      	movs	r2, #0
 800b2e0:	4b69      	ldr	r3, [pc, #420]	; (800b488 <_dtoa_r+0x5b0>)
 800b2e2:	f7f5 f903 	bl	80004ec <__aeabi_dmul>
 800b2e6:	465c      	mov	r4, fp
 800b2e8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b2ec:	f109 38ff 	add.w	r8, r9, #4294967295
 800b2f0:	3701      	adds	r7, #1
 800b2f2:	4638      	mov	r0, r7
 800b2f4:	f7f5 f890 	bl	8000418 <__aeabi_i2d>
 800b2f8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b2fc:	f7f5 f8f6 	bl	80004ec <__aeabi_dmul>
 800b300:	2200      	movs	r2, #0
 800b302:	4b62      	ldr	r3, [pc, #392]	; (800b48c <_dtoa_r+0x5b4>)
 800b304:	f7f4 ff3c 	bl	8000180 <__adddf3>
 800b308:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800b30c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800b310:	9611      	str	r6, [sp, #68]	; 0x44
 800b312:	2c00      	cmp	r4, #0
 800b314:	d15d      	bne.n	800b3d2 <_dtoa_r+0x4fa>
 800b316:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b31a:	2200      	movs	r2, #0
 800b31c:	4b5c      	ldr	r3, [pc, #368]	; (800b490 <_dtoa_r+0x5b8>)
 800b31e:	f7f4 ff2d 	bl	800017c <__aeabi_dsub>
 800b322:	4602      	mov	r2, r0
 800b324:	460b      	mov	r3, r1
 800b326:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b32a:	4633      	mov	r3, r6
 800b32c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b32e:	f7f5 fb6d 	bl	8000a0c <__aeabi_dcmpgt>
 800b332:	2800      	cmp	r0, #0
 800b334:	f040 829e 	bne.w	800b874 <_dtoa_r+0x99c>
 800b338:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b33c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b33e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800b342:	f7f5 fb45 	bl	80009d0 <__aeabi_dcmplt>
 800b346:	2800      	cmp	r0, #0
 800b348:	f040 8292 	bne.w	800b870 <_dtoa_r+0x998>
 800b34c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800b350:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800b354:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b356:	2b00      	cmp	r3, #0
 800b358:	f2c0 8153 	blt.w	800b602 <_dtoa_r+0x72a>
 800b35c:	f1b9 0f0e 	cmp.w	r9, #14
 800b360:	f300 814f 	bgt.w	800b602 <_dtoa_r+0x72a>
 800b364:	4b45      	ldr	r3, [pc, #276]	; (800b47c <_dtoa_r+0x5a4>)
 800b366:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800b36a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b36e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800b372:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b374:	2b00      	cmp	r3, #0
 800b376:	f280 80db 	bge.w	800b530 <_dtoa_r+0x658>
 800b37a:	9b02      	ldr	r3, [sp, #8]
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	f300 80d7 	bgt.w	800b530 <_dtoa_r+0x658>
 800b382:	f040 8274 	bne.w	800b86e <_dtoa_r+0x996>
 800b386:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b38a:	2200      	movs	r2, #0
 800b38c:	4b40      	ldr	r3, [pc, #256]	; (800b490 <_dtoa_r+0x5b8>)
 800b38e:	f7f5 f8ad 	bl	80004ec <__aeabi_dmul>
 800b392:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b396:	f7f5 fb2f 	bl	80009f8 <__aeabi_dcmpge>
 800b39a:	9c02      	ldr	r4, [sp, #8]
 800b39c:	4626      	mov	r6, r4
 800b39e:	2800      	cmp	r0, #0
 800b3a0:	f040 824a 	bne.w	800b838 <_dtoa_r+0x960>
 800b3a4:	2331      	movs	r3, #49	; 0x31
 800b3a6:	9f08      	ldr	r7, [sp, #32]
 800b3a8:	f109 0901 	add.w	r9, r9, #1
 800b3ac:	f807 3b01 	strb.w	r3, [r7], #1
 800b3b0:	e246      	b.n	800b840 <_dtoa_r+0x968>
 800b3b2:	07e2      	lsls	r2, r4, #31
 800b3b4:	d505      	bpl.n	800b3c2 <_dtoa_r+0x4ea>
 800b3b6:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b3ba:	f7f5 f897 	bl	80004ec <__aeabi_dmul>
 800b3be:	2301      	movs	r3, #1
 800b3c0:	3701      	adds	r7, #1
 800b3c2:	1064      	asrs	r4, r4, #1
 800b3c4:	3608      	adds	r6, #8
 800b3c6:	e76d      	b.n	800b2a4 <_dtoa_r+0x3cc>
 800b3c8:	2702      	movs	r7, #2
 800b3ca:	e770      	b.n	800b2ae <_dtoa_r+0x3d6>
 800b3cc:	46c8      	mov	r8, r9
 800b3ce:	9c02      	ldr	r4, [sp, #8]
 800b3d0:	e78f      	b.n	800b2f2 <_dtoa_r+0x41a>
 800b3d2:	9908      	ldr	r1, [sp, #32]
 800b3d4:	4b29      	ldr	r3, [pc, #164]	; (800b47c <_dtoa_r+0x5a4>)
 800b3d6:	4421      	add	r1, r4
 800b3d8:	9112      	str	r1, [sp, #72]	; 0x48
 800b3da:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b3dc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b3e0:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800b3e4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b3e8:	2900      	cmp	r1, #0
 800b3ea:	d055      	beq.n	800b498 <_dtoa_r+0x5c0>
 800b3ec:	2000      	movs	r0, #0
 800b3ee:	4929      	ldr	r1, [pc, #164]	; (800b494 <_dtoa_r+0x5bc>)
 800b3f0:	f7f5 f9a6 	bl	8000740 <__aeabi_ddiv>
 800b3f4:	463b      	mov	r3, r7
 800b3f6:	4632      	mov	r2, r6
 800b3f8:	f7f4 fec0 	bl	800017c <__aeabi_dsub>
 800b3fc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800b400:	9f08      	ldr	r7, [sp, #32]
 800b402:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b406:	f7f5 fb21 	bl	8000a4c <__aeabi_d2iz>
 800b40a:	4604      	mov	r4, r0
 800b40c:	f7f5 f804 	bl	8000418 <__aeabi_i2d>
 800b410:	4602      	mov	r2, r0
 800b412:	460b      	mov	r3, r1
 800b414:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b418:	f7f4 feb0 	bl	800017c <__aeabi_dsub>
 800b41c:	4602      	mov	r2, r0
 800b41e:	460b      	mov	r3, r1
 800b420:	3430      	adds	r4, #48	; 0x30
 800b422:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b426:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b42a:	f807 4b01 	strb.w	r4, [r7], #1
 800b42e:	f7f5 facf 	bl	80009d0 <__aeabi_dcmplt>
 800b432:	2800      	cmp	r0, #0
 800b434:	d174      	bne.n	800b520 <_dtoa_r+0x648>
 800b436:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b43a:	2000      	movs	r0, #0
 800b43c:	4911      	ldr	r1, [pc, #68]	; (800b484 <_dtoa_r+0x5ac>)
 800b43e:	f7f4 fe9d 	bl	800017c <__aeabi_dsub>
 800b442:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b446:	f7f5 fac3 	bl	80009d0 <__aeabi_dcmplt>
 800b44a:	2800      	cmp	r0, #0
 800b44c:	f040 80b6 	bne.w	800b5bc <_dtoa_r+0x6e4>
 800b450:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b452:	429f      	cmp	r7, r3
 800b454:	f43f af7a 	beq.w	800b34c <_dtoa_r+0x474>
 800b458:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b45c:	2200      	movs	r2, #0
 800b45e:	4b0a      	ldr	r3, [pc, #40]	; (800b488 <_dtoa_r+0x5b0>)
 800b460:	f7f5 f844 	bl	80004ec <__aeabi_dmul>
 800b464:	2200      	movs	r2, #0
 800b466:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800b46a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b46e:	4b06      	ldr	r3, [pc, #24]	; (800b488 <_dtoa_r+0x5b0>)
 800b470:	f7f5 f83c 	bl	80004ec <__aeabi_dmul>
 800b474:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b478:	e7c3      	b.n	800b402 <_dtoa_r+0x52a>
 800b47a:	bf00      	nop
 800b47c:	0800df50 	.word	0x0800df50
 800b480:	0800df28 	.word	0x0800df28
 800b484:	3ff00000 	.word	0x3ff00000
 800b488:	40240000 	.word	0x40240000
 800b48c:	401c0000 	.word	0x401c0000
 800b490:	40140000 	.word	0x40140000
 800b494:	3fe00000 	.word	0x3fe00000
 800b498:	4630      	mov	r0, r6
 800b49a:	4639      	mov	r1, r7
 800b49c:	f7f5 f826 	bl	80004ec <__aeabi_dmul>
 800b4a0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b4a2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800b4a6:	9c08      	ldr	r4, [sp, #32]
 800b4a8:	9314      	str	r3, [sp, #80]	; 0x50
 800b4aa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b4ae:	f7f5 facd 	bl	8000a4c <__aeabi_d2iz>
 800b4b2:	9015      	str	r0, [sp, #84]	; 0x54
 800b4b4:	f7f4 ffb0 	bl	8000418 <__aeabi_i2d>
 800b4b8:	4602      	mov	r2, r0
 800b4ba:	460b      	mov	r3, r1
 800b4bc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b4c0:	f7f4 fe5c 	bl	800017c <__aeabi_dsub>
 800b4c4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b4c6:	4606      	mov	r6, r0
 800b4c8:	3330      	adds	r3, #48	; 0x30
 800b4ca:	f804 3b01 	strb.w	r3, [r4], #1
 800b4ce:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b4d0:	460f      	mov	r7, r1
 800b4d2:	429c      	cmp	r4, r3
 800b4d4:	f04f 0200 	mov.w	r2, #0
 800b4d8:	d124      	bne.n	800b524 <_dtoa_r+0x64c>
 800b4da:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b4de:	4bb3      	ldr	r3, [pc, #716]	; (800b7ac <_dtoa_r+0x8d4>)
 800b4e0:	f7f4 fe4e 	bl	8000180 <__adddf3>
 800b4e4:	4602      	mov	r2, r0
 800b4e6:	460b      	mov	r3, r1
 800b4e8:	4630      	mov	r0, r6
 800b4ea:	4639      	mov	r1, r7
 800b4ec:	f7f5 fa8e 	bl	8000a0c <__aeabi_dcmpgt>
 800b4f0:	2800      	cmp	r0, #0
 800b4f2:	d162      	bne.n	800b5ba <_dtoa_r+0x6e2>
 800b4f4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b4f8:	2000      	movs	r0, #0
 800b4fa:	49ac      	ldr	r1, [pc, #688]	; (800b7ac <_dtoa_r+0x8d4>)
 800b4fc:	f7f4 fe3e 	bl	800017c <__aeabi_dsub>
 800b500:	4602      	mov	r2, r0
 800b502:	460b      	mov	r3, r1
 800b504:	4630      	mov	r0, r6
 800b506:	4639      	mov	r1, r7
 800b508:	f7f5 fa62 	bl	80009d0 <__aeabi_dcmplt>
 800b50c:	2800      	cmp	r0, #0
 800b50e:	f43f af1d 	beq.w	800b34c <_dtoa_r+0x474>
 800b512:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800b514:	1e7b      	subs	r3, r7, #1
 800b516:	9314      	str	r3, [sp, #80]	; 0x50
 800b518:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800b51c:	2b30      	cmp	r3, #48	; 0x30
 800b51e:	d0f8      	beq.n	800b512 <_dtoa_r+0x63a>
 800b520:	46c1      	mov	r9, r8
 800b522:	e03a      	b.n	800b59a <_dtoa_r+0x6c2>
 800b524:	4ba2      	ldr	r3, [pc, #648]	; (800b7b0 <_dtoa_r+0x8d8>)
 800b526:	f7f4 ffe1 	bl	80004ec <__aeabi_dmul>
 800b52a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b52e:	e7bc      	b.n	800b4aa <_dtoa_r+0x5d2>
 800b530:	9f08      	ldr	r7, [sp, #32]
 800b532:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b536:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b53a:	f7f5 f901 	bl	8000740 <__aeabi_ddiv>
 800b53e:	f7f5 fa85 	bl	8000a4c <__aeabi_d2iz>
 800b542:	4604      	mov	r4, r0
 800b544:	f7f4 ff68 	bl	8000418 <__aeabi_i2d>
 800b548:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b54c:	f7f4 ffce 	bl	80004ec <__aeabi_dmul>
 800b550:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800b554:	460b      	mov	r3, r1
 800b556:	4602      	mov	r2, r0
 800b558:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b55c:	f7f4 fe0e 	bl	800017c <__aeabi_dsub>
 800b560:	f807 6b01 	strb.w	r6, [r7], #1
 800b564:	9e08      	ldr	r6, [sp, #32]
 800b566:	9b02      	ldr	r3, [sp, #8]
 800b568:	1bbe      	subs	r6, r7, r6
 800b56a:	42b3      	cmp	r3, r6
 800b56c:	d13a      	bne.n	800b5e4 <_dtoa_r+0x70c>
 800b56e:	4602      	mov	r2, r0
 800b570:	460b      	mov	r3, r1
 800b572:	f7f4 fe05 	bl	8000180 <__adddf3>
 800b576:	4602      	mov	r2, r0
 800b578:	460b      	mov	r3, r1
 800b57a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b57e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b582:	f7f5 fa43 	bl	8000a0c <__aeabi_dcmpgt>
 800b586:	bb58      	cbnz	r0, 800b5e0 <_dtoa_r+0x708>
 800b588:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b58c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b590:	f7f5 fa14 	bl	80009bc <__aeabi_dcmpeq>
 800b594:	b108      	cbz	r0, 800b59a <_dtoa_r+0x6c2>
 800b596:	07e1      	lsls	r1, r4, #31
 800b598:	d422      	bmi.n	800b5e0 <_dtoa_r+0x708>
 800b59a:	4628      	mov	r0, r5
 800b59c:	4651      	mov	r1, sl
 800b59e:	f000 faf1 	bl	800bb84 <_Bfree>
 800b5a2:	2300      	movs	r3, #0
 800b5a4:	703b      	strb	r3, [r7, #0]
 800b5a6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800b5a8:	f109 0001 	add.w	r0, r9, #1
 800b5ac:	6018      	str	r0, [r3, #0]
 800b5ae:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	f43f acdf 	beq.w	800af74 <_dtoa_r+0x9c>
 800b5b6:	601f      	str	r7, [r3, #0]
 800b5b8:	e4dc      	b.n	800af74 <_dtoa_r+0x9c>
 800b5ba:	4627      	mov	r7, r4
 800b5bc:	463b      	mov	r3, r7
 800b5be:	461f      	mov	r7, r3
 800b5c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b5c4:	2a39      	cmp	r2, #57	; 0x39
 800b5c6:	d107      	bne.n	800b5d8 <_dtoa_r+0x700>
 800b5c8:	9a08      	ldr	r2, [sp, #32]
 800b5ca:	429a      	cmp	r2, r3
 800b5cc:	d1f7      	bne.n	800b5be <_dtoa_r+0x6e6>
 800b5ce:	2230      	movs	r2, #48	; 0x30
 800b5d0:	9908      	ldr	r1, [sp, #32]
 800b5d2:	f108 0801 	add.w	r8, r8, #1
 800b5d6:	700a      	strb	r2, [r1, #0]
 800b5d8:	781a      	ldrb	r2, [r3, #0]
 800b5da:	3201      	adds	r2, #1
 800b5dc:	701a      	strb	r2, [r3, #0]
 800b5de:	e79f      	b.n	800b520 <_dtoa_r+0x648>
 800b5e0:	46c8      	mov	r8, r9
 800b5e2:	e7eb      	b.n	800b5bc <_dtoa_r+0x6e4>
 800b5e4:	2200      	movs	r2, #0
 800b5e6:	4b72      	ldr	r3, [pc, #456]	; (800b7b0 <_dtoa_r+0x8d8>)
 800b5e8:	f7f4 ff80 	bl	80004ec <__aeabi_dmul>
 800b5ec:	4602      	mov	r2, r0
 800b5ee:	460b      	mov	r3, r1
 800b5f0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b5f4:	2200      	movs	r2, #0
 800b5f6:	2300      	movs	r3, #0
 800b5f8:	f7f5 f9e0 	bl	80009bc <__aeabi_dcmpeq>
 800b5fc:	2800      	cmp	r0, #0
 800b5fe:	d098      	beq.n	800b532 <_dtoa_r+0x65a>
 800b600:	e7cb      	b.n	800b59a <_dtoa_r+0x6c2>
 800b602:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b604:	2a00      	cmp	r2, #0
 800b606:	f000 80cd 	beq.w	800b7a4 <_dtoa_r+0x8cc>
 800b60a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800b60c:	2a01      	cmp	r2, #1
 800b60e:	f300 80af 	bgt.w	800b770 <_dtoa_r+0x898>
 800b612:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b614:	2a00      	cmp	r2, #0
 800b616:	f000 80a7 	beq.w	800b768 <_dtoa_r+0x890>
 800b61a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b61e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800b620:	9f06      	ldr	r7, [sp, #24]
 800b622:	9a06      	ldr	r2, [sp, #24]
 800b624:	2101      	movs	r1, #1
 800b626:	441a      	add	r2, r3
 800b628:	9206      	str	r2, [sp, #24]
 800b62a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b62c:	4628      	mov	r0, r5
 800b62e:	441a      	add	r2, r3
 800b630:	9209      	str	r2, [sp, #36]	; 0x24
 800b632:	f000 fb61 	bl	800bcf8 <__i2b>
 800b636:	4606      	mov	r6, r0
 800b638:	2f00      	cmp	r7, #0
 800b63a:	dd0c      	ble.n	800b656 <_dtoa_r+0x77e>
 800b63c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b63e:	2b00      	cmp	r3, #0
 800b640:	dd09      	ble.n	800b656 <_dtoa_r+0x77e>
 800b642:	42bb      	cmp	r3, r7
 800b644:	bfa8      	it	ge
 800b646:	463b      	movge	r3, r7
 800b648:	9a06      	ldr	r2, [sp, #24]
 800b64a:	1aff      	subs	r7, r7, r3
 800b64c:	1ad2      	subs	r2, r2, r3
 800b64e:	9206      	str	r2, [sp, #24]
 800b650:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b652:	1ad3      	subs	r3, r2, r3
 800b654:	9309      	str	r3, [sp, #36]	; 0x24
 800b656:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b658:	b1f3      	cbz	r3, 800b698 <_dtoa_r+0x7c0>
 800b65a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	f000 80a9 	beq.w	800b7b4 <_dtoa_r+0x8dc>
 800b662:	2c00      	cmp	r4, #0
 800b664:	dd10      	ble.n	800b688 <_dtoa_r+0x7b0>
 800b666:	4631      	mov	r1, r6
 800b668:	4622      	mov	r2, r4
 800b66a:	4628      	mov	r0, r5
 800b66c:	f000 fbfe 	bl	800be6c <__pow5mult>
 800b670:	4652      	mov	r2, sl
 800b672:	4601      	mov	r1, r0
 800b674:	4606      	mov	r6, r0
 800b676:	4628      	mov	r0, r5
 800b678:	f000 fb54 	bl	800bd24 <__multiply>
 800b67c:	4680      	mov	r8, r0
 800b67e:	4651      	mov	r1, sl
 800b680:	4628      	mov	r0, r5
 800b682:	f000 fa7f 	bl	800bb84 <_Bfree>
 800b686:	46c2      	mov	sl, r8
 800b688:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b68a:	1b1a      	subs	r2, r3, r4
 800b68c:	d004      	beq.n	800b698 <_dtoa_r+0x7c0>
 800b68e:	4651      	mov	r1, sl
 800b690:	4628      	mov	r0, r5
 800b692:	f000 fbeb 	bl	800be6c <__pow5mult>
 800b696:	4682      	mov	sl, r0
 800b698:	2101      	movs	r1, #1
 800b69a:	4628      	mov	r0, r5
 800b69c:	f000 fb2c 	bl	800bcf8 <__i2b>
 800b6a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b6a2:	4604      	mov	r4, r0
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	f340 8087 	ble.w	800b7b8 <_dtoa_r+0x8e0>
 800b6aa:	461a      	mov	r2, r3
 800b6ac:	4601      	mov	r1, r0
 800b6ae:	4628      	mov	r0, r5
 800b6b0:	f000 fbdc 	bl	800be6c <__pow5mult>
 800b6b4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b6b6:	4604      	mov	r4, r0
 800b6b8:	2b01      	cmp	r3, #1
 800b6ba:	f340 8080 	ble.w	800b7be <_dtoa_r+0x8e6>
 800b6be:	f04f 0800 	mov.w	r8, #0
 800b6c2:	6923      	ldr	r3, [r4, #16]
 800b6c4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b6c8:	6918      	ldr	r0, [r3, #16]
 800b6ca:	f000 fac7 	bl	800bc5c <__hi0bits>
 800b6ce:	f1c0 0020 	rsb	r0, r0, #32
 800b6d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b6d4:	4418      	add	r0, r3
 800b6d6:	f010 001f 	ands.w	r0, r0, #31
 800b6da:	f000 8092 	beq.w	800b802 <_dtoa_r+0x92a>
 800b6de:	f1c0 0320 	rsb	r3, r0, #32
 800b6e2:	2b04      	cmp	r3, #4
 800b6e4:	f340 808a 	ble.w	800b7fc <_dtoa_r+0x924>
 800b6e8:	f1c0 001c 	rsb	r0, r0, #28
 800b6ec:	9b06      	ldr	r3, [sp, #24]
 800b6ee:	4407      	add	r7, r0
 800b6f0:	4403      	add	r3, r0
 800b6f2:	9306      	str	r3, [sp, #24]
 800b6f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b6f6:	4403      	add	r3, r0
 800b6f8:	9309      	str	r3, [sp, #36]	; 0x24
 800b6fa:	9b06      	ldr	r3, [sp, #24]
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	dd05      	ble.n	800b70c <_dtoa_r+0x834>
 800b700:	4651      	mov	r1, sl
 800b702:	461a      	mov	r2, r3
 800b704:	4628      	mov	r0, r5
 800b706:	f000 fc0b 	bl	800bf20 <__lshift>
 800b70a:	4682      	mov	sl, r0
 800b70c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b70e:	2b00      	cmp	r3, #0
 800b710:	dd05      	ble.n	800b71e <_dtoa_r+0x846>
 800b712:	4621      	mov	r1, r4
 800b714:	461a      	mov	r2, r3
 800b716:	4628      	mov	r0, r5
 800b718:	f000 fc02 	bl	800bf20 <__lshift>
 800b71c:	4604      	mov	r4, r0
 800b71e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b720:	2b00      	cmp	r3, #0
 800b722:	d070      	beq.n	800b806 <_dtoa_r+0x92e>
 800b724:	4621      	mov	r1, r4
 800b726:	4650      	mov	r0, sl
 800b728:	f000 fc66 	bl	800bff8 <__mcmp>
 800b72c:	2800      	cmp	r0, #0
 800b72e:	da6a      	bge.n	800b806 <_dtoa_r+0x92e>
 800b730:	2300      	movs	r3, #0
 800b732:	4651      	mov	r1, sl
 800b734:	220a      	movs	r2, #10
 800b736:	4628      	mov	r0, r5
 800b738:	f000 fa46 	bl	800bbc8 <__multadd>
 800b73c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b73e:	4682      	mov	sl, r0
 800b740:	f109 39ff 	add.w	r9, r9, #4294967295
 800b744:	2b00      	cmp	r3, #0
 800b746:	f000 8193 	beq.w	800ba70 <_dtoa_r+0xb98>
 800b74a:	4631      	mov	r1, r6
 800b74c:	2300      	movs	r3, #0
 800b74e:	220a      	movs	r2, #10
 800b750:	4628      	mov	r0, r5
 800b752:	f000 fa39 	bl	800bbc8 <__multadd>
 800b756:	f1bb 0f00 	cmp.w	fp, #0
 800b75a:	4606      	mov	r6, r0
 800b75c:	f300 8093 	bgt.w	800b886 <_dtoa_r+0x9ae>
 800b760:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b762:	2b02      	cmp	r3, #2
 800b764:	dc57      	bgt.n	800b816 <_dtoa_r+0x93e>
 800b766:	e08e      	b.n	800b886 <_dtoa_r+0x9ae>
 800b768:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800b76a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b76e:	e756      	b.n	800b61e <_dtoa_r+0x746>
 800b770:	9b02      	ldr	r3, [sp, #8]
 800b772:	1e5c      	subs	r4, r3, #1
 800b774:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b776:	42a3      	cmp	r3, r4
 800b778:	bfb7      	itett	lt
 800b77a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800b77c:	1b1c      	subge	r4, r3, r4
 800b77e:	1ae2      	sublt	r2, r4, r3
 800b780:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800b782:	bfbe      	ittt	lt
 800b784:	940a      	strlt	r4, [sp, #40]	; 0x28
 800b786:	189b      	addlt	r3, r3, r2
 800b788:	930e      	strlt	r3, [sp, #56]	; 0x38
 800b78a:	9b02      	ldr	r3, [sp, #8]
 800b78c:	bfb8      	it	lt
 800b78e:	2400      	movlt	r4, #0
 800b790:	2b00      	cmp	r3, #0
 800b792:	bfbb      	ittet	lt
 800b794:	9b06      	ldrlt	r3, [sp, #24]
 800b796:	9a02      	ldrlt	r2, [sp, #8]
 800b798:	9f06      	ldrge	r7, [sp, #24]
 800b79a:	1a9f      	sublt	r7, r3, r2
 800b79c:	bfac      	ite	ge
 800b79e:	9b02      	ldrge	r3, [sp, #8]
 800b7a0:	2300      	movlt	r3, #0
 800b7a2:	e73e      	b.n	800b622 <_dtoa_r+0x74a>
 800b7a4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800b7a6:	9f06      	ldr	r7, [sp, #24]
 800b7a8:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800b7aa:	e745      	b.n	800b638 <_dtoa_r+0x760>
 800b7ac:	3fe00000 	.word	0x3fe00000
 800b7b0:	40240000 	.word	0x40240000
 800b7b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b7b6:	e76a      	b.n	800b68e <_dtoa_r+0x7b6>
 800b7b8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b7ba:	2b01      	cmp	r3, #1
 800b7bc:	dc19      	bgt.n	800b7f2 <_dtoa_r+0x91a>
 800b7be:	9b04      	ldr	r3, [sp, #16]
 800b7c0:	b9bb      	cbnz	r3, 800b7f2 <_dtoa_r+0x91a>
 800b7c2:	9b05      	ldr	r3, [sp, #20]
 800b7c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b7c8:	b99b      	cbnz	r3, 800b7f2 <_dtoa_r+0x91a>
 800b7ca:	9b05      	ldr	r3, [sp, #20]
 800b7cc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b7d0:	0d1b      	lsrs	r3, r3, #20
 800b7d2:	051b      	lsls	r3, r3, #20
 800b7d4:	b183      	cbz	r3, 800b7f8 <_dtoa_r+0x920>
 800b7d6:	f04f 0801 	mov.w	r8, #1
 800b7da:	9b06      	ldr	r3, [sp, #24]
 800b7dc:	3301      	adds	r3, #1
 800b7de:	9306      	str	r3, [sp, #24]
 800b7e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b7e2:	3301      	adds	r3, #1
 800b7e4:	9309      	str	r3, [sp, #36]	; 0x24
 800b7e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	f47f af6a 	bne.w	800b6c2 <_dtoa_r+0x7ea>
 800b7ee:	2001      	movs	r0, #1
 800b7f0:	e76f      	b.n	800b6d2 <_dtoa_r+0x7fa>
 800b7f2:	f04f 0800 	mov.w	r8, #0
 800b7f6:	e7f6      	b.n	800b7e6 <_dtoa_r+0x90e>
 800b7f8:	4698      	mov	r8, r3
 800b7fa:	e7f4      	b.n	800b7e6 <_dtoa_r+0x90e>
 800b7fc:	f43f af7d 	beq.w	800b6fa <_dtoa_r+0x822>
 800b800:	4618      	mov	r0, r3
 800b802:	301c      	adds	r0, #28
 800b804:	e772      	b.n	800b6ec <_dtoa_r+0x814>
 800b806:	9b02      	ldr	r3, [sp, #8]
 800b808:	2b00      	cmp	r3, #0
 800b80a:	dc36      	bgt.n	800b87a <_dtoa_r+0x9a2>
 800b80c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b80e:	2b02      	cmp	r3, #2
 800b810:	dd33      	ble.n	800b87a <_dtoa_r+0x9a2>
 800b812:	f8dd b008 	ldr.w	fp, [sp, #8]
 800b816:	f1bb 0f00 	cmp.w	fp, #0
 800b81a:	d10d      	bne.n	800b838 <_dtoa_r+0x960>
 800b81c:	4621      	mov	r1, r4
 800b81e:	465b      	mov	r3, fp
 800b820:	2205      	movs	r2, #5
 800b822:	4628      	mov	r0, r5
 800b824:	f000 f9d0 	bl	800bbc8 <__multadd>
 800b828:	4601      	mov	r1, r0
 800b82a:	4604      	mov	r4, r0
 800b82c:	4650      	mov	r0, sl
 800b82e:	f000 fbe3 	bl	800bff8 <__mcmp>
 800b832:	2800      	cmp	r0, #0
 800b834:	f73f adb6 	bgt.w	800b3a4 <_dtoa_r+0x4cc>
 800b838:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b83a:	9f08      	ldr	r7, [sp, #32]
 800b83c:	ea6f 0903 	mvn.w	r9, r3
 800b840:	f04f 0800 	mov.w	r8, #0
 800b844:	4621      	mov	r1, r4
 800b846:	4628      	mov	r0, r5
 800b848:	f000 f99c 	bl	800bb84 <_Bfree>
 800b84c:	2e00      	cmp	r6, #0
 800b84e:	f43f aea4 	beq.w	800b59a <_dtoa_r+0x6c2>
 800b852:	f1b8 0f00 	cmp.w	r8, #0
 800b856:	d005      	beq.n	800b864 <_dtoa_r+0x98c>
 800b858:	45b0      	cmp	r8, r6
 800b85a:	d003      	beq.n	800b864 <_dtoa_r+0x98c>
 800b85c:	4641      	mov	r1, r8
 800b85e:	4628      	mov	r0, r5
 800b860:	f000 f990 	bl	800bb84 <_Bfree>
 800b864:	4631      	mov	r1, r6
 800b866:	4628      	mov	r0, r5
 800b868:	f000 f98c 	bl	800bb84 <_Bfree>
 800b86c:	e695      	b.n	800b59a <_dtoa_r+0x6c2>
 800b86e:	2400      	movs	r4, #0
 800b870:	4626      	mov	r6, r4
 800b872:	e7e1      	b.n	800b838 <_dtoa_r+0x960>
 800b874:	46c1      	mov	r9, r8
 800b876:	4626      	mov	r6, r4
 800b878:	e594      	b.n	800b3a4 <_dtoa_r+0x4cc>
 800b87a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b87c:	f8dd b008 	ldr.w	fp, [sp, #8]
 800b880:	2b00      	cmp	r3, #0
 800b882:	f000 80fc 	beq.w	800ba7e <_dtoa_r+0xba6>
 800b886:	2f00      	cmp	r7, #0
 800b888:	dd05      	ble.n	800b896 <_dtoa_r+0x9be>
 800b88a:	4631      	mov	r1, r6
 800b88c:	463a      	mov	r2, r7
 800b88e:	4628      	mov	r0, r5
 800b890:	f000 fb46 	bl	800bf20 <__lshift>
 800b894:	4606      	mov	r6, r0
 800b896:	f1b8 0f00 	cmp.w	r8, #0
 800b89a:	d05c      	beq.n	800b956 <_dtoa_r+0xa7e>
 800b89c:	4628      	mov	r0, r5
 800b89e:	6871      	ldr	r1, [r6, #4]
 800b8a0:	f000 f930 	bl	800bb04 <_Balloc>
 800b8a4:	4607      	mov	r7, r0
 800b8a6:	b928      	cbnz	r0, 800b8b4 <_dtoa_r+0x9dc>
 800b8a8:	4602      	mov	r2, r0
 800b8aa:	f240 21ea 	movw	r1, #746	; 0x2ea
 800b8ae:	4b7e      	ldr	r3, [pc, #504]	; (800baa8 <_dtoa_r+0xbd0>)
 800b8b0:	f7ff bb26 	b.w	800af00 <_dtoa_r+0x28>
 800b8b4:	6932      	ldr	r2, [r6, #16]
 800b8b6:	f106 010c 	add.w	r1, r6, #12
 800b8ba:	3202      	adds	r2, #2
 800b8bc:	0092      	lsls	r2, r2, #2
 800b8be:	300c      	adds	r0, #12
 800b8c0:	f000 f912 	bl	800bae8 <memcpy>
 800b8c4:	2201      	movs	r2, #1
 800b8c6:	4639      	mov	r1, r7
 800b8c8:	4628      	mov	r0, r5
 800b8ca:	f000 fb29 	bl	800bf20 <__lshift>
 800b8ce:	46b0      	mov	r8, r6
 800b8d0:	4606      	mov	r6, r0
 800b8d2:	9b08      	ldr	r3, [sp, #32]
 800b8d4:	3301      	adds	r3, #1
 800b8d6:	9302      	str	r3, [sp, #8]
 800b8d8:	9b08      	ldr	r3, [sp, #32]
 800b8da:	445b      	add	r3, fp
 800b8dc:	930a      	str	r3, [sp, #40]	; 0x28
 800b8de:	9b04      	ldr	r3, [sp, #16]
 800b8e0:	f003 0301 	and.w	r3, r3, #1
 800b8e4:	9309      	str	r3, [sp, #36]	; 0x24
 800b8e6:	9b02      	ldr	r3, [sp, #8]
 800b8e8:	4621      	mov	r1, r4
 800b8ea:	4650      	mov	r0, sl
 800b8ec:	f103 3bff 	add.w	fp, r3, #4294967295
 800b8f0:	f7ff fa64 	bl	800adbc <quorem>
 800b8f4:	4603      	mov	r3, r0
 800b8f6:	4641      	mov	r1, r8
 800b8f8:	3330      	adds	r3, #48	; 0x30
 800b8fa:	9004      	str	r0, [sp, #16]
 800b8fc:	4650      	mov	r0, sl
 800b8fe:	930b      	str	r3, [sp, #44]	; 0x2c
 800b900:	f000 fb7a 	bl	800bff8 <__mcmp>
 800b904:	4632      	mov	r2, r6
 800b906:	9006      	str	r0, [sp, #24]
 800b908:	4621      	mov	r1, r4
 800b90a:	4628      	mov	r0, r5
 800b90c:	f000 fb90 	bl	800c030 <__mdiff>
 800b910:	68c2      	ldr	r2, [r0, #12]
 800b912:	4607      	mov	r7, r0
 800b914:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b916:	bb02      	cbnz	r2, 800b95a <_dtoa_r+0xa82>
 800b918:	4601      	mov	r1, r0
 800b91a:	4650      	mov	r0, sl
 800b91c:	f000 fb6c 	bl	800bff8 <__mcmp>
 800b920:	4602      	mov	r2, r0
 800b922:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b924:	4639      	mov	r1, r7
 800b926:	4628      	mov	r0, r5
 800b928:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800b92c:	f000 f92a 	bl	800bb84 <_Bfree>
 800b930:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b932:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b934:	9f02      	ldr	r7, [sp, #8]
 800b936:	ea43 0102 	orr.w	r1, r3, r2
 800b93a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b93c:	430b      	orrs	r3, r1
 800b93e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b940:	d10d      	bne.n	800b95e <_dtoa_r+0xa86>
 800b942:	2b39      	cmp	r3, #57	; 0x39
 800b944:	d027      	beq.n	800b996 <_dtoa_r+0xabe>
 800b946:	9a06      	ldr	r2, [sp, #24]
 800b948:	2a00      	cmp	r2, #0
 800b94a:	dd01      	ble.n	800b950 <_dtoa_r+0xa78>
 800b94c:	9b04      	ldr	r3, [sp, #16]
 800b94e:	3331      	adds	r3, #49	; 0x31
 800b950:	f88b 3000 	strb.w	r3, [fp]
 800b954:	e776      	b.n	800b844 <_dtoa_r+0x96c>
 800b956:	4630      	mov	r0, r6
 800b958:	e7b9      	b.n	800b8ce <_dtoa_r+0x9f6>
 800b95a:	2201      	movs	r2, #1
 800b95c:	e7e2      	b.n	800b924 <_dtoa_r+0xa4c>
 800b95e:	9906      	ldr	r1, [sp, #24]
 800b960:	2900      	cmp	r1, #0
 800b962:	db04      	blt.n	800b96e <_dtoa_r+0xa96>
 800b964:	9822      	ldr	r0, [sp, #136]	; 0x88
 800b966:	4301      	orrs	r1, r0
 800b968:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b96a:	4301      	orrs	r1, r0
 800b96c:	d120      	bne.n	800b9b0 <_dtoa_r+0xad8>
 800b96e:	2a00      	cmp	r2, #0
 800b970:	ddee      	ble.n	800b950 <_dtoa_r+0xa78>
 800b972:	4651      	mov	r1, sl
 800b974:	2201      	movs	r2, #1
 800b976:	4628      	mov	r0, r5
 800b978:	9302      	str	r3, [sp, #8]
 800b97a:	f000 fad1 	bl	800bf20 <__lshift>
 800b97e:	4621      	mov	r1, r4
 800b980:	4682      	mov	sl, r0
 800b982:	f000 fb39 	bl	800bff8 <__mcmp>
 800b986:	2800      	cmp	r0, #0
 800b988:	9b02      	ldr	r3, [sp, #8]
 800b98a:	dc02      	bgt.n	800b992 <_dtoa_r+0xaba>
 800b98c:	d1e0      	bne.n	800b950 <_dtoa_r+0xa78>
 800b98e:	07da      	lsls	r2, r3, #31
 800b990:	d5de      	bpl.n	800b950 <_dtoa_r+0xa78>
 800b992:	2b39      	cmp	r3, #57	; 0x39
 800b994:	d1da      	bne.n	800b94c <_dtoa_r+0xa74>
 800b996:	2339      	movs	r3, #57	; 0x39
 800b998:	f88b 3000 	strb.w	r3, [fp]
 800b99c:	463b      	mov	r3, r7
 800b99e:	461f      	mov	r7, r3
 800b9a0:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800b9a4:	3b01      	subs	r3, #1
 800b9a6:	2a39      	cmp	r2, #57	; 0x39
 800b9a8:	d050      	beq.n	800ba4c <_dtoa_r+0xb74>
 800b9aa:	3201      	adds	r2, #1
 800b9ac:	701a      	strb	r2, [r3, #0]
 800b9ae:	e749      	b.n	800b844 <_dtoa_r+0x96c>
 800b9b0:	2a00      	cmp	r2, #0
 800b9b2:	dd03      	ble.n	800b9bc <_dtoa_r+0xae4>
 800b9b4:	2b39      	cmp	r3, #57	; 0x39
 800b9b6:	d0ee      	beq.n	800b996 <_dtoa_r+0xabe>
 800b9b8:	3301      	adds	r3, #1
 800b9ba:	e7c9      	b.n	800b950 <_dtoa_r+0xa78>
 800b9bc:	9a02      	ldr	r2, [sp, #8]
 800b9be:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b9c0:	f802 3c01 	strb.w	r3, [r2, #-1]
 800b9c4:	428a      	cmp	r2, r1
 800b9c6:	d02a      	beq.n	800ba1e <_dtoa_r+0xb46>
 800b9c8:	4651      	mov	r1, sl
 800b9ca:	2300      	movs	r3, #0
 800b9cc:	220a      	movs	r2, #10
 800b9ce:	4628      	mov	r0, r5
 800b9d0:	f000 f8fa 	bl	800bbc8 <__multadd>
 800b9d4:	45b0      	cmp	r8, r6
 800b9d6:	4682      	mov	sl, r0
 800b9d8:	f04f 0300 	mov.w	r3, #0
 800b9dc:	f04f 020a 	mov.w	r2, #10
 800b9e0:	4641      	mov	r1, r8
 800b9e2:	4628      	mov	r0, r5
 800b9e4:	d107      	bne.n	800b9f6 <_dtoa_r+0xb1e>
 800b9e6:	f000 f8ef 	bl	800bbc8 <__multadd>
 800b9ea:	4680      	mov	r8, r0
 800b9ec:	4606      	mov	r6, r0
 800b9ee:	9b02      	ldr	r3, [sp, #8]
 800b9f0:	3301      	adds	r3, #1
 800b9f2:	9302      	str	r3, [sp, #8]
 800b9f4:	e777      	b.n	800b8e6 <_dtoa_r+0xa0e>
 800b9f6:	f000 f8e7 	bl	800bbc8 <__multadd>
 800b9fa:	4631      	mov	r1, r6
 800b9fc:	4680      	mov	r8, r0
 800b9fe:	2300      	movs	r3, #0
 800ba00:	220a      	movs	r2, #10
 800ba02:	4628      	mov	r0, r5
 800ba04:	f000 f8e0 	bl	800bbc8 <__multadd>
 800ba08:	4606      	mov	r6, r0
 800ba0a:	e7f0      	b.n	800b9ee <_dtoa_r+0xb16>
 800ba0c:	f1bb 0f00 	cmp.w	fp, #0
 800ba10:	bfcc      	ite	gt
 800ba12:	465f      	movgt	r7, fp
 800ba14:	2701      	movle	r7, #1
 800ba16:	f04f 0800 	mov.w	r8, #0
 800ba1a:	9a08      	ldr	r2, [sp, #32]
 800ba1c:	4417      	add	r7, r2
 800ba1e:	4651      	mov	r1, sl
 800ba20:	2201      	movs	r2, #1
 800ba22:	4628      	mov	r0, r5
 800ba24:	9302      	str	r3, [sp, #8]
 800ba26:	f000 fa7b 	bl	800bf20 <__lshift>
 800ba2a:	4621      	mov	r1, r4
 800ba2c:	4682      	mov	sl, r0
 800ba2e:	f000 fae3 	bl	800bff8 <__mcmp>
 800ba32:	2800      	cmp	r0, #0
 800ba34:	dcb2      	bgt.n	800b99c <_dtoa_r+0xac4>
 800ba36:	d102      	bne.n	800ba3e <_dtoa_r+0xb66>
 800ba38:	9b02      	ldr	r3, [sp, #8]
 800ba3a:	07db      	lsls	r3, r3, #31
 800ba3c:	d4ae      	bmi.n	800b99c <_dtoa_r+0xac4>
 800ba3e:	463b      	mov	r3, r7
 800ba40:	461f      	mov	r7, r3
 800ba42:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ba46:	2a30      	cmp	r2, #48	; 0x30
 800ba48:	d0fa      	beq.n	800ba40 <_dtoa_r+0xb68>
 800ba4a:	e6fb      	b.n	800b844 <_dtoa_r+0x96c>
 800ba4c:	9a08      	ldr	r2, [sp, #32]
 800ba4e:	429a      	cmp	r2, r3
 800ba50:	d1a5      	bne.n	800b99e <_dtoa_r+0xac6>
 800ba52:	2331      	movs	r3, #49	; 0x31
 800ba54:	f109 0901 	add.w	r9, r9, #1
 800ba58:	7013      	strb	r3, [r2, #0]
 800ba5a:	e6f3      	b.n	800b844 <_dtoa_r+0x96c>
 800ba5c:	4b13      	ldr	r3, [pc, #76]	; (800baac <_dtoa_r+0xbd4>)
 800ba5e:	f7ff baa7 	b.w	800afb0 <_dtoa_r+0xd8>
 800ba62:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	f47f aa80 	bne.w	800af6a <_dtoa_r+0x92>
 800ba6a:	4b11      	ldr	r3, [pc, #68]	; (800bab0 <_dtoa_r+0xbd8>)
 800ba6c:	f7ff baa0 	b.w	800afb0 <_dtoa_r+0xd8>
 800ba70:	f1bb 0f00 	cmp.w	fp, #0
 800ba74:	dc03      	bgt.n	800ba7e <_dtoa_r+0xba6>
 800ba76:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ba78:	2b02      	cmp	r3, #2
 800ba7a:	f73f aecc 	bgt.w	800b816 <_dtoa_r+0x93e>
 800ba7e:	9f08      	ldr	r7, [sp, #32]
 800ba80:	4621      	mov	r1, r4
 800ba82:	4650      	mov	r0, sl
 800ba84:	f7ff f99a 	bl	800adbc <quorem>
 800ba88:	9a08      	ldr	r2, [sp, #32]
 800ba8a:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800ba8e:	f807 3b01 	strb.w	r3, [r7], #1
 800ba92:	1aba      	subs	r2, r7, r2
 800ba94:	4593      	cmp	fp, r2
 800ba96:	ddb9      	ble.n	800ba0c <_dtoa_r+0xb34>
 800ba98:	4651      	mov	r1, sl
 800ba9a:	2300      	movs	r3, #0
 800ba9c:	220a      	movs	r2, #10
 800ba9e:	4628      	mov	r0, r5
 800baa0:	f000 f892 	bl	800bbc8 <__multadd>
 800baa4:	4682      	mov	sl, r0
 800baa6:	e7eb      	b.n	800ba80 <_dtoa_r+0xba8>
 800baa8:	0800deb3 	.word	0x0800deb3
 800baac:	0800de0c 	.word	0x0800de0c
 800bab0:	0800de30 	.word	0x0800de30

0800bab4 <_localeconv_r>:
 800bab4:	4800      	ldr	r0, [pc, #0]	; (800bab8 <_localeconv_r+0x4>)
 800bab6:	4770      	bx	lr
 800bab8:	20000188 	.word	0x20000188

0800babc <malloc>:
 800babc:	4b02      	ldr	r3, [pc, #8]	; (800bac8 <malloc+0xc>)
 800babe:	4601      	mov	r1, r0
 800bac0:	6818      	ldr	r0, [r3, #0]
 800bac2:	f000 bbfb 	b.w	800c2bc <_malloc_r>
 800bac6:	bf00      	nop
 800bac8:	20000034 	.word	0x20000034

0800bacc <memchr>:
 800bacc:	4603      	mov	r3, r0
 800bace:	b510      	push	{r4, lr}
 800bad0:	b2c9      	uxtb	r1, r1
 800bad2:	4402      	add	r2, r0
 800bad4:	4293      	cmp	r3, r2
 800bad6:	4618      	mov	r0, r3
 800bad8:	d101      	bne.n	800bade <memchr+0x12>
 800bada:	2000      	movs	r0, #0
 800badc:	e003      	b.n	800bae6 <memchr+0x1a>
 800bade:	7804      	ldrb	r4, [r0, #0]
 800bae0:	3301      	adds	r3, #1
 800bae2:	428c      	cmp	r4, r1
 800bae4:	d1f6      	bne.n	800bad4 <memchr+0x8>
 800bae6:	bd10      	pop	{r4, pc}

0800bae8 <memcpy>:
 800bae8:	440a      	add	r2, r1
 800baea:	4291      	cmp	r1, r2
 800baec:	f100 33ff 	add.w	r3, r0, #4294967295
 800baf0:	d100      	bne.n	800baf4 <memcpy+0xc>
 800baf2:	4770      	bx	lr
 800baf4:	b510      	push	{r4, lr}
 800baf6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bafa:	4291      	cmp	r1, r2
 800bafc:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bb00:	d1f9      	bne.n	800baf6 <memcpy+0xe>
 800bb02:	bd10      	pop	{r4, pc}

0800bb04 <_Balloc>:
 800bb04:	b570      	push	{r4, r5, r6, lr}
 800bb06:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800bb08:	4604      	mov	r4, r0
 800bb0a:	460d      	mov	r5, r1
 800bb0c:	b976      	cbnz	r6, 800bb2c <_Balloc+0x28>
 800bb0e:	2010      	movs	r0, #16
 800bb10:	f7ff ffd4 	bl	800babc <malloc>
 800bb14:	4602      	mov	r2, r0
 800bb16:	6260      	str	r0, [r4, #36]	; 0x24
 800bb18:	b920      	cbnz	r0, 800bb24 <_Balloc+0x20>
 800bb1a:	2166      	movs	r1, #102	; 0x66
 800bb1c:	4b17      	ldr	r3, [pc, #92]	; (800bb7c <_Balloc+0x78>)
 800bb1e:	4818      	ldr	r0, [pc, #96]	; (800bb80 <_Balloc+0x7c>)
 800bb20:	f000 fd92 	bl	800c648 <__assert_func>
 800bb24:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bb28:	6006      	str	r6, [r0, #0]
 800bb2a:	60c6      	str	r6, [r0, #12]
 800bb2c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800bb2e:	68f3      	ldr	r3, [r6, #12]
 800bb30:	b183      	cbz	r3, 800bb54 <_Balloc+0x50>
 800bb32:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bb34:	68db      	ldr	r3, [r3, #12]
 800bb36:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800bb3a:	b9b8      	cbnz	r0, 800bb6c <_Balloc+0x68>
 800bb3c:	2101      	movs	r1, #1
 800bb3e:	fa01 f605 	lsl.w	r6, r1, r5
 800bb42:	1d72      	adds	r2, r6, #5
 800bb44:	4620      	mov	r0, r4
 800bb46:	0092      	lsls	r2, r2, #2
 800bb48:	f000 fb5e 	bl	800c208 <_calloc_r>
 800bb4c:	b160      	cbz	r0, 800bb68 <_Balloc+0x64>
 800bb4e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800bb52:	e00e      	b.n	800bb72 <_Balloc+0x6e>
 800bb54:	2221      	movs	r2, #33	; 0x21
 800bb56:	2104      	movs	r1, #4
 800bb58:	4620      	mov	r0, r4
 800bb5a:	f000 fb55 	bl	800c208 <_calloc_r>
 800bb5e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bb60:	60f0      	str	r0, [r6, #12]
 800bb62:	68db      	ldr	r3, [r3, #12]
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d1e4      	bne.n	800bb32 <_Balloc+0x2e>
 800bb68:	2000      	movs	r0, #0
 800bb6a:	bd70      	pop	{r4, r5, r6, pc}
 800bb6c:	6802      	ldr	r2, [r0, #0]
 800bb6e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800bb72:	2300      	movs	r3, #0
 800bb74:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bb78:	e7f7      	b.n	800bb6a <_Balloc+0x66>
 800bb7a:	bf00      	nop
 800bb7c:	0800de3d 	.word	0x0800de3d
 800bb80:	0800dec4 	.word	0x0800dec4

0800bb84 <_Bfree>:
 800bb84:	b570      	push	{r4, r5, r6, lr}
 800bb86:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800bb88:	4605      	mov	r5, r0
 800bb8a:	460c      	mov	r4, r1
 800bb8c:	b976      	cbnz	r6, 800bbac <_Bfree+0x28>
 800bb8e:	2010      	movs	r0, #16
 800bb90:	f7ff ff94 	bl	800babc <malloc>
 800bb94:	4602      	mov	r2, r0
 800bb96:	6268      	str	r0, [r5, #36]	; 0x24
 800bb98:	b920      	cbnz	r0, 800bba4 <_Bfree+0x20>
 800bb9a:	218a      	movs	r1, #138	; 0x8a
 800bb9c:	4b08      	ldr	r3, [pc, #32]	; (800bbc0 <_Bfree+0x3c>)
 800bb9e:	4809      	ldr	r0, [pc, #36]	; (800bbc4 <_Bfree+0x40>)
 800bba0:	f000 fd52 	bl	800c648 <__assert_func>
 800bba4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bba8:	6006      	str	r6, [r0, #0]
 800bbaa:	60c6      	str	r6, [r0, #12]
 800bbac:	b13c      	cbz	r4, 800bbbe <_Bfree+0x3a>
 800bbae:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800bbb0:	6862      	ldr	r2, [r4, #4]
 800bbb2:	68db      	ldr	r3, [r3, #12]
 800bbb4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bbb8:	6021      	str	r1, [r4, #0]
 800bbba:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bbbe:	bd70      	pop	{r4, r5, r6, pc}
 800bbc0:	0800de3d 	.word	0x0800de3d
 800bbc4:	0800dec4 	.word	0x0800dec4

0800bbc8 <__multadd>:
 800bbc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bbcc:	4698      	mov	r8, r3
 800bbce:	460c      	mov	r4, r1
 800bbd0:	2300      	movs	r3, #0
 800bbd2:	690e      	ldr	r6, [r1, #16]
 800bbd4:	4607      	mov	r7, r0
 800bbd6:	f101 0014 	add.w	r0, r1, #20
 800bbda:	6805      	ldr	r5, [r0, #0]
 800bbdc:	3301      	adds	r3, #1
 800bbde:	b2a9      	uxth	r1, r5
 800bbe0:	fb02 8101 	mla	r1, r2, r1, r8
 800bbe4:	0c2d      	lsrs	r5, r5, #16
 800bbe6:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800bbea:	fb02 c505 	mla	r5, r2, r5, ip
 800bbee:	b289      	uxth	r1, r1
 800bbf0:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800bbf4:	429e      	cmp	r6, r3
 800bbf6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800bbfa:	f840 1b04 	str.w	r1, [r0], #4
 800bbfe:	dcec      	bgt.n	800bbda <__multadd+0x12>
 800bc00:	f1b8 0f00 	cmp.w	r8, #0
 800bc04:	d022      	beq.n	800bc4c <__multadd+0x84>
 800bc06:	68a3      	ldr	r3, [r4, #8]
 800bc08:	42b3      	cmp	r3, r6
 800bc0a:	dc19      	bgt.n	800bc40 <__multadd+0x78>
 800bc0c:	6861      	ldr	r1, [r4, #4]
 800bc0e:	4638      	mov	r0, r7
 800bc10:	3101      	adds	r1, #1
 800bc12:	f7ff ff77 	bl	800bb04 <_Balloc>
 800bc16:	4605      	mov	r5, r0
 800bc18:	b928      	cbnz	r0, 800bc26 <__multadd+0x5e>
 800bc1a:	4602      	mov	r2, r0
 800bc1c:	21b5      	movs	r1, #181	; 0xb5
 800bc1e:	4b0d      	ldr	r3, [pc, #52]	; (800bc54 <__multadd+0x8c>)
 800bc20:	480d      	ldr	r0, [pc, #52]	; (800bc58 <__multadd+0x90>)
 800bc22:	f000 fd11 	bl	800c648 <__assert_func>
 800bc26:	6922      	ldr	r2, [r4, #16]
 800bc28:	f104 010c 	add.w	r1, r4, #12
 800bc2c:	3202      	adds	r2, #2
 800bc2e:	0092      	lsls	r2, r2, #2
 800bc30:	300c      	adds	r0, #12
 800bc32:	f7ff ff59 	bl	800bae8 <memcpy>
 800bc36:	4621      	mov	r1, r4
 800bc38:	4638      	mov	r0, r7
 800bc3a:	f7ff ffa3 	bl	800bb84 <_Bfree>
 800bc3e:	462c      	mov	r4, r5
 800bc40:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800bc44:	3601      	adds	r6, #1
 800bc46:	f8c3 8014 	str.w	r8, [r3, #20]
 800bc4a:	6126      	str	r6, [r4, #16]
 800bc4c:	4620      	mov	r0, r4
 800bc4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc52:	bf00      	nop
 800bc54:	0800deb3 	.word	0x0800deb3
 800bc58:	0800dec4 	.word	0x0800dec4

0800bc5c <__hi0bits>:
 800bc5c:	0c02      	lsrs	r2, r0, #16
 800bc5e:	0412      	lsls	r2, r2, #16
 800bc60:	4603      	mov	r3, r0
 800bc62:	b9ca      	cbnz	r2, 800bc98 <__hi0bits+0x3c>
 800bc64:	0403      	lsls	r3, r0, #16
 800bc66:	2010      	movs	r0, #16
 800bc68:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800bc6c:	bf04      	itt	eq
 800bc6e:	021b      	lsleq	r3, r3, #8
 800bc70:	3008      	addeq	r0, #8
 800bc72:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800bc76:	bf04      	itt	eq
 800bc78:	011b      	lsleq	r3, r3, #4
 800bc7a:	3004      	addeq	r0, #4
 800bc7c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800bc80:	bf04      	itt	eq
 800bc82:	009b      	lsleq	r3, r3, #2
 800bc84:	3002      	addeq	r0, #2
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	db05      	blt.n	800bc96 <__hi0bits+0x3a>
 800bc8a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800bc8e:	f100 0001 	add.w	r0, r0, #1
 800bc92:	bf08      	it	eq
 800bc94:	2020      	moveq	r0, #32
 800bc96:	4770      	bx	lr
 800bc98:	2000      	movs	r0, #0
 800bc9a:	e7e5      	b.n	800bc68 <__hi0bits+0xc>

0800bc9c <__lo0bits>:
 800bc9c:	6803      	ldr	r3, [r0, #0]
 800bc9e:	4602      	mov	r2, r0
 800bca0:	f013 0007 	ands.w	r0, r3, #7
 800bca4:	d00b      	beq.n	800bcbe <__lo0bits+0x22>
 800bca6:	07d9      	lsls	r1, r3, #31
 800bca8:	d422      	bmi.n	800bcf0 <__lo0bits+0x54>
 800bcaa:	0798      	lsls	r0, r3, #30
 800bcac:	bf49      	itett	mi
 800bcae:	085b      	lsrmi	r3, r3, #1
 800bcb0:	089b      	lsrpl	r3, r3, #2
 800bcb2:	2001      	movmi	r0, #1
 800bcb4:	6013      	strmi	r3, [r2, #0]
 800bcb6:	bf5c      	itt	pl
 800bcb8:	2002      	movpl	r0, #2
 800bcba:	6013      	strpl	r3, [r2, #0]
 800bcbc:	4770      	bx	lr
 800bcbe:	b299      	uxth	r1, r3
 800bcc0:	b909      	cbnz	r1, 800bcc6 <__lo0bits+0x2a>
 800bcc2:	2010      	movs	r0, #16
 800bcc4:	0c1b      	lsrs	r3, r3, #16
 800bcc6:	f013 0fff 	tst.w	r3, #255	; 0xff
 800bcca:	bf04      	itt	eq
 800bccc:	0a1b      	lsreq	r3, r3, #8
 800bcce:	3008      	addeq	r0, #8
 800bcd0:	0719      	lsls	r1, r3, #28
 800bcd2:	bf04      	itt	eq
 800bcd4:	091b      	lsreq	r3, r3, #4
 800bcd6:	3004      	addeq	r0, #4
 800bcd8:	0799      	lsls	r1, r3, #30
 800bcda:	bf04      	itt	eq
 800bcdc:	089b      	lsreq	r3, r3, #2
 800bcde:	3002      	addeq	r0, #2
 800bce0:	07d9      	lsls	r1, r3, #31
 800bce2:	d403      	bmi.n	800bcec <__lo0bits+0x50>
 800bce4:	085b      	lsrs	r3, r3, #1
 800bce6:	f100 0001 	add.w	r0, r0, #1
 800bcea:	d003      	beq.n	800bcf4 <__lo0bits+0x58>
 800bcec:	6013      	str	r3, [r2, #0]
 800bcee:	4770      	bx	lr
 800bcf0:	2000      	movs	r0, #0
 800bcf2:	4770      	bx	lr
 800bcf4:	2020      	movs	r0, #32
 800bcf6:	4770      	bx	lr

0800bcf8 <__i2b>:
 800bcf8:	b510      	push	{r4, lr}
 800bcfa:	460c      	mov	r4, r1
 800bcfc:	2101      	movs	r1, #1
 800bcfe:	f7ff ff01 	bl	800bb04 <_Balloc>
 800bd02:	4602      	mov	r2, r0
 800bd04:	b928      	cbnz	r0, 800bd12 <__i2b+0x1a>
 800bd06:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800bd0a:	4b04      	ldr	r3, [pc, #16]	; (800bd1c <__i2b+0x24>)
 800bd0c:	4804      	ldr	r0, [pc, #16]	; (800bd20 <__i2b+0x28>)
 800bd0e:	f000 fc9b 	bl	800c648 <__assert_func>
 800bd12:	2301      	movs	r3, #1
 800bd14:	6144      	str	r4, [r0, #20]
 800bd16:	6103      	str	r3, [r0, #16]
 800bd18:	bd10      	pop	{r4, pc}
 800bd1a:	bf00      	nop
 800bd1c:	0800deb3 	.word	0x0800deb3
 800bd20:	0800dec4 	.word	0x0800dec4

0800bd24 <__multiply>:
 800bd24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd28:	4614      	mov	r4, r2
 800bd2a:	690a      	ldr	r2, [r1, #16]
 800bd2c:	6923      	ldr	r3, [r4, #16]
 800bd2e:	460d      	mov	r5, r1
 800bd30:	429a      	cmp	r2, r3
 800bd32:	bfbe      	ittt	lt
 800bd34:	460b      	movlt	r3, r1
 800bd36:	4625      	movlt	r5, r4
 800bd38:	461c      	movlt	r4, r3
 800bd3a:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800bd3e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800bd42:	68ab      	ldr	r3, [r5, #8]
 800bd44:	6869      	ldr	r1, [r5, #4]
 800bd46:	eb0a 0709 	add.w	r7, sl, r9
 800bd4a:	42bb      	cmp	r3, r7
 800bd4c:	b085      	sub	sp, #20
 800bd4e:	bfb8      	it	lt
 800bd50:	3101      	addlt	r1, #1
 800bd52:	f7ff fed7 	bl	800bb04 <_Balloc>
 800bd56:	b930      	cbnz	r0, 800bd66 <__multiply+0x42>
 800bd58:	4602      	mov	r2, r0
 800bd5a:	f240 115d 	movw	r1, #349	; 0x15d
 800bd5e:	4b41      	ldr	r3, [pc, #260]	; (800be64 <__multiply+0x140>)
 800bd60:	4841      	ldr	r0, [pc, #260]	; (800be68 <__multiply+0x144>)
 800bd62:	f000 fc71 	bl	800c648 <__assert_func>
 800bd66:	f100 0614 	add.w	r6, r0, #20
 800bd6a:	4633      	mov	r3, r6
 800bd6c:	2200      	movs	r2, #0
 800bd6e:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800bd72:	4543      	cmp	r3, r8
 800bd74:	d31e      	bcc.n	800bdb4 <__multiply+0x90>
 800bd76:	f105 0c14 	add.w	ip, r5, #20
 800bd7a:	f104 0314 	add.w	r3, r4, #20
 800bd7e:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800bd82:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800bd86:	9202      	str	r2, [sp, #8]
 800bd88:	ebac 0205 	sub.w	r2, ip, r5
 800bd8c:	3a15      	subs	r2, #21
 800bd8e:	f022 0203 	bic.w	r2, r2, #3
 800bd92:	3204      	adds	r2, #4
 800bd94:	f105 0115 	add.w	r1, r5, #21
 800bd98:	458c      	cmp	ip, r1
 800bd9a:	bf38      	it	cc
 800bd9c:	2204      	movcc	r2, #4
 800bd9e:	9201      	str	r2, [sp, #4]
 800bda0:	9a02      	ldr	r2, [sp, #8]
 800bda2:	9303      	str	r3, [sp, #12]
 800bda4:	429a      	cmp	r2, r3
 800bda6:	d808      	bhi.n	800bdba <__multiply+0x96>
 800bda8:	2f00      	cmp	r7, #0
 800bdaa:	dc55      	bgt.n	800be58 <__multiply+0x134>
 800bdac:	6107      	str	r7, [r0, #16]
 800bdae:	b005      	add	sp, #20
 800bdb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bdb4:	f843 2b04 	str.w	r2, [r3], #4
 800bdb8:	e7db      	b.n	800bd72 <__multiply+0x4e>
 800bdba:	f8b3 a000 	ldrh.w	sl, [r3]
 800bdbe:	f1ba 0f00 	cmp.w	sl, #0
 800bdc2:	d020      	beq.n	800be06 <__multiply+0xe2>
 800bdc4:	46b1      	mov	r9, r6
 800bdc6:	2200      	movs	r2, #0
 800bdc8:	f105 0e14 	add.w	lr, r5, #20
 800bdcc:	f85e 4b04 	ldr.w	r4, [lr], #4
 800bdd0:	f8d9 b000 	ldr.w	fp, [r9]
 800bdd4:	b2a1      	uxth	r1, r4
 800bdd6:	fa1f fb8b 	uxth.w	fp, fp
 800bdda:	fb0a b101 	mla	r1, sl, r1, fp
 800bdde:	4411      	add	r1, r2
 800bde0:	f8d9 2000 	ldr.w	r2, [r9]
 800bde4:	0c24      	lsrs	r4, r4, #16
 800bde6:	0c12      	lsrs	r2, r2, #16
 800bde8:	fb0a 2404 	mla	r4, sl, r4, r2
 800bdec:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800bdf0:	b289      	uxth	r1, r1
 800bdf2:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800bdf6:	45f4      	cmp	ip, lr
 800bdf8:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800bdfc:	f849 1b04 	str.w	r1, [r9], #4
 800be00:	d8e4      	bhi.n	800bdcc <__multiply+0xa8>
 800be02:	9901      	ldr	r1, [sp, #4]
 800be04:	5072      	str	r2, [r6, r1]
 800be06:	9a03      	ldr	r2, [sp, #12]
 800be08:	3304      	adds	r3, #4
 800be0a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800be0e:	f1b9 0f00 	cmp.w	r9, #0
 800be12:	d01f      	beq.n	800be54 <__multiply+0x130>
 800be14:	46b6      	mov	lr, r6
 800be16:	f04f 0a00 	mov.w	sl, #0
 800be1a:	6834      	ldr	r4, [r6, #0]
 800be1c:	f105 0114 	add.w	r1, r5, #20
 800be20:	880a      	ldrh	r2, [r1, #0]
 800be22:	f8be b002 	ldrh.w	fp, [lr, #2]
 800be26:	b2a4      	uxth	r4, r4
 800be28:	fb09 b202 	mla	r2, r9, r2, fp
 800be2c:	4492      	add	sl, r2
 800be2e:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800be32:	f84e 4b04 	str.w	r4, [lr], #4
 800be36:	f851 4b04 	ldr.w	r4, [r1], #4
 800be3a:	f8be 2000 	ldrh.w	r2, [lr]
 800be3e:	0c24      	lsrs	r4, r4, #16
 800be40:	fb09 2404 	mla	r4, r9, r4, r2
 800be44:	458c      	cmp	ip, r1
 800be46:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800be4a:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800be4e:	d8e7      	bhi.n	800be20 <__multiply+0xfc>
 800be50:	9a01      	ldr	r2, [sp, #4]
 800be52:	50b4      	str	r4, [r6, r2]
 800be54:	3604      	adds	r6, #4
 800be56:	e7a3      	b.n	800bda0 <__multiply+0x7c>
 800be58:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d1a5      	bne.n	800bdac <__multiply+0x88>
 800be60:	3f01      	subs	r7, #1
 800be62:	e7a1      	b.n	800bda8 <__multiply+0x84>
 800be64:	0800deb3 	.word	0x0800deb3
 800be68:	0800dec4 	.word	0x0800dec4

0800be6c <__pow5mult>:
 800be6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800be70:	4615      	mov	r5, r2
 800be72:	f012 0203 	ands.w	r2, r2, #3
 800be76:	4606      	mov	r6, r0
 800be78:	460f      	mov	r7, r1
 800be7a:	d007      	beq.n	800be8c <__pow5mult+0x20>
 800be7c:	4c25      	ldr	r4, [pc, #148]	; (800bf14 <__pow5mult+0xa8>)
 800be7e:	3a01      	subs	r2, #1
 800be80:	2300      	movs	r3, #0
 800be82:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800be86:	f7ff fe9f 	bl	800bbc8 <__multadd>
 800be8a:	4607      	mov	r7, r0
 800be8c:	10ad      	asrs	r5, r5, #2
 800be8e:	d03d      	beq.n	800bf0c <__pow5mult+0xa0>
 800be90:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800be92:	b97c      	cbnz	r4, 800beb4 <__pow5mult+0x48>
 800be94:	2010      	movs	r0, #16
 800be96:	f7ff fe11 	bl	800babc <malloc>
 800be9a:	4602      	mov	r2, r0
 800be9c:	6270      	str	r0, [r6, #36]	; 0x24
 800be9e:	b928      	cbnz	r0, 800beac <__pow5mult+0x40>
 800bea0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800bea4:	4b1c      	ldr	r3, [pc, #112]	; (800bf18 <__pow5mult+0xac>)
 800bea6:	481d      	ldr	r0, [pc, #116]	; (800bf1c <__pow5mult+0xb0>)
 800bea8:	f000 fbce 	bl	800c648 <__assert_func>
 800beac:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800beb0:	6004      	str	r4, [r0, #0]
 800beb2:	60c4      	str	r4, [r0, #12]
 800beb4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800beb8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bebc:	b94c      	cbnz	r4, 800bed2 <__pow5mult+0x66>
 800bebe:	f240 2171 	movw	r1, #625	; 0x271
 800bec2:	4630      	mov	r0, r6
 800bec4:	f7ff ff18 	bl	800bcf8 <__i2b>
 800bec8:	2300      	movs	r3, #0
 800beca:	4604      	mov	r4, r0
 800becc:	f8c8 0008 	str.w	r0, [r8, #8]
 800bed0:	6003      	str	r3, [r0, #0]
 800bed2:	f04f 0900 	mov.w	r9, #0
 800bed6:	07eb      	lsls	r3, r5, #31
 800bed8:	d50a      	bpl.n	800bef0 <__pow5mult+0x84>
 800beda:	4639      	mov	r1, r7
 800bedc:	4622      	mov	r2, r4
 800bede:	4630      	mov	r0, r6
 800bee0:	f7ff ff20 	bl	800bd24 <__multiply>
 800bee4:	4680      	mov	r8, r0
 800bee6:	4639      	mov	r1, r7
 800bee8:	4630      	mov	r0, r6
 800beea:	f7ff fe4b 	bl	800bb84 <_Bfree>
 800beee:	4647      	mov	r7, r8
 800bef0:	106d      	asrs	r5, r5, #1
 800bef2:	d00b      	beq.n	800bf0c <__pow5mult+0xa0>
 800bef4:	6820      	ldr	r0, [r4, #0]
 800bef6:	b938      	cbnz	r0, 800bf08 <__pow5mult+0x9c>
 800bef8:	4622      	mov	r2, r4
 800befa:	4621      	mov	r1, r4
 800befc:	4630      	mov	r0, r6
 800befe:	f7ff ff11 	bl	800bd24 <__multiply>
 800bf02:	6020      	str	r0, [r4, #0]
 800bf04:	f8c0 9000 	str.w	r9, [r0]
 800bf08:	4604      	mov	r4, r0
 800bf0a:	e7e4      	b.n	800bed6 <__pow5mult+0x6a>
 800bf0c:	4638      	mov	r0, r7
 800bf0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bf12:	bf00      	nop
 800bf14:	0800e018 	.word	0x0800e018
 800bf18:	0800de3d 	.word	0x0800de3d
 800bf1c:	0800dec4 	.word	0x0800dec4

0800bf20 <__lshift>:
 800bf20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bf24:	460c      	mov	r4, r1
 800bf26:	4607      	mov	r7, r0
 800bf28:	4691      	mov	r9, r2
 800bf2a:	6923      	ldr	r3, [r4, #16]
 800bf2c:	6849      	ldr	r1, [r1, #4]
 800bf2e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bf32:	68a3      	ldr	r3, [r4, #8]
 800bf34:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bf38:	f108 0601 	add.w	r6, r8, #1
 800bf3c:	42b3      	cmp	r3, r6
 800bf3e:	db0b      	blt.n	800bf58 <__lshift+0x38>
 800bf40:	4638      	mov	r0, r7
 800bf42:	f7ff fddf 	bl	800bb04 <_Balloc>
 800bf46:	4605      	mov	r5, r0
 800bf48:	b948      	cbnz	r0, 800bf5e <__lshift+0x3e>
 800bf4a:	4602      	mov	r2, r0
 800bf4c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800bf50:	4b27      	ldr	r3, [pc, #156]	; (800bff0 <__lshift+0xd0>)
 800bf52:	4828      	ldr	r0, [pc, #160]	; (800bff4 <__lshift+0xd4>)
 800bf54:	f000 fb78 	bl	800c648 <__assert_func>
 800bf58:	3101      	adds	r1, #1
 800bf5a:	005b      	lsls	r3, r3, #1
 800bf5c:	e7ee      	b.n	800bf3c <__lshift+0x1c>
 800bf5e:	2300      	movs	r3, #0
 800bf60:	f100 0114 	add.w	r1, r0, #20
 800bf64:	f100 0210 	add.w	r2, r0, #16
 800bf68:	4618      	mov	r0, r3
 800bf6a:	4553      	cmp	r3, sl
 800bf6c:	db33      	blt.n	800bfd6 <__lshift+0xb6>
 800bf6e:	6920      	ldr	r0, [r4, #16]
 800bf70:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bf74:	f104 0314 	add.w	r3, r4, #20
 800bf78:	f019 091f 	ands.w	r9, r9, #31
 800bf7c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bf80:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800bf84:	d02b      	beq.n	800bfde <__lshift+0xbe>
 800bf86:	468a      	mov	sl, r1
 800bf88:	2200      	movs	r2, #0
 800bf8a:	f1c9 0e20 	rsb	lr, r9, #32
 800bf8e:	6818      	ldr	r0, [r3, #0]
 800bf90:	fa00 f009 	lsl.w	r0, r0, r9
 800bf94:	4302      	orrs	r2, r0
 800bf96:	f84a 2b04 	str.w	r2, [sl], #4
 800bf9a:	f853 2b04 	ldr.w	r2, [r3], #4
 800bf9e:	459c      	cmp	ip, r3
 800bfa0:	fa22 f20e 	lsr.w	r2, r2, lr
 800bfa4:	d8f3      	bhi.n	800bf8e <__lshift+0x6e>
 800bfa6:	ebac 0304 	sub.w	r3, ip, r4
 800bfaa:	3b15      	subs	r3, #21
 800bfac:	f023 0303 	bic.w	r3, r3, #3
 800bfb0:	3304      	adds	r3, #4
 800bfb2:	f104 0015 	add.w	r0, r4, #21
 800bfb6:	4584      	cmp	ip, r0
 800bfb8:	bf38      	it	cc
 800bfba:	2304      	movcc	r3, #4
 800bfbc:	50ca      	str	r2, [r1, r3]
 800bfbe:	b10a      	cbz	r2, 800bfc4 <__lshift+0xa4>
 800bfc0:	f108 0602 	add.w	r6, r8, #2
 800bfc4:	3e01      	subs	r6, #1
 800bfc6:	4638      	mov	r0, r7
 800bfc8:	4621      	mov	r1, r4
 800bfca:	612e      	str	r6, [r5, #16]
 800bfcc:	f7ff fdda 	bl	800bb84 <_Bfree>
 800bfd0:	4628      	mov	r0, r5
 800bfd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bfd6:	f842 0f04 	str.w	r0, [r2, #4]!
 800bfda:	3301      	adds	r3, #1
 800bfdc:	e7c5      	b.n	800bf6a <__lshift+0x4a>
 800bfde:	3904      	subs	r1, #4
 800bfe0:	f853 2b04 	ldr.w	r2, [r3], #4
 800bfe4:	459c      	cmp	ip, r3
 800bfe6:	f841 2f04 	str.w	r2, [r1, #4]!
 800bfea:	d8f9      	bhi.n	800bfe0 <__lshift+0xc0>
 800bfec:	e7ea      	b.n	800bfc4 <__lshift+0xa4>
 800bfee:	bf00      	nop
 800bff0:	0800deb3 	.word	0x0800deb3
 800bff4:	0800dec4 	.word	0x0800dec4

0800bff8 <__mcmp>:
 800bff8:	4603      	mov	r3, r0
 800bffa:	690a      	ldr	r2, [r1, #16]
 800bffc:	6900      	ldr	r0, [r0, #16]
 800bffe:	b530      	push	{r4, r5, lr}
 800c000:	1a80      	subs	r0, r0, r2
 800c002:	d10d      	bne.n	800c020 <__mcmp+0x28>
 800c004:	3314      	adds	r3, #20
 800c006:	3114      	adds	r1, #20
 800c008:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c00c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c010:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c014:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c018:	4295      	cmp	r5, r2
 800c01a:	d002      	beq.n	800c022 <__mcmp+0x2a>
 800c01c:	d304      	bcc.n	800c028 <__mcmp+0x30>
 800c01e:	2001      	movs	r0, #1
 800c020:	bd30      	pop	{r4, r5, pc}
 800c022:	42a3      	cmp	r3, r4
 800c024:	d3f4      	bcc.n	800c010 <__mcmp+0x18>
 800c026:	e7fb      	b.n	800c020 <__mcmp+0x28>
 800c028:	f04f 30ff 	mov.w	r0, #4294967295
 800c02c:	e7f8      	b.n	800c020 <__mcmp+0x28>
	...

0800c030 <__mdiff>:
 800c030:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c034:	460c      	mov	r4, r1
 800c036:	4606      	mov	r6, r0
 800c038:	4611      	mov	r1, r2
 800c03a:	4620      	mov	r0, r4
 800c03c:	4692      	mov	sl, r2
 800c03e:	f7ff ffdb 	bl	800bff8 <__mcmp>
 800c042:	1e05      	subs	r5, r0, #0
 800c044:	d111      	bne.n	800c06a <__mdiff+0x3a>
 800c046:	4629      	mov	r1, r5
 800c048:	4630      	mov	r0, r6
 800c04a:	f7ff fd5b 	bl	800bb04 <_Balloc>
 800c04e:	4602      	mov	r2, r0
 800c050:	b928      	cbnz	r0, 800c05e <__mdiff+0x2e>
 800c052:	f240 2132 	movw	r1, #562	; 0x232
 800c056:	4b3c      	ldr	r3, [pc, #240]	; (800c148 <__mdiff+0x118>)
 800c058:	483c      	ldr	r0, [pc, #240]	; (800c14c <__mdiff+0x11c>)
 800c05a:	f000 faf5 	bl	800c648 <__assert_func>
 800c05e:	2301      	movs	r3, #1
 800c060:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c064:	4610      	mov	r0, r2
 800c066:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c06a:	bfa4      	itt	ge
 800c06c:	4653      	movge	r3, sl
 800c06e:	46a2      	movge	sl, r4
 800c070:	4630      	mov	r0, r6
 800c072:	f8da 1004 	ldr.w	r1, [sl, #4]
 800c076:	bfa6      	itte	ge
 800c078:	461c      	movge	r4, r3
 800c07a:	2500      	movge	r5, #0
 800c07c:	2501      	movlt	r5, #1
 800c07e:	f7ff fd41 	bl	800bb04 <_Balloc>
 800c082:	4602      	mov	r2, r0
 800c084:	b918      	cbnz	r0, 800c08e <__mdiff+0x5e>
 800c086:	f44f 7110 	mov.w	r1, #576	; 0x240
 800c08a:	4b2f      	ldr	r3, [pc, #188]	; (800c148 <__mdiff+0x118>)
 800c08c:	e7e4      	b.n	800c058 <__mdiff+0x28>
 800c08e:	f100 0814 	add.w	r8, r0, #20
 800c092:	f8da 7010 	ldr.w	r7, [sl, #16]
 800c096:	60c5      	str	r5, [r0, #12]
 800c098:	f04f 0c00 	mov.w	ip, #0
 800c09c:	f10a 0514 	add.w	r5, sl, #20
 800c0a0:	f10a 0010 	add.w	r0, sl, #16
 800c0a4:	46c2      	mov	sl, r8
 800c0a6:	6926      	ldr	r6, [r4, #16]
 800c0a8:	f104 0914 	add.w	r9, r4, #20
 800c0ac:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 800c0b0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c0b4:	f850 bf04 	ldr.w	fp, [r0, #4]!
 800c0b8:	f859 3b04 	ldr.w	r3, [r9], #4
 800c0bc:	fa1f f18b 	uxth.w	r1, fp
 800c0c0:	4461      	add	r1, ip
 800c0c2:	fa1f fc83 	uxth.w	ip, r3
 800c0c6:	0c1b      	lsrs	r3, r3, #16
 800c0c8:	eba1 010c 	sub.w	r1, r1, ip
 800c0cc:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c0d0:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800c0d4:	b289      	uxth	r1, r1
 800c0d6:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800c0da:	454e      	cmp	r6, r9
 800c0dc:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800c0e0:	f84a 3b04 	str.w	r3, [sl], #4
 800c0e4:	d8e6      	bhi.n	800c0b4 <__mdiff+0x84>
 800c0e6:	1b33      	subs	r3, r6, r4
 800c0e8:	3b15      	subs	r3, #21
 800c0ea:	f023 0303 	bic.w	r3, r3, #3
 800c0ee:	3415      	adds	r4, #21
 800c0f0:	3304      	adds	r3, #4
 800c0f2:	42a6      	cmp	r6, r4
 800c0f4:	bf38      	it	cc
 800c0f6:	2304      	movcc	r3, #4
 800c0f8:	441d      	add	r5, r3
 800c0fa:	4443      	add	r3, r8
 800c0fc:	461e      	mov	r6, r3
 800c0fe:	462c      	mov	r4, r5
 800c100:	4574      	cmp	r4, lr
 800c102:	d30e      	bcc.n	800c122 <__mdiff+0xf2>
 800c104:	f10e 0103 	add.w	r1, lr, #3
 800c108:	1b49      	subs	r1, r1, r5
 800c10a:	f021 0103 	bic.w	r1, r1, #3
 800c10e:	3d03      	subs	r5, #3
 800c110:	45ae      	cmp	lr, r5
 800c112:	bf38      	it	cc
 800c114:	2100      	movcc	r1, #0
 800c116:	4419      	add	r1, r3
 800c118:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800c11c:	b18b      	cbz	r3, 800c142 <__mdiff+0x112>
 800c11e:	6117      	str	r7, [r2, #16]
 800c120:	e7a0      	b.n	800c064 <__mdiff+0x34>
 800c122:	f854 8b04 	ldr.w	r8, [r4], #4
 800c126:	fa1f f188 	uxth.w	r1, r8
 800c12a:	4461      	add	r1, ip
 800c12c:	1408      	asrs	r0, r1, #16
 800c12e:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 800c132:	b289      	uxth	r1, r1
 800c134:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800c138:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c13c:	f846 1b04 	str.w	r1, [r6], #4
 800c140:	e7de      	b.n	800c100 <__mdiff+0xd0>
 800c142:	3f01      	subs	r7, #1
 800c144:	e7e8      	b.n	800c118 <__mdiff+0xe8>
 800c146:	bf00      	nop
 800c148:	0800deb3 	.word	0x0800deb3
 800c14c:	0800dec4 	.word	0x0800dec4

0800c150 <__d2b>:
 800c150:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800c154:	2101      	movs	r1, #1
 800c156:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800c15a:	4690      	mov	r8, r2
 800c15c:	461d      	mov	r5, r3
 800c15e:	f7ff fcd1 	bl	800bb04 <_Balloc>
 800c162:	4604      	mov	r4, r0
 800c164:	b930      	cbnz	r0, 800c174 <__d2b+0x24>
 800c166:	4602      	mov	r2, r0
 800c168:	f240 310a 	movw	r1, #778	; 0x30a
 800c16c:	4b24      	ldr	r3, [pc, #144]	; (800c200 <__d2b+0xb0>)
 800c16e:	4825      	ldr	r0, [pc, #148]	; (800c204 <__d2b+0xb4>)
 800c170:	f000 fa6a 	bl	800c648 <__assert_func>
 800c174:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800c178:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800c17c:	bb2d      	cbnz	r5, 800c1ca <__d2b+0x7a>
 800c17e:	9301      	str	r3, [sp, #4]
 800c180:	f1b8 0300 	subs.w	r3, r8, #0
 800c184:	d026      	beq.n	800c1d4 <__d2b+0x84>
 800c186:	4668      	mov	r0, sp
 800c188:	9300      	str	r3, [sp, #0]
 800c18a:	f7ff fd87 	bl	800bc9c <__lo0bits>
 800c18e:	9900      	ldr	r1, [sp, #0]
 800c190:	b1f0      	cbz	r0, 800c1d0 <__d2b+0x80>
 800c192:	9a01      	ldr	r2, [sp, #4]
 800c194:	f1c0 0320 	rsb	r3, r0, #32
 800c198:	fa02 f303 	lsl.w	r3, r2, r3
 800c19c:	430b      	orrs	r3, r1
 800c19e:	40c2      	lsrs	r2, r0
 800c1a0:	6163      	str	r3, [r4, #20]
 800c1a2:	9201      	str	r2, [sp, #4]
 800c1a4:	9b01      	ldr	r3, [sp, #4]
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	bf14      	ite	ne
 800c1aa:	2102      	movne	r1, #2
 800c1ac:	2101      	moveq	r1, #1
 800c1ae:	61a3      	str	r3, [r4, #24]
 800c1b0:	6121      	str	r1, [r4, #16]
 800c1b2:	b1c5      	cbz	r5, 800c1e6 <__d2b+0x96>
 800c1b4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c1b8:	4405      	add	r5, r0
 800c1ba:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c1be:	603d      	str	r5, [r7, #0]
 800c1c0:	6030      	str	r0, [r6, #0]
 800c1c2:	4620      	mov	r0, r4
 800c1c4:	b002      	add	sp, #8
 800c1c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c1ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c1ce:	e7d6      	b.n	800c17e <__d2b+0x2e>
 800c1d0:	6161      	str	r1, [r4, #20]
 800c1d2:	e7e7      	b.n	800c1a4 <__d2b+0x54>
 800c1d4:	a801      	add	r0, sp, #4
 800c1d6:	f7ff fd61 	bl	800bc9c <__lo0bits>
 800c1da:	2101      	movs	r1, #1
 800c1dc:	9b01      	ldr	r3, [sp, #4]
 800c1de:	6121      	str	r1, [r4, #16]
 800c1e0:	6163      	str	r3, [r4, #20]
 800c1e2:	3020      	adds	r0, #32
 800c1e4:	e7e5      	b.n	800c1b2 <__d2b+0x62>
 800c1e6:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800c1ea:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c1ee:	6038      	str	r0, [r7, #0]
 800c1f0:	6918      	ldr	r0, [r3, #16]
 800c1f2:	f7ff fd33 	bl	800bc5c <__hi0bits>
 800c1f6:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800c1fa:	6031      	str	r1, [r6, #0]
 800c1fc:	e7e1      	b.n	800c1c2 <__d2b+0x72>
 800c1fe:	bf00      	nop
 800c200:	0800deb3 	.word	0x0800deb3
 800c204:	0800dec4 	.word	0x0800dec4

0800c208 <_calloc_r>:
 800c208:	b538      	push	{r3, r4, r5, lr}
 800c20a:	fb02 f501 	mul.w	r5, r2, r1
 800c20e:	4629      	mov	r1, r5
 800c210:	f000 f854 	bl	800c2bc <_malloc_r>
 800c214:	4604      	mov	r4, r0
 800c216:	b118      	cbz	r0, 800c220 <_calloc_r+0x18>
 800c218:	462a      	mov	r2, r5
 800c21a:	2100      	movs	r1, #0
 800c21c:	f7fe f935 	bl	800a48a <memset>
 800c220:	4620      	mov	r0, r4
 800c222:	bd38      	pop	{r3, r4, r5, pc}

0800c224 <_free_r>:
 800c224:	b538      	push	{r3, r4, r5, lr}
 800c226:	4605      	mov	r5, r0
 800c228:	2900      	cmp	r1, #0
 800c22a:	d043      	beq.n	800c2b4 <_free_r+0x90>
 800c22c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c230:	1f0c      	subs	r4, r1, #4
 800c232:	2b00      	cmp	r3, #0
 800c234:	bfb8      	it	lt
 800c236:	18e4      	addlt	r4, r4, r3
 800c238:	f000 fa62 	bl	800c700 <__malloc_lock>
 800c23c:	4a1e      	ldr	r2, [pc, #120]	; (800c2b8 <_free_r+0x94>)
 800c23e:	6813      	ldr	r3, [r2, #0]
 800c240:	4610      	mov	r0, r2
 800c242:	b933      	cbnz	r3, 800c252 <_free_r+0x2e>
 800c244:	6063      	str	r3, [r4, #4]
 800c246:	6014      	str	r4, [r2, #0]
 800c248:	4628      	mov	r0, r5
 800c24a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c24e:	f000 ba5d 	b.w	800c70c <__malloc_unlock>
 800c252:	42a3      	cmp	r3, r4
 800c254:	d90a      	bls.n	800c26c <_free_r+0x48>
 800c256:	6821      	ldr	r1, [r4, #0]
 800c258:	1862      	adds	r2, r4, r1
 800c25a:	4293      	cmp	r3, r2
 800c25c:	bf01      	itttt	eq
 800c25e:	681a      	ldreq	r2, [r3, #0]
 800c260:	685b      	ldreq	r3, [r3, #4]
 800c262:	1852      	addeq	r2, r2, r1
 800c264:	6022      	streq	r2, [r4, #0]
 800c266:	6063      	str	r3, [r4, #4]
 800c268:	6004      	str	r4, [r0, #0]
 800c26a:	e7ed      	b.n	800c248 <_free_r+0x24>
 800c26c:	461a      	mov	r2, r3
 800c26e:	685b      	ldr	r3, [r3, #4]
 800c270:	b10b      	cbz	r3, 800c276 <_free_r+0x52>
 800c272:	42a3      	cmp	r3, r4
 800c274:	d9fa      	bls.n	800c26c <_free_r+0x48>
 800c276:	6811      	ldr	r1, [r2, #0]
 800c278:	1850      	adds	r0, r2, r1
 800c27a:	42a0      	cmp	r0, r4
 800c27c:	d10b      	bne.n	800c296 <_free_r+0x72>
 800c27e:	6820      	ldr	r0, [r4, #0]
 800c280:	4401      	add	r1, r0
 800c282:	1850      	adds	r0, r2, r1
 800c284:	4283      	cmp	r3, r0
 800c286:	6011      	str	r1, [r2, #0]
 800c288:	d1de      	bne.n	800c248 <_free_r+0x24>
 800c28a:	6818      	ldr	r0, [r3, #0]
 800c28c:	685b      	ldr	r3, [r3, #4]
 800c28e:	4401      	add	r1, r0
 800c290:	6011      	str	r1, [r2, #0]
 800c292:	6053      	str	r3, [r2, #4]
 800c294:	e7d8      	b.n	800c248 <_free_r+0x24>
 800c296:	d902      	bls.n	800c29e <_free_r+0x7a>
 800c298:	230c      	movs	r3, #12
 800c29a:	602b      	str	r3, [r5, #0]
 800c29c:	e7d4      	b.n	800c248 <_free_r+0x24>
 800c29e:	6820      	ldr	r0, [r4, #0]
 800c2a0:	1821      	adds	r1, r4, r0
 800c2a2:	428b      	cmp	r3, r1
 800c2a4:	bf01      	itttt	eq
 800c2a6:	6819      	ldreq	r1, [r3, #0]
 800c2a8:	685b      	ldreq	r3, [r3, #4]
 800c2aa:	1809      	addeq	r1, r1, r0
 800c2ac:	6021      	streq	r1, [r4, #0]
 800c2ae:	6063      	str	r3, [r4, #4]
 800c2b0:	6054      	str	r4, [r2, #4]
 800c2b2:	e7c9      	b.n	800c248 <_free_r+0x24>
 800c2b4:	bd38      	pop	{r3, r4, r5, pc}
 800c2b6:	bf00      	nop
 800c2b8:	200004f0 	.word	0x200004f0

0800c2bc <_malloc_r>:
 800c2bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c2be:	1ccd      	adds	r5, r1, #3
 800c2c0:	f025 0503 	bic.w	r5, r5, #3
 800c2c4:	3508      	adds	r5, #8
 800c2c6:	2d0c      	cmp	r5, #12
 800c2c8:	bf38      	it	cc
 800c2ca:	250c      	movcc	r5, #12
 800c2cc:	2d00      	cmp	r5, #0
 800c2ce:	4606      	mov	r6, r0
 800c2d0:	db01      	blt.n	800c2d6 <_malloc_r+0x1a>
 800c2d2:	42a9      	cmp	r1, r5
 800c2d4:	d903      	bls.n	800c2de <_malloc_r+0x22>
 800c2d6:	230c      	movs	r3, #12
 800c2d8:	6033      	str	r3, [r6, #0]
 800c2da:	2000      	movs	r0, #0
 800c2dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c2de:	f000 fa0f 	bl	800c700 <__malloc_lock>
 800c2e2:	4921      	ldr	r1, [pc, #132]	; (800c368 <_malloc_r+0xac>)
 800c2e4:	680a      	ldr	r2, [r1, #0]
 800c2e6:	4614      	mov	r4, r2
 800c2e8:	b99c      	cbnz	r4, 800c312 <_malloc_r+0x56>
 800c2ea:	4f20      	ldr	r7, [pc, #128]	; (800c36c <_malloc_r+0xb0>)
 800c2ec:	683b      	ldr	r3, [r7, #0]
 800c2ee:	b923      	cbnz	r3, 800c2fa <_malloc_r+0x3e>
 800c2f0:	4621      	mov	r1, r4
 800c2f2:	4630      	mov	r0, r6
 800c2f4:	f000 f998 	bl	800c628 <_sbrk_r>
 800c2f8:	6038      	str	r0, [r7, #0]
 800c2fa:	4629      	mov	r1, r5
 800c2fc:	4630      	mov	r0, r6
 800c2fe:	f000 f993 	bl	800c628 <_sbrk_r>
 800c302:	1c43      	adds	r3, r0, #1
 800c304:	d123      	bne.n	800c34e <_malloc_r+0x92>
 800c306:	230c      	movs	r3, #12
 800c308:	4630      	mov	r0, r6
 800c30a:	6033      	str	r3, [r6, #0]
 800c30c:	f000 f9fe 	bl	800c70c <__malloc_unlock>
 800c310:	e7e3      	b.n	800c2da <_malloc_r+0x1e>
 800c312:	6823      	ldr	r3, [r4, #0]
 800c314:	1b5b      	subs	r3, r3, r5
 800c316:	d417      	bmi.n	800c348 <_malloc_r+0x8c>
 800c318:	2b0b      	cmp	r3, #11
 800c31a:	d903      	bls.n	800c324 <_malloc_r+0x68>
 800c31c:	6023      	str	r3, [r4, #0]
 800c31e:	441c      	add	r4, r3
 800c320:	6025      	str	r5, [r4, #0]
 800c322:	e004      	b.n	800c32e <_malloc_r+0x72>
 800c324:	6863      	ldr	r3, [r4, #4]
 800c326:	42a2      	cmp	r2, r4
 800c328:	bf0c      	ite	eq
 800c32a:	600b      	streq	r3, [r1, #0]
 800c32c:	6053      	strne	r3, [r2, #4]
 800c32e:	4630      	mov	r0, r6
 800c330:	f000 f9ec 	bl	800c70c <__malloc_unlock>
 800c334:	f104 000b 	add.w	r0, r4, #11
 800c338:	1d23      	adds	r3, r4, #4
 800c33a:	f020 0007 	bic.w	r0, r0, #7
 800c33e:	1ac2      	subs	r2, r0, r3
 800c340:	d0cc      	beq.n	800c2dc <_malloc_r+0x20>
 800c342:	1a1b      	subs	r3, r3, r0
 800c344:	50a3      	str	r3, [r4, r2]
 800c346:	e7c9      	b.n	800c2dc <_malloc_r+0x20>
 800c348:	4622      	mov	r2, r4
 800c34a:	6864      	ldr	r4, [r4, #4]
 800c34c:	e7cc      	b.n	800c2e8 <_malloc_r+0x2c>
 800c34e:	1cc4      	adds	r4, r0, #3
 800c350:	f024 0403 	bic.w	r4, r4, #3
 800c354:	42a0      	cmp	r0, r4
 800c356:	d0e3      	beq.n	800c320 <_malloc_r+0x64>
 800c358:	1a21      	subs	r1, r4, r0
 800c35a:	4630      	mov	r0, r6
 800c35c:	f000 f964 	bl	800c628 <_sbrk_r>
 800c360:	3001      	adds	r0, #1
 800c362:	d1dd      	bne.n	800c320 <_malloc_r+0x64>
 800c364:	e7cf      	b.n	800c306 <_malloc_r+0x4a>
 800c366:	bf00      	nop
 800c368:	200004f0 	.word	0x200004f0
 800c36c:	200004f4 	.word	0x200004f4

0800c370 <__ssputs_r>:
 800c370:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c374:	688e      	ldr	r6, [r1, #8]
 800c376:	4682      	mov	sl, r0
 800c378:	429e      	cmp	r6, r3
 800c37a:	460c      	mov	r4, r1
 800c37c:	4690      	mov	r8, r2
 800c37e:	461f      	mov	r7, r3
 800c380:	d838      	bhi.n	800c3f4 <__ssputs_r+0x84>
 800c382:	898a      	ldrh	r2, [r1, #12]
 800c384:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c388:	d032      	beq.n	800c3f0 <__ssputs_r+0x80>
 800c38a:	6825      	ldr	r5, [r4, #0]
 800c38c:	6909      	ldr	r1, [r1, #16]
 800c38e:	3301      	adds	r3, #1
 800c390:	eba5 0901 	sub.w	r9, r5, r1
 800c394:	6965      	ldr	r5, [r4, #20]
 800c396:	444b      	add	r3, r9
 800c398:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c39c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c3a0:	106d      	asrs	r5, r5, #1
 800c3a2:	429d      	cmp	r5, r3
 800c3a4:	bf38      	it	cc
 800c3a6:	461d      	movcc	r5, r3
 800c3a8:	0553      	lsls	r3, r2, #21
 800c3aa:	d531      	bpl.n	800c410 <__ssputs_r+0xa0>
 800c3ac:	4629      	mov	r1, r5
 800c3ae:	f7ff ff85 	bl	800c2bc <_malloc_r>
 800c3b2:	4606      	mov	r6, r0
 800c3b4:	b950      	cbnz	r0, 800c3cc <__ssputs_r+0x5c>
 800c3b6:	230c      	movs	r3, #12
 800c3b8:	f04f 30ff 	mov.w	r0, #4294967295
 800c3bc:	f8ca 3000 	str.w	r3, [sl]
 800c3c0:	89a3      	ldrh	r3, [r4, #12]
 800c3c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c3c6:	81a3      	strh	r3, [r4, #12]
 800c3c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c3cc:	464a      	mov	r2, r9
 800c3ce:	6921      	ldr	r1, [r4, #16]
 800c3d0:	f7ff fb8a 	bl	800bae8 <memcpy>
 800c3d4:	89a3      	ldrh	r3, [r4, #12]
 800c3d6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c3da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c3de:	81a3      	strh	r3, [r4, #12]
 800c3e0:	6126      	str	r6, [r4, #16]
 800c3e2:	444e      	add	r6, r9
 800c3e4:	6026      	str	r6, [r4, #0]
 800c3e6:	463e      	mov	r6, r7
 800c3e8:	6165      	str	r5, [r4, #20]
 800c3ea:	eba5 0509 	sub.w	r5, r5, r9
 800c3ee:	60a5      	str	r5, [r4, #8]
 800c3f0:	42be      	cmp	r6, r7
 800c3f2:	d900      	bls.n	800c3f6 <__ssputs_r+0x86>
 800c3f4:	463e      	mov	r6, r7
 800c3f6:	4632      	mov	r2, r6
 800c3f8:	4641      	mov	r1, r8
 800c3fa:	6820      	ldr	r0, [r4, #0]
 800c3fc:	f000 f966 	bl	800c6cc <memmove>
 800c400:	68a3      	ldr	r3, [r4, #8]
 800c402:	6822      	ldr	r2, [r4, #0]
 800c404:	1b9b      	subs	r3, r3, r6
 800c406:	4432      	add	r2, r6
 800c408:	2000      	movs	r0, #0
 800c40a:	60a3      	str	r3, [r4, #8]
 800c40c:	6022      	str	r2, [r4, #0]
 800c40e:	e7db      	b.n	800c3c8 <__ssputs_r+0x58>
 800c410:	462a      	mov	r2, r5
 800c412:	f000 f981 	bl	800c718 <_realloc_r>
 800c416:	4606      	mov	r6, r0
 800c418:	2800      	cmp	r0, #0
 800c41a:	d1e1      	bne.n	800c3e0 <__ssputs_r+0x70>
 800c41c:	4650      	mov	r0, sl
 800c41e:	6921      	ldr	r1, [r4, #16]
 800c420:	f7ff ff00 	bl	800c224 <_free_r>
 800c424:	e7c7      	b.n	800c3b6 <__ssputs_r+0x46>
	...

0800c428 <_svfiprintf_r>:
 800c428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c42c:	4698      	mov	r8, r3
 800c42e:	898b      	ldrh	r3, [r1, #12]
 800c430:	4607      	mov	r7, r0
 800c432:	061b      	lsls	r3, r3, #24
 800c434:	460d      	mov	r5, r1
 800c436:	4614      	mov	r4, r2
 800c438:	b09d      	sub	sp, #116	; 0x74
 800c43a:	d50e      	bpl.n	800c45a <_svfiprintf_r+0x32>
 800c43c:	690b      	ldr	r3, [r1, #16]
 800c43e:	b963      	cbnz	r3, 800c45a <_svfiprintf_r+0x32>
 800c440:	2140      	movs	r1, #64	; 0x40
 800c442:	f7ff ff3b 	bl	800c2bc <_malloc_r>
 800c446:	6028      	str	r0, [r5, #0]
 800c448:	6128      	str	r0, [r5, #16]
 800c44a:	b920      	cbnz	r0, 800c456 <_svfiprintf_r+0x2e>
 800c44c:	230c      	movs	r3, #12
 800c44e:	603b      	str	r3, [r7, #0]
 800c450:	f04f 30ff 	mov.w	r0, #4294967295
 800c454:	e0d1      	b.n	800c5fa <_svfiprintf_r+0x1d2>
 800c456:	2340      	movs	r3, #64	; 0x40
 800c458:	616b      	str	r3, [r5, #20]
 800c45a:	2300      	movs	r3, #0
 800c45c:	9309      	str	r3, [sp, #36]	; 0x24
 800c45e:	2320      	movs	r3, #32
 800c460:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c464:	2330      	movs	r3, #48	; 0x30
 800c466:	f04f 0901 	mov.w	r9, #1
 800c46a:	f8cd 800c 	str.w	r8, [sp, #12]
 800c46e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800c614 <_svfiprintf_r+0x1ec>
 800c472:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c476:	4623      	mov	r3, r4
 800c478:	469a      	mov	sl, r3
 800c47a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c47e:	b10a      	cbz	r2, 800c484 <_svfiprintf_r+0x5c>
 800c480:	2a25      	cmp	r2, #37	; 0x25
 800c482:	d1f9      	bne.n	800c478 <_svfiprintf_r+0x50>
 800c484:	ebba 0b04 	subs.w	fp, sl, r4
 800c488:	d00b      	beq.n	800c4a2 <_svfiprintf_r+0x7a>
 800c48a:	465b      	mov	r3, fp
 800c48c:	4622      	mov	r2, r4
 800c48e:	4629      	mov	r1, r5
 800c490:	4638      	mov	r0, r7
 800c492:	f7ff ff6d 	bl	800c370 <__ssputs_r>
 800c496:	3001      	adds	r0, #1
 800c498:	f000 80aa 	beq.w	800c5f0 <_svfiprintf_r+0x1c8>
 800c49c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c49e:	445a      	add	r2, fp
 800c4a0:	9209      	str	r2, [sp, #36]	; 0x24
 800c4a2:	f89a 3000 	ldrb.w	r3, [sl]
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	f000 80a2 	beq.w	800c5f0 <_svfiprintf_r+0x1c8>
 800c4ac:	2300      	movs	r3, #0
 800c4ae:	f04f 32ff 	mov.w	r2, #4294967295
 800c4b2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c4b6:	f10a 0a01 	add.w	sl, sl, #1
 800c4ba:	9304      	str	r3, [sp, #16]
 800c4bc:	9307      	str	r3, [sp, #28]
 800c4be:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c4c2:	931a      	str	r3, [sp, #104]	; 0x68
 800c4c4:	4654      	mov	r4, sl
 800c4c6:	2205      	movs	r2, #5
 800c4c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c4cc:	4851      	ldr	r0, [pc, #324]	; (800c614 <_svfiprintf_r+0x1ec>)
 800c4ce:	f7ff fafd 	bl	800bacc <memchr>
 800c4d2:	9a04      	ldr	r2, [sp, #16]
 800c4d4:	b9d8      	cbnz	r0, 800c50e <_svfiprintf_r+0xe6>
 800c4d6:	06d0      	lsls	r0, r2, #27
 800c4d8:	bf44      	itt	mi
 800c4da:	2320      	movmi	r3, #32
 800c4dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c4e0:	0711      	lsls	r1, r2, #28
 800c4e2:	bf44      	itt	mi
 800c4e4:	232b      	movmi	r3, #43	; 0x2b
 800c4e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c4ea:	f89a 3000 	ldrb.w	r3, [sl]
 800c4ee:	2b2a      	cmp	r3, #42	; 0x2a
 800c4f0:	d015      	beq.n	800c51e <_svfiprintf_r+0xf6>
 800c4f2:	4654      	mov	r4, sl
 800c4f4:	2000      	movs	r0, #0
 800c4f6:	f04f 0c0a 	mov.w	ip, #10
 800c4fa:	9a07      	ldr	r2, [sp, #28]
 800c4fc:	4621      	mov	r1, r4
 800c4fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c502:	3b30      	subs	r3, #48	; 0x30
 800c504:	2b09      	cmp	r3, #9
 800c506:	d94e      	bls.n	800c5a6 <_svfiprintf_r+0x17e>
 800c508:	b1b0      	cbz	r0, 800c538 <_svfiprintf_r+0x110>
 800c50a:	9207      	str	r2, [sp, #28]
 800c50c:	e014      	b.n	800c538 <_svfiprintf_r+0x110>
 800c50e:	eba0 0308 	sub.w	r3, r0, r8
 800c512:	fa09 f303 	lsl.w	r3, r9, r3
 800c516:	4313      	orrs	r3, r2
 800c518:	46a2      	mov	sl, r4
 800c51a:	9304      	str	r3, [sp, #16]
 800c51c:	e7d2      	b.n	800c4c4 <_svfiprintf_r+0x9c>
 800c51e:	9b03      	ldr	r3, [sp, #12]
 800c520:	1d19      	adds	r1, r3, #4
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	9103      	str	r1, [sp, #12]
 800c526:	2b00      	cmp	r3, #0
 800c528:	bfbb      	ittet	lt
 800c52a:	425b      	neglt	r3, r3
 800c52c:	f042 0202 	orrlt.w	r2, r2, #2
 800c530:	9307      	strge	r3, [sp, #28]
 800c532:	9307      	strlt	r3, [sp, #28]
 800c534:	bfb8      	it	lt
 800c536:	9204      	strlt	r2, [sp, #16]
 800c538:	7823      	ldrb	r3, [r4, #0]
 800c53a:	2b2e      	cmp	r3, #46	; 0x2e
 800c53c:	d10c      	bne.n	800c558 <_svfiprintf_r+0x130>
 800c53e:	7863      	ldrb	r3, [r4, #1]
 800c540:	2b2a      	cmp	r3, #42	; 0x2a
 800c542:	d135      	bne.n	800c5b0 <_svfiprintf_r+0x188>
 800c544:	9b03      	ldr	r3, [sp, #12]
 800c546:	3402      	adds	r4, #2
 800c548:	1d1a      	adds	r2, r3, #4
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	9203      	str	r2, [sp, #12]
 800c54e:	2b00      	cmp	r3, #0
 800c550:	bfb8      	it	lt
 800c552:	f04f 33ff 	movlt.w	r3, #4294967295
 800c556:	9305      	str	r3, [sp, #20]
 800c558:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c624 <_svfiprintf_r+0x1fc>
 800c55c:	2203      	movs	r2, #3
 800c55e:	4650      	mov	r0, sl
 800c560:	7821      	ldrb	r1, [r4, #0]
 800c562:	f7ff fab3 	bl	800bacc <memchr>
 800c566:	b140      	cbz	r0, 800c57a <_svfiprintf_r+0x152>
 800c568:	2340      	movs	r3, #64	; 0x40
 800c56a:	eba0 000a 	sub.w	r0, r0, sl
 800c56e:	fa03 f000 	lsl.w	r0, r3, r0
 800c572:	9b04      	ldr	r3, [sp, #16]
 800c574:	3401      	adds	r4, #1
 800c576:	4303      	orrs	r3, r0
 800c578:	9304      	str	r3, [sp, #16]
 800c57a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c57e:	2206      	movs	r2, #6
 800c580:	4825      	ldr	r0, [pc, #148]	; (800c618 <_svfiprintf_r+0x1f0>)
 800c582:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c586:	f7ff faa1 	bl	800bacc <memchr>
 800c58a:	2800      	cmp	r0, #0
 800c58c:	d038      	beq.n	800c600 <_svfiprintf_r+0x1d8>
 800c58e:	4b23      	ldr	r3, [pc, #140]	; (800c61c <_svfiprintf_r+0x1f4>)
 800c590:	bb1b      	cbnz	r3, 800c5da <_svfiprintf_r+0x1b2>
 800c592:	9b03      	ldr	r3, [sp, #12]
 800c594:	3307      	adds	r3, #7
 800c596:	f023 0307 	bic.w	r3, r3, #7
 800c59a:	3308      	adds	r3, #8
 800c59c:	9303      	str	r3, [sp, #12]
 800c59e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c5a0:	4433      	add	r3, r6
 800c5a2:	9309      	str	r3, [sp, #36]	; 0x24
 800c5a4:	e767      	b.n	800c476 <_svfiprintf_r+0x4e>
 800c5a6:	460c      	mov	r4, r1
 800c5a8:	2001      	movs	r0, #1
 800c5aa:	fb0c 3202 	mla	r2, ip, r2, r3
 800c5ae:	e7a5      	b.n	800c4fc <_svfiprintf_r+0xd4>
 800c5b0:	2300      	movs	r3, #0
 800c5b2:	f04f 0c0a 	mov.w	ip, #10
 800c5b6:	4619      	mov	r1, r3
 800c5b8:	3401      	adds	r4, #1
 800c5ba:	9305      	str	r3, [sp, #20]
 800c5bc:	4620      	mov	r0, r4
 800c5be:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c5c2:	3a30      	subs	r2, #48	; 0x30
 800c5c4:	2a09      	cmp	r2, #9
 800c5c6:	d903      	bls.n	800c5d0 <_svfiprintf_r+0x1a8>
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d0c5      	beq.n	800c558 <_svfiprintf_r+0x130>
 800c5cc:	9105      	str	r1, [sp, #20]
 800c5ce:	e7c3      	b.n	800c558 <_svfiprintf_r+0x130>
 800c5d0:	4604      	mov	r4, r0
 800c5d2:	2301      	movs	r3, #1
 800c5d4:	fb0c 2101 	mla	r1, ip, r1, r2
 800c5d8:	e7f0      	b.n	800c5bc <_svfiprintf_r+0x194>
 800c5da:	ab03      	add	r3, sp, #12
 800c5dc:	9300      	str	r3, [sp, #0]
 800c5de:	462a      	mov	r2, r5
 800c5e0:	4638      	mov	r0, r7
 800c5e2:	4b0f      	ldr	r3, [pc, #60]	; (800c620 <_svfiprintf_r+0x1f8>)
 800c5e4:	a904      	add	r1, sp, #16
 800c5e6:	f7fd fff5 	bl	800a5d4 <_printf_float>
 800c5ea:	1c42      	adds	r2, r0, #1
 800c5ec:	4606      	mov	r6, r0
 800c5ee:	d1d6      	bne.n	800c59e <_svfiprintf_r+0x176>
 800c5f0:	89ab      	ldrh	r3, [r5, #12]
 800c5f2:	065b      	lsls	r3, r3, #25
 800c5f4:	f53f af2c 	bmi.w	800c450 <_svfiprintf_r+0x28>
 800c5f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c5fa:	b01d      	add	sp, #116	; 0x74
 800c5fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c600:	ab03      	add	r3, sp, #12
 800c602:	9300      	str	r3, [sp, #0]
 800c604:	462a      	mov	r2, r5
 800c606:	4638      	mov	r0, r7
 800c608:	4b05      	ldr	r3, [pc, #20]	; (800c620 <_svfiprintf_r+0x1f8>)
 800c60a:	a904      	add	r1, sp, #16
 800c60c:	f7fe fa7e 	bl	800ab0c <_printf_i>
 800c610:	e7eb      	b.n	800c5ea <_svfiprintf_r+0x1c2>
 800c612:	bf00      	nop
 800c614:	0800e024 	.word	0x0800e024
 800c618:	0800e02e 	.word	0x0800e02e
 800c61c:	0800a5d5 	.word	0x0800a5d5
 800c620:	0800c371 	.word	0x0800c371
 800c624:	0800e02a 	.word	0x0800e02a

0800c628 <_sbrk_r>:
 800c628:	b538      	push	{r3, r4, r5, lr}
 800c62a:	2300      	movs	r3, #0
 800c62c:	4d05      	ldr	r5, [pc, #20]	; (800c644 <_sbrk_r+0x1c>)
 800c62e:	4604      	mov	r4, r0
 800c630:	4608      	mov	r0, r1
 800c632:	602b      	str	r3, [r5, #0]
 800c634:	f7f7 fa00 	bl	8003a38 <_sbrk>
 800c638:	1c43      	adds	r3, r0, #1
 800c63a:	d102      	bne.n	800c642 <_sbrk_r+0x1a>
 800c63c:	682b      	ldr	r3, [r5, #0]
 800c63e:	b103      	cbz	r3, 800c642 <_sbrk_r+0x1a>
 800c640:	6023      	str	r3, [r4, #0]
 800c642:	bd38      	pop	{r3, r4, r5, pc}
 800c644:	200019cc 	.word	0x200019cc

0800c648 <__assert_func>:
 800c648:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c64a:	4614      	mov	r4, r2
 800c64c:	461a      	mov	r2, r3
 800c64e:	4b09      	ldr	r3, [pc, #36]	; (800c674 <__assert_func+0x2c>)
 800c650:	4605      	mov	r5, r0
 800c652:	681b      	ldr	r3, [r3, #0]
 800c654:	68d8      	ldr	r0, [r3, #12]
 800c656:	b14c      	cbz	r4, 800c66c <__assert_func+0x24>
 800c658:	4b07      	ldr	r3, [pc, #28]	; (800c678 <__assert_func+0x30>)
 800c65a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c65e:	9100      	str	r1, [sp, #0]
 800c660:	462b      	mov	r3, r5
 800c662:	4906      	ldr	r1, [pc, #24]	; (800c67c <__assert_func+0x34>)
 800c664:	f000 f80e 	bl	800c684 <fiprintf>
 800c668:	f000 faa2 	bl	800cbb0 <abort>
 800c66c:	4b04      	ldr	r3, [pc, #16]	; (800c680 <__assert_func+0x38>)
 800c66e:	461c      	mov	r4, r3
 800c670:	e7f3      	b.n	800c65a <__assert_func+0x12>
 800c672:	bf00      	nop
 800c674:	20000034 	.word	0x20000034
 800c678:	0800e035 	.word	0x0800e035
 800c67c:	0800e042 	.word	0x0800e042
 800c680:	0800e070 	.word	0x0800e070

0800c684 <fiprintf>:
 800c684:	b40e      	push	{r1, r2, r3}
 800c686:	b503      	push	{r0, r1, lr}
 800c688:	4601      	mov	r1, r0
 800c68a:	ab03      	add	r3, sp, #12
 800c68c:	4805      	ldr	r0, [pc, #20]	; (800c6a4 <fiprintf+0x20>)
 800c68e:	f853 2b04 	ldr.w	r2, [r3], #4
 800c692:	6800      	ldr	r0, [r0, #0]
 800c694:	9301      	str	r3, [sp, #4]
 800c696:	f000 f88d 	bl	800c7b4 <_vfiprintf_r>
 800c69a:	b002      	add	sp, #8
 800c69c:	f85d eb04 	ldr.w	lr, [sp], #4
 800c6a0:	b003      	add	sp, #12
 800c6a2:	4770      	bx	lr
 800c6a4:	20000034 	.word	0x20000034

0800c6a8 <__ascii_mbtowc>:
 800c6a8:	b082      	sub	sp, #8
 800c6aa:	b901      	cbnz	r1, 800c6ae <__ascii_mbtowc+0x6>
 800c6ac:	a901      	add	r1, sp, #4
 800c6ae:	b142      	cbz	r2, 800c6c2 <__ascii_mbtowc+0x1a>
 800c6b0:	b14b      	cbz	r3, 800c6c6 <__ascii_mbtowc+0x1e>
 800c6b2:	7813      	ldrb	r3, [r2, #0]
 800c6b4:	600b      	str	r3, [r1, #0]
 800c6b6:	7812      	ldrb	r2, [r2, #0]
 800c6b8:	1e10      	subs	r0, r2, #0
 800c6ba:	bf18      	it	ne
 800c6bc:	2001      	movne	r0, #1
 800c6be:	b002      	add	sp, #8
 800c6c0:	4770      	bx	lr
 800c6c2:	4610      	mov	r0, r2
 800c6c4:	e7fb      	b.n	800c6be <__ascii_mbtowc+0x16>
 800c6c6:	f06f 0001 	mvn.w	r0, #1
 800c6ca:	e7f8      	b.n	800c6be <__ascii_mbtowc+0x16>

0800c6cc <memmove>:
 800c6cc:	4288      	cmp	r0, r1
 800c6ce:	b510      	push	{r4, lr}
 800c6d0:	eb01 0402 	add.w	r4, r1, r2
 800c6d4:	d902      	bls.n	800c6dc <memmove+0x10>
 800c6d6:	4284      	cmp	r4, r0
 800c6d8:	4623      	mov	r3, r4
 800c6da:	d807      	bhi.n	800c6ec <memmove+0x20>
 800c6dc:	1e43      	subs	r3, r0, #1
 800c6de:	42a1      	cmp	r1, r4
 800c6e0:	d008      	beq.n	800c6f4 <memmove+0x28>
 800c6e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c6e6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c6ea:	e7f8      	b.n	800c6de <memmove+0x12>
 800c6ec:	4601      	mov	r1, r0
 800c6ee:	4402      	add	r2, r0
 800c6f0:	428a      	cmp	r2, r1
 800c6f2:	d100      	bne.n	800c6f6 <memmove+0x2a>
 800c6f4:	bd10      	pop	{r4, pc}
 800c6f6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c6fa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c6fe:	e7f7      	b.n	800c6f0 <memmove+0x24>

0800c700 <__malloc_lock>:
 800c700:	4801      	ldr	r0, [pc, #4]	; (800c708 <__malloc_lock+0x8>)
 800c702:	f000 bc15 	b.w	800cf30 <__retarget_lock_acquire_recursive>
 800c706:	bf00      	nop
 800c708:	200019d4 	.word	0x200019d4

0800c70c <__malloc_unlock>:
 800c70c:	4801      	ldr	r0, [pc, #4]	; (800c714 <__malloc_unlock+0x8>)
 800c70e:	f000 bc10 	b.w	800cf32 <__retarget_lock_release_recursive>
 800c712:	bf00      	nop
 800c714:	200019d4 	.word	0x200019d4

0800c718 <_realloc_r>:
 800c718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c71a:	4607      	mov	r7, r0
 800c71c:	4614      	mov	r4, r2
 800c71e:	460e      	mov	r6, r1
 800c720:	b921      	cbnz	r1, 800c72c <_realloc_r+0x14>
 800c722:	4611      	mov	r1, r2
 800c724:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c728:	f7ff bdc8 	b.w	800c2bc <_malloc_r>
 800c72c:	b922      	cbnz	r2, 800c738 <_realloc_r+0x20>
 800c72e:	f7ff fd79 	bl	800c224 <_free_r>
 800c732:	4625      	mov	r5, r4
 800c734:	4628      	mov	r0, r5
 800c736:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c738:	f000 fc60 	bl	800cffc <_malloc_usable_size_r>
 800c73c:	42a0      	cmp	r0, r4
 800c73e:	d20f      	bcs.n	800c760 <_realloc_r+0x48>
 800c740:	4621      	mov	r1, r4
 800c742:	4638      	mov	r0, r7
 800c744:	f7ff fdba 	bl	800c2bc <_malloc_r>
 800c748:	4605      	mov	r5, r0
 800c74a:	2800      	cmp	r0, #0
 800c74c:	d0f2      	beq.n	800c734 <_realloc_r+0x1c>
 800c74e:	4631      	mov	r1, r6
 800c750:	4622      	mov	r2, r4
 800c752:	f7ff f9c9 	bl	800bae8 <memcpy>
 800c756:	4631      	mov	r1, r6
 800c758:	4638      	mov	r0, r7
 800c75a:	f7ff fd63 	bl	800c224 <_free_r>
 800c75e:	e7e9      	b.n	800c734 <_realloc_r+0x1c>
 800c760:	4635      	mov	r5, r6
 800c762:	e7e7      	b.n	800c734 <_realloc_r+0x1c>

0800c764 <__sfputc_r>:
 800c764:	6893      	ldr	r3, [r2, #8]
 800c766:	b410      	push	{r4}
 800c768:	3b01      	subs	r3, #1
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	6093      	str	r3, [r2, #8]
 800c76e:	da07      	bge.n	800c780 <__sfputc_r+0x1c>
 800c770:	6994      	ldr	r4, [r2, #24]
 800c772:	42a3      	cmp	r3, r4
 800c774:	db01      	blt.n	800c77a <__sfputc_r+0x16>
 800c776:	290a      	cmp	r1, #10
 800c778:	d102      	bne.n	800c780 <__sfputc_r+0x1c>
 800c77a:	bc10      	pop	{r4}
 800c77c:	f000 b94a 	b.w	800ca14 <__swbuf_r>
 800c780:	6813      	ldr	r3, [r2, #0]
 800c782:	1c58      	adds	r0, r3, #1
 800c784:	6010      	str	r0, [r2, #0]
 800c786:	7019      	strb	r1, [r3, #0]
 800c788:	4608      	mov	r0, r1
 800c78a:	bc10      	pop	{r4}
 800c78c:	4770      	bx	lr

0800c78e <__sfputs_r>:
 800c78e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c790:	4606      	mov	r6, r0
 800c792:	460f      	mov	r7, r1
 800c794:	4614      	mov	r4, r2
 800c796:	18d5      	adds	r5, r2, r3
 800c798:	42ac      	cmp	r4, r5
 800c79a:	d101      	bne.n	800c7a0 <__sfputs_r+0x12>
 800c79c:	2000      	movs	r0, #0
 800c79e:	e007      	b.n	800c7b0 <__sfputs_r+0x22>
 800c7a0:	463a      	mov	r2, r7
 800c7a2:	4630      	mov	r0, r6
 800c7a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c7a8:	f7ff ffdc 	bl	800c764 <__sfputc_r>
 800c7ac:	1c43      	adds	r3, r0, #1
 800c7ae:	d1f3      	bne.n	800c798 <__sfputs_r+0xa>
 800c7b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c7b4 <_vfiprintf_r>:
 800c7b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7b8:	460d      	mov	r5, r1
 800c7ba:	4614      	mov	r4, r2
 800c7bc:	4698      	mov	r8, r3
 800c7be:	4606      	mov	r6, r0
 800c7c0:	b09d      	sub	sp, #116	; 0x74
 800c7c2:	b118      	cbz	r0, 800c7cc <_vfiprintf_r+0x18>
 800c7c4:	6983      	ldr	r3, [r0, #24]
 800c7c6:	b90b      	cbnz	r3, 800c7cc <_vfiprintf_r+0x18>
 800c7c8:	f000 fb14 	bl	800cdf4 <__sinit>
 800c7cc:	4b89      	ldr	r3, [pc, #548]	; (800c9f4 <_vfiprintf_r+0x240>)
 800c7ce:	429d      	cmp	r5, r3
 800c7d0:	d11b      	bne.n	800c80a <_vfiprintf_r+0x56>
 800c7d2:	6875      	ldr	r5, [r6, #4]
 800c7d4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c7d6:	07d9      	lsls	r1, r3, #31
 800c7d8:	d405      	bmi.n	800c7e6 <_vfiprintf_r+0x32>
 800c7da:	89ab      	ldrh	r3, [r5, #12]
 800c7dc:	059a      	lsls	r2, r3, #22
 800c7de:	d402      	bmi.n	800c7e6 <_vfiprintf_r+0x32>
 800c7e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c7e2:	f000 fba5 	bl	800cf30 <__retarget_lock_acquire_recursive>
 800c7e6:	89ab      	ldrh	r3, [r5, #12]
 800c7e8:	071b      	lsls	r3, r3, #28
 800c7ea:	d501      	bpl.n	800c7f0 <_vfiprintf_r+0x3c>
 800c7ec:	692b      	ldr	r3, [r5, #16]
 800c7ee:	b9eb      	cbnz	r3, 800c82c <_vfiprintf_r+0x78>
 800c7f0:	4629      	mov	r1, r5
 800c7f2:	4630      	mov	r0, r6
 800c7f4:	f000 f96e 	bl	800cad4 <__swsetup_r>
 800c7f8:	b1c0      	cbz	r0, 800c82c <_vfiprintf_r+0x78>
 800c7fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c7fc:	07dc      	lsls	r4, r3, #31
 800c7fe:	d50e      	bpl.n	800c81e <_vfiprintf_r+0x6a>
 800c800:	f04f 30ff 	mov.w	r0, #4294967295
 800c804:	b01d      	add	sp, #116	; 0x74
 800c806:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c80a:	4b7b      	ldr	r3, [pc, #492]	; (800c9f8 <_vfiprintf_r+0x244>)
 800c80c:	429d      	cmp	r5, r3
 800c80e:	d101      	bne.n	800c814 <_vfiprintf_r+0x60>
 800c810:	68b5      	ldr	r5, [r6, #8]
 800c812:	e7df      	b.n	800c7d4 <_vfiprintf_r+0x20>
 800c814:	4b79      	ldr	r3, [pc, #484]	; (800c9fc <_vfiprintf_r+0x248>)
 800c816:	429d      	cmp	r5, r3
 800c818:	bf08      	it	eq
 800c81a:	68f5      	ldreq	r5, [r6, #12]
 800c81c:	e7da      	b.n	800c7d4 <_vfiprintf_r+0x20>
 800c81e:	89ab      	ldrh	r3, [r5, #12]
 800c820:	0598      	lsls	r0, r3, #22
 800c822:	d4ed      	bmi.n	800c800 <_vfiprintf_r+0x4c>
 800c824:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c826:	f000 fb84 	bl	800cf32 <__retarget_lock_release_recursive>
 800c82a:	e7e9      	b.n	800c800 <_vfiprintf_r+0x4c>
 800c82c:	2300      	movs	r3, #0
 800c82e:	9309      	str	r3, [sp, #36]	; 0x24
 800c830:	2320      	movs	r3, #32
 800c832:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c836:	2330      	movs	r3, #48	; 0x30
 800c838:	f04f 0901 	mov.w	r9, #1
 800c83c:	f8cd 800c 	str.w	r8, [sp, #12]
 800c840:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800ca00 <_vfiprintf_r+0x24c>
 800c844:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c848:	4623      	mov	r3, r4
 800c84a:	469a      	mov	sl, r3
 800c84c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c850:	b10a      	cbz	r2, 800c856 <_vfiprintf_r+0xa2>
 800c852:	2a25      	cmp	r2, #37	; 0x25
 800c854:	d1f9      	bne.n	800c84a <_vfiprintf_r+0x96>
 800c856:	ebba 0b04 	subs.w	fp, sl, r4
 800c85a:	d00b      	beq.n	800c874 <_vfiprintf_r+0xc0>
 800c85c:	465b      	mov	r3, fp
 800c85e:	4622      	mov	r2, r4
 800c860:	4629      	mov	r1, r5
 800c862:	4630      	mov	r0, r6
 800c864:	f7ff ff93 	bl	800c78e <__sfputs_r>
 800c868:	3001      	adds	r0, #1
 800c86a:	f000 80aa 	beq.w	800c9c2 <_vfiprintf_r+0x20e>
 800c86e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c870:	445a      	add	r2, fp
 800c872:	9209      	str	r2, [sp, #36]	; 0x24
 800c874:	f89a 3000 	ldrb.w	r3, [sl]
 800c878:	2b00      	cmp	r3, #0
 800c87a:	f000 80a2 	beq.w	800c9c2 <_vfiprintf_r+0x20e>
 800c87e:	2300      	movs	r3, #0
 800c880:	f04f 32ff 	mov.w	r2, #4294967295
 800c884:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c888:	f10a 0a01 	add.w	sl, sl, #1
 800c88c:	9304      	str	r3, [sp, #16]
 800c88e:	9307      	str	r3, [sp, #28]
 800c890:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c894:	931a      	str	r3, [sp, #104]	; 0x68
 800c896:	4654      	mov	r4, sl
 800c898:	2205      	movs	r2, #5
 800c89a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c89e:	4858      	ldr	r0, [pc, #352]	; (800ca00 <_vfiprintf_r+0x24c>)
 800c8a0:	f7ff f914 	bl	800bacc <memchr>
 800c8a4:	9a04      	ldr	r2, [sp, #16]
 800c8a6:	b9d8      	cbnz	r0, 800c8e0 <_vfiprintf_r+0x12c>
 800c8a8:	06d1      	lsls	r1, r2, #27
 800c8aa:	bf44      	itt	mi
 800c8ac:	2320      	movmi	r3, #32
 800c8ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c8b2:	0713      	lsls	r3, r2, #28
 800c8b4:	bf44      	itt	mi
 800c8b6:	232b      	movmi	r3, #43	; 0x2b
 800c8b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c8bc:	f89a 3000 	ldrb.w	r3, [sl]
 800c8c0:	2b2a      	cmp	r3, #42	; 0x2a
 800c8c2:	d015      	beq.n	800c8f0 <_vfiprintf_r+0x13c>
 800c8c4:	4654      	mov	r4, sl
 800c8c6:	2000      	movs	r0, #0
 800c8c8:	f04f 0c0a 	mov.w	ip, #10
 800c8cc:	9a07      	ldr	r2, [sp, #28]
 800c8ce:	4621      	mov	r1, r4
 800c8d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c8d4:	3b30      	subs	r3, #48	; 0x30
 800c8d6:	2b09      	cmp	r3, #9
 800c8d8:	d94e      	bls.n	800c978 <_vfiprintf_r+0x1c4>
 800c8da:	b1b0      	cbz	r0, 800c90a <_vfiprintf_r+0x156>
 800c8dc:	9207      	str	r2, [sp, #28]
 800c8de:	e014      	b.n	800c90a <_vfiprintf_r+0x156>
 800c8e0:	eba0 0308 	sub.w	r3, r0, r8
 800c8e4:	fa09 f303 	lsl.w	r3, r9, r3
 800c8e8:	4313      	orrs	r3, r2
 800c8ea:	46a2      	mov	sl, r4
 800c8ec:	9304      	str	r3, [sp, #16]
 800c8ee:	e7d2      	b.n	800c896 <_vfiprintf_r+0xe2>
 800c8f0:	9b03      	ldr	r3, [sp, #12]
 800c8f2:	1d19      	adds	r1, r3, #4
 800c8f4:	681b      	ldr	r3, [r3, #0]
 800c8f6:	9103      	str	r1, [sp, #12]
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	bfbb      	ittet	lt
 800c8fc:	425b      	neglt	r3, r3
 800c8fe:	f042 0202 	orrlt.w	r2, r2, #2
 800c902:	9307      	strge	r3, [sp, #28]
 800c904:	9307      	strlt	r3, [sp, #28]
 800c906:	bfb8      	it	lt
 800c908:	9204      	strlt	r2, [sp, #16]
 800c90a:	7823      	ldrb	r3, [r4, #0]
 800c90c:	2b2e      	cmp	r3, #46	; 0x2e
 800c90e:	d10c      	bne.n	800c92a <_vfiprintf_r+0x176>
 800c910:	7863      	ldrb	r3, [r4, #1]
 800c912:	2b2a      	cmp	r3, #42	; 0x2a
 800c914:	d135      	bne.n	800c982 <_vfiprintf_r+0x1ce>
 800c916:	9b03      	ldr	r3, [sp, #12]
 800c918:	3402      	adds	r4, #2
 800c91a:	1d1a      	adds	r2, r3, #4
 800c91c:	681b      	ldr	r3, [r3, #0]
 800c91e:	9203      	str	r2, [sp, #12]
 800c920:	2b00      	cmp	r3, #0
 800c922:	bfb8      	it	lt
 800c924:	f04f 33ff 	movlt.w	r3, #4294967295
 800c928:	9305      	str	r3, [sp, #20]
 800c92a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ca10 <_vfiprintf_r+0x25c>
 800c92e:	2203      	movs	r2, #3
 800c930:	4650      	mov	r0, sl
 800c932:	7821      	ldrb	r1, [r4, #0]
 800c934:	f7ff f8ca 	bl	800bacc <memchr>
 800c938:	b140      	cbz	r0, 800c94c <_vfiprintf_r+0x198>
 800c93a:	2340      	movs	r3, #64	; 0x40
 800c93c:	eba0 000a 	sub.w	r0, r0, sl
 800c940:	fa03 f000 	lsl.w	r0, r3, r0
 800c944:	9b04      	ldr	r3, [sp, #16]
 800c946:	3401      	adds	r4, #1
 800c948:	4303      	orrs	r3, r0
 800c94a:	9304      	str	r3, [sp, #16]
 800c94c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c950:	2206      	movs	r2, #6
 800c952:	482c      	ldr	r0, [pc, #176]	; (800ca04 <_vfiprintf_r+0x250>)
 800c954:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c958:	f7ff f8b8 	bl	800bacc <memchr>
 800c95c:	2800      	cmp	r0, #0
 800c95e:	d03f      	beq.n	800c9e0 <_vfiprintf_r+0x22c>
 800c960:	4b29      	ldr	r3, [pc, #164]	; (800ca08 <_vfiprintf_r+0x254>)
 800c962:	bb1b      	cbnz	r3, 800c9ac <_vfiprintf_r+0x1f8>
 800c964:	9b03      	ldr	r3, [sp, #12]
 800c966:	3307      	adds	r3, #7
 800c968:	f023 0307 	bic.w	r3, r3, #7
 800c96c:	3308      	adds	r3, #8
 800c96e:	9303      	str	r3, [sp, #12]
 800c970:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c972:	443b      	add	r3, r7
 800c974:	9309      	str	r3, [sp, #36]	; 0x24
 800c976:	e767      	b.n	800c848 <_vfiprintf_r+0x94>
 800c978:	460c      	mov	r4, r1
 800c97a:	2001      	movs	r0, #1
 800c97c:	fb0c 3202 	mla	r2, ip, r2, r3
 800c980:	e7a5      	b.n	800c8ce <_vfiprintf_r+0x11a>
 800c982:	2300      	movs	r3, #0
 800c984:	f04f 0c0a 	mov.w	ip, #10
 800c988:	4619      	mov	r1, r3
 800c98a:	3401      	adds	r4, #1
 800c98c:	9305      	str	r3, [sp, #20]
 800c98e:	4620      	mov	r0, r4
 800c990:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c994:	3a30      	subs	r2, #48	; 0x30
 800c996:	2a09      	cmp	r2, #9
 800c998:	d903      	bls.n	800c9a2 <_vfiprintf_r+0x1ee>
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	d0c5      	beq.n	800c92a <_vfiprintf_r+0x176>
 800c99e:	9105      	str	r1, [sp, #20]
 800c9a0:	e7c3      	b.n	800c92a <_vfiprintf_r+0x176>
 800c9a2:	4604      	mov	r4, r0
 800c9a4:	2301      	movs	r3, #1
 800c9a6:	fb0c 2101 	mla	r1, ip, r1, r2
 800c9aa:	e7f0      	b.n	800c98e <_vfiprintf_r+0x1da>
 800c9ac:	ab03      	add	r3, sp, #12
 800c9ae:	9300      	str	r3, [sp, #0]
 800c9b0:	462a      	mov	r2, r5
 800c9b2:	4630      	mov	r0, r6
 800c9b4:	4b15      	ldr	r3, [pc, #84]	; (800ca0c <_vfiprintf_r+0x258>)
 800c9b6:	a904      	add	r1, sp, #16
 800c9b8:	f7fd fe0c 	bl	800a5d4 <_printf_float>
 800c9bc:	4607      	mov	r7, r0
 800c9be:	1c78      	adds	r0, r7, #1
 800c9c0:	d1d6      	bne.n	800c970 <_vfiprintf_r+0x1bc>
 800c9c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c9c4:	07d9      	lsls	r1, r3, #31
 800c9c6:	d405      	bmi.n	800c9d4 <_vfiprintf_r+0x220>
 800c9c8:	89ab      	ldrh	r3, [r5, #12]
 800c9ca:	059a      	lsls	r2, r3, #22
 800c9cc:	d402      	bmi.n	800c9d4 <_vfiprintf_r+0x220>
 800c9ce:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c9d0:	f000 faaf 	bl	800cf32 <__retarget_lock_release_recursive>
 800c9d4:	89ab      	ldrh	r3, [r5, #12]
 800c9d6:	065b      	lsls	r3, r3, #25
 800c9d8:	f53f af12 	bmi.w	800c800 <_vfiprintf_r+0x4c>
 800c9dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c9de:	e711      	b.n	800c804 <_vfiprintf_r+0x50>
 800c9e0:	ab03      	add	r3, sp, #12
 800c9e2:	9300      	str	r3, [sp, #0]
 800c9e4:	462a      	mov	r2, r5
 800c9e6:	4630      	mov	r0, r6
 800c9e8:	4b08      	ldr	r3, [pc, #32]	; (800ca0c <_vfiprintf_r+0x258>)
 800c9ea:	a904      	add	r1, sp, #16
 800c9ec:	f7fe f88e 	bl	800ab0c <_printf_i>
 800c9f0:	e7e4      	b.n	800c9bc <_vfiprintf_r+0x208>
 800c9f2:	bf00      	nop
 800c9f4:	0800e19c 	.word	0x0800e19c
 800c9f8:	0800e1bc 	.word	0x0800e1bc
 800c9fc:	0800e17c 	.word	0x0800e17c
 800ca00:	0800e024 	.word	0x0800e024
 800ca04:	0800e02e 	.word	0x0800e02e
 800ca08:	0800a5d5 	.word	0x0800a5d5
 800ca0c:	0800c78f 	.word	0x0800c78f
 800ca10:	0800e02a 	.word	0x0800e02a

0800ca14 <__swbuf_r>:
 800ca14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca16:	460e      	mov	r6, r1
 800ca18:	4614      	mov	r4, r2
 800ca1a:	4605      	mov	r5, r0
 800ca1c:	b118      	cbz	r0, 800ca26 <__swbuf_r+0x12>
 800ca1e:	6983      	ldr	r3, [r0, #24]
 800ca20:	b90b      	cbnz	r3, 800ca26 <__swbuf_r+0x12>
 800ca22:	f000 f9e7 	bl	800cdf4 <__sinit>
 800ca26:	4b21      	ldr	r3, [pc, #132]	; (800caac <__swbuf_r+0x98>)
 800ca28:	429c      	cmp	r4, r3
 800ca2a:	d12b      	bne.n	800ca84 <__swbuf_r+0x70>
 800ca2c:	686c      	ldr	r4, [r5, #4]
 800ca2e:	69a3      	ldr	r3, [r4, #24]
 800ca30:	60a3      	str	r3, [r4, #8]
 800ca32:	89a3      	ldrh	r3, [r4, #12]
 800ca34:	071a      	lsls	r2, r3, #28
 800ca36:	d52f      	bpl.n	800ca98 <__swbuf_r+0x84>
 800ca38:	6923      	ldr	r3, [r4, #16]
 800ca3a:	b36b      	cbz	r3, 800ca98 <__swbuf_r+0x84>
 800ca3c:	6923      	ldr	r3, [r4, #16]
 800ca3e:	6820      	ldr	r0, [r4, #0]
 800ca40:	b2f6      	uxtb	r6, r6
 800ca42:	1ac0      	subs	r0, r0, r3
 800ca44:	6963      	ldr	r3, [r4, #20]
 800ca46:	4637      	mov	r7, r6
 800ca48:	4283      	cmp	r3, r0
 800ca4a:	dc04      	bgt.n	800ca56 <__swbuf_r+0x42>
 800ca4c:	4621      	mov	r1, r4
 800ca4e:	4628      	mov	r0, r5
 800ca50:	f000 f93c 	bl	800cccc <_fflush_r>
 800ca54:	bb30      	cbnz	r0, 800caa4 <__swbuf_r+0x90>
 800ca56:	68a3      	ldr	r3, [r4, #8]
 800ca58:	3001      	adds	r0, #1
 800ca5a:	3b01      	subs	r3, #1
 800ca5c:	60a3      	str	r3, [r4, #8]
 800ca5e:	6823      	ldr	r3, [r4, #0]
 800ca60:	1c5a      	adds	r2, r3, #1
 800ca62:	6022      	str	r2, [r4, #0]
 800ca64:	701e      	strb	r6, [r3, #0]
 800ca66:	6963      	ldr	r3, [r4, #20]
 800ca68:	4283      	cmp	r3, r0
 800ca6a:	d004      	beq.n	800ca76 <__swbuf_r+0x62>
 800ca6c:	89a3      	ldrh	r3, [r4, #12]
 800ca6e:	07db      	lsls	r3, r3, #31
 800ca70:	d506      	bpl.n	800ca80 <__swbuf_r+0x6c>
 800ca72:	2e0a      	cmp	r6, #10
 800ca74:	d104      	bne.n	800ca80 <__swbuf_r+0x6c>
 800ca76:	4621      	mov	r1, r4
 800ca78:	4628      	mov	r0, r5
 800ca7a:	f000 f927 	bl	800cccc <_fflush_r>
 800ca7e:	b988      	cbnz	r0, 800caa4 <__swbuf_r+0x90>
 800ca80:	4638      	mov	r0, r7
 800ca82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ca84:	4b0a      	ldr	r3, [pc, #40]	; (800cab0 <__swbuf_r+0x9c>)
 800ca86:	429c      	cmp	r4, r3
 800ca88:	d101      	bne.n	800ca8e <__swbuf_r+0x7a>
 800ca8a:	68ac      	ldr	r4, [r5, #8]
 800ca8c:	e7cf      	b.n	800ca2e <__swbuf_r+0x1a>
 800ca8e:	4b09      	ldr	r3, [pc, #36]	; (800cab4 <__swbuf_r+0xa0>)
 800ca90:	429c      	cmp	r4, r3
 800ca92:	bf08      	it	eq
 800ca94:	68ec      	ldreq	r4, [r5, #12]
 800ca96:	e7ca      	b.n	800ca2e <__swbuf_r+0x1a>
 800ca98:	4621      	mov	r1, r4
 800ca9a:	4628      	mov	r0, r5
 800ca9c:	f000 f81a 	bl	800cad4 <__swsetup_r>
 800caa0:	2800      	cmp	r0, #0
 800caa2:	d0cb      	beq.n	800ca3c <__swbuf_r+0x28>
 800caa4:	f04f 37ff 	mov.w	r7, #4294967295
 800caa8:	e7ea      	b.n	800ca80 <__swbuf_r+0x6c>
 800caaa:	bf00      	nop
 800caac:	0800e19c 	.word	0x0800e19c
 800cab0:	0800e1bc 	.word	0x0800e1bc
 800cab4:	0800e17c 	.word	0x0800e17c

0800cab8 <__ascii_wctomb>:
 800cab8:	4603      	mov	r3, r0
 800caba:	4608      	mov	r0, r1
 800cabc:	b141      	cbz	r1, 800cad0 <__ascii_wctomb+0x18>
 800cabe:	2aff      	cmp	r2, #255	; 0xff
 800cac0:	d904      	bls.n	800cacc <__ascii_wctomb+0x14>
 800cac2:	228a      	movs	r2, #138	; 0x8a
 800cac4:	f04f 30ff 	mov.w	r0, #4294967295
 800cac8:	601a      	str	r2, [r3, #0]
 800caca:	4770      	bx	lr
 800cacc:	2001      	movs	r0, #1
 800cace:	700a      	strb	r2, [r1, #0]
 800cad0:	4770      	bx	lr
	...

0800cad4 <__swsetup_r>:
 800cad4:	4b32      	ldr	r3, [pc, #200]	; (800cba0 <__swsetup_r+0xcc>)
 800cad6:	b570      	push	{r4, r5, r6, lr}
 800cad8:	681d      	ldr	r5, [r3, #0]
 800cada:	4606      	mov	r6, r0
 800cadc:	460c      	mov	r4, r1
 800cade:	b125      	cbz	r5, 800caea <__swsetup_r+0x16>
 800cae0:	69ab      	ldr	r3, [r5, #24]
 800cae2:	b913      	cbnz	r3, 800caea <__swsetup_r+0x16>
 800cae4:	4628      	mov	r0, r5
 800cae6:	f000 f985 	bl	800cdf4 <__sinit>
 800caea:	4b2e      	ldr	r3, [pc, #184]	; (800cba4 <__swsetup_r+0xd0>)
 800caec:	429c      	cmp	r4, r3
 800caee:	d10f      	bne.n	800cb10 <__swsetup_r+0x3c>
 800caf0:	686c      	ldr	r4, [r5, #4]
 800caf2:	89a3      	ldrh	r3, [r4, #12]
 800caf4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800caf8:	0719      	lsls	r1, r3, #28
 800cafa:	d42c      	bmi.n	800cb56 <__swsetup_r+0x82>
 800cafc:	06dd      	lsls	r5, r3, #27
 800cafe:	d411      	bmi.n	800cb24 <__swsetup_r+0x50>
 800cb00:	2309      	movs	r3, #9
 800cb02:	6033      	str	r3, [r6, #0]
 800cb04:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800cb08:	f04f 30ff 	mov.w	r0, #4294967295
 800cb0c:	81a3      	strh	r3, [r4, #12]
 800cb0e:	e03e      	b.n	800cb8e <__swsetup_r+0xba>
 800cb10:	4b25      	ldr	r3, [pc, #148]	; (800cba8 <__swsetup_r+0xd4>)
 800cb12:	429c      	cmp	r4, r3
 800cb14:	d101      	bne.n	800cb1a <__swsetup_r+0x46>
 800cb16:	68ac      	ldr	r4, [r5, #8]
 800cb18:	e7eb      	b.n	800caf2 <__swsetup_r+0x1e>
 800cb1a:	4b24      	ldr	r3, [pc, #144]	; (800cbac <__swsetup_r+0xd8>)
 800cb1c:	429c      	cmp	r4, r3
 800cb1e:	bf08      	it	eq
 800cb20:	68ec      	ldreq	r4, [r5, #12]
 800cb22:	e7e6      	b.n	800caf2 <__swsetup_r+0x1e>
 800cb24:	0758      	lsls	r0, r3, #29
 800cb26:	d512      	bpl.n	800cb4e <__swsetup_r+0x7a>
 800cb28:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cb2a:	b141      	cbz	r1, 800cb3e <__swsetup_r+0x6a>
 800cb2c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cb30:	4299      	cmp	r1, r3
 800cb32:	d002      	beq.n	800cb3a <__swsetup_r+0x66>
 800cb34:	4630      	mov	r0, r6
 800cb36:	f7ff fb75 	bl	800c224 <_free_r>
 800cb3a:	2300      	movs	r3, #0
 800cb3c:	6363      	str	r3, [r4, #52]	; 0x34
 800cb3e:	89a3      	ldrh	r3, [r4, #12]
 800cb40:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800cb44:	81a3      	strh	r3, [r4, #12]
 800cb46:	2300      	movs	r3, #0
 800cb48:	6063      	str	r3, [r4, #4]
 800cb4a:	6923      	ldr	r3, [r4, #16]
 800cb4c:	6023      	str	r3, [r4, #0]
 800cb4e:	89a3      	ldrh	r3, [r4, #12]
 800cb50:	f043 0308 	orr.w	r3, r3, #8
 800cb54:	81a3      	strh	r3, [r4, #12]
 800cb56:	6923      	ldr	r3, [r4, #16]
 800cb58:	b94b      	cbnz	r3, 800cb6e <__swsetup_r+0x9a>
 800cb5a:	89a3      	ldrh	r3, [r4, #12]
 800cb5c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800cb60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cb64:	d003      	beq.n	800cb6e <__swsetup_r+0x9a>
 800cb66:	4621      	mov	r1, r4
 800cb68:	4630      	mov	r0, r6
 800cb6a:	f000 fa07 	bl	800cf7c <__smakebuf_r>
 800cb6e:	89a0      	ldrh	r0, [r4, #12]
 800cb70:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cb74:	f010 0301 	ands.w	r3, r0, #1
 800cb78:	d00a      	beq.n	800cb90 <__swsetup_r+0xbc>
 800cb7a:	2300      	movs	r3, #0
 800cb7c:	60a3      	str	r3, [r4, #8]
 800cb7e:	6963      	ldr	r3, [r4, #20]
 800cb80:	425b      	negs	r3, r3
 800cb82:	61a3      	str	r3, [r4, #24]
 800cb84:	6923      	ldr	r3, [r4, #16]
 800cb86:	b943      	cbnz	r3, 800cb9a <__swsetup_r+0xc6>
 800cb88:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800cb8c:	d1ba      	bne.n	800cb04 <__swsetup_r+0x30>
 800cb8e:	bd70      	pop	{r4, r5, r6, pc}
 800cb90:	0781      	lsls	r1, r0, #30
 800cb92:	bf58      	it	pl
 800cb94:	6963      	ldrpl	r3, [r4, #20]
 800cb96:	60a3      	str	r3, [r4, #8]
 800cb98:	e7f4      	b.n	800cb84 <__swsetup_r+0xb0>
 800cb9a:	2000      	movs	r0, #0
 800cb9c:	e7f7      	b.n	800cb8e <__swsetup_r+0xba>
 800cb9e:	bf00      	nop
 800cba0:	20000034 	.word	0x20000034
 800cba4:	0800e19c 	.word	0x0800e19c
 800cba8:	0800e1bc 	.word	0x0800e1bc
 800cbac:	0800e17c 	.word	0x0800e17c

0800cbb0 <abort>:
 800cbb0:	2006      	movs	r0, #6
 800cbb2:	b508      	push	{r3, lr}
 800cbb4:	f000 fa52 	bl	800d05c <raise>
 800cbb8:	2001      	movs	r0, #1
 800cbba:	f7f6 feca 	bl	8003952 <_exit>
	...

0800cbc0 <__sflush_r>:
 800cbc0:	898a      	ldrh	r2, [r1, #12]
 800cbc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cbc6:	4605      	mov	r5, r0
 800cbc8:	0710      	lsls	r0, r2, #28
 800cbca:	460c      	mov	r4, r1
 800cbcc:	d458      	bmi.n	800cc80 <__sflush_r+0xc0>
 800cbce:	684b      	ldr	r3, [r1, #4]
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	dc05      	bgt.n	800cbe0 <__sflush_r+0x20>
 800cbd4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800cbd6:	2b00      	cmp	r3, #0
 800cbd8:	dc02      	bgt.n	800cbe0 <__sflush_r+0x20>
 800cbda:	2000      	movs	r0, #0
 800cbdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cbe0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cbe2:	2e00      	cmp	r6, #0
 800cbe4:	d0f9      	beq.n	800cbda <__sflush_r+0x1a>
 800cbe6:	2300      	movs	r3, #0
 800cbe8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800cbec:	682f      	ldr	r7, [r5, #0]
 800cbee:	602b      	str	r3, [r5, #0]
 800cbf0:	d032      	beq.n	800cc58 <__sflush_r+0x98>
 800cbf2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800cbf4:	89a3      	ldrh	r3, [r4, #12]
 800cbf6:	075a      	lsls	r2, r3, #29
 800cbf8:	d505      	bpl.n	800cc06 <__sflush_r+0x46>
 800cbfa:	6863      	ldr	r3, [r4, #4]
 800cbfc:	1ac0      	subs	r0, r0, r3
 800cbfe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cc00:	b10b      	cbz	r3, 800cc06 <__sflush_r+0x46>
 800cc02:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cc04:	1ac0      	subs	r0, r0, r3
 800cc06:	2300      	movs	r3, #0
 800cc08:	4602      	mov	r2, r0
 800cc0a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cc0c:	4628      	mov	r0, r5
 800cc0e:	6a21      	ldr	r1, [r4, #32]
 800cc10:	47b0      	blx	r6
 800cc12:	1c43      	adds	r3, r0, #1
 800cc14:	89a3      	ldrh	r3, [r4, #12]
 800cc16:	d106      	bne.n	800cc26 <__sflush_r+0x66>
 800cc18:	6829      	ldr	r1, [r5, #0]
 800cc1a:	291d      	cmp	r1, #29
 800cc1c:	d82c      	bhi.n	800cc78 <__sflush_r+0xb8>
 800cc1e:	4a2a      	ldr	r2, [pc, #168]	; (800ccc8 <__sflush_r+0x108>)
 800cc20:	40ca      	lsrs	r2, r1
 800cc22:	07d6      	lsls	r6, r2, #31
 800cc24:	d528      	bpl.n	800cc78 <__sflush_r+0xb8>
 800cc26:	2200      	movs	r2, #0
 800cc28:	6062      	str	r2, [r4, #4]
 800cc2a:	6922      	ldr	r2, [r4, #16]
 800cc2c:	04d9      	lsls	r1, r3, #19
 800cc2e:	6022      	str	r2, [r4, #0]
 800cc30:	d504      	bpl.n	800cc3c <__sflush_r+0x7c>
 800cc32:	1c42      	adds	r2, r0, #1
 800cc34:	d101      	bne.n	800cc3a <__sflush_r+0x7a>
 800cc36:	682b      	ldr	r3, [r5, #0]
 800cc38:	b903      	cbnz	r3, 800cc3c <__sflush_r+0x7c>
 800cc3a:	6560      	str	r0, [r4, #84]	; 0x54
 800cc3c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cc3e:	602f      	str	r7, [r5, #0]
 800cc40:	2900      	cmp	r1, #0
 800cc42:	d0ca      	beq.n	800cbda <__sflush_r+0x1a>
 800cc44:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cc48:	4299      	cmp	r1, r3
 800cc4a:	d002      	beq.n	800cc52 <__sflush_r+0x92>
 800cc4c:	4628      	mov	r0, r5
 800cc4e:	f7ff fae9 	bl	800c224 <_free_r>
 800cc52:	2000      	movs	r0, #0
 800cc54:	6360      	str	r0, [r4, #52]	; 0x34
 800cc56:	e7c1      	b.n	800cbdc <__sflush_r+0x1c>
 800cc58:	6a21      	ldr	r1, [r4, #32]
 800cc5a:	2301      	movs	r3, #1
 800cc5c:	4628      	mov	r0, r5
 800cc5e:	47b0      	blx	r6
 800cc60:	1c41      	adds	r1, r0, #1
 800cc62:	d1c7      	bne.n	800cbf4 <__sflush_r+0x34>
 800cc64:	682b      	ldr	r3, [r5, #0]
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d0c4      	beq.n	800cbf4 <__sflush_r+0x34>
 800cc6a:	2b1d      	cmp	r3, #29
 800cc6c:	d001      	beq.n	800cc72 <__sflush_r+0xb2>
 800cc6e:	2b16      	cmp	r3, #22
 800cc70:	d101      	bne.n	800cc76 <__sflush_r+0xb6>
 800cc72:	602f      	str	r7, [r5, #0]
 800cc74:	e7b1      	b.n	800cbda <__sflush_r+0x1a>
 800cc76:	89a3      	ldrh	r3, [r4, #12]
 800cc78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cc7c:	81a3      	strh	r3, [r4, #12]
 800cc7e:	e7ad      	b.n	800cbdc <__sflush_r+0x1c>
 800cc80:	690f      	ldr	r7, [r1, #16]
 800cc82:	2f00      	cmp	r7, #0
 800cc84:	d0a9      	beq.n	800cbda <__sflush_r+0x1a>
 800cc86:	0793      	lsls	r3, r2, #30
 800cc88:	bf18      	it	ne
 800cc8a:	2300      	movne	r3, #0
 800cc8c:	680e      	ldr	r6, [r1, #0]
 800cc8e:	bf08      	it	eq
 800cc90:	694b      	ldreq	r3, [r1, #20]
 800cc92:	eba6 0807 	sub.w	r8, r6, r7
 800cc96:	600f      	str	r7, [r1, #0]
 800cc98:	608b      	str	r3, [r1, #8]
 800cc9a:	f1b8 0f00 	cmp.w	r8, #0
 800cc9e:	dd9c      	ble.n	800cbda <__sflush_r+0x1a>
 800cca0:	4643      	mov	r3, r8
 800cca2:	463a      	mov	r2, r7
 800cca4:	4628      	mov	r0, r5
 800cca6:	6a21      	ldr	r1, [r4, #32]
 800cca8:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ccaa:	47b0      	blx	r6
 800ccac:	2800      	cmp	r0, #0
 800ccae:	dc06      	bgt.n	800ccbe <__sflush_r+0xfe>
 800ccb0:	89a3      	ldrh	r3, [r4, #12]
 800ccb2:	f04f 30ff 	mov.w	r0, #4294967295
 800ccb6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ccba:	81a3      	strh	r3, [r4, #12]
 800ccbc:	e78e      	b.n	800cbdc <__sflush_r+0x1c>
 800ccbe:	4407      	add	r7, r0
 800ccc0:	eba8 0800 	sub.w	r8, r8, r0
 800ccc4:	e7e9      	b.n	800cc9a <__sflush_r+0xda>
 800ccc6:	bf00      	nop
 800ccc8:	20400001 	.word	0x20400001

0800cccc <_fflush_r>:
 800cccc:	b538      	push	{r3, r4, r5, lr}
 800ccce:	690b      	ldr	r3, [r1, #16]
 800ccd0:	4605      	mov	r5, r0
 800ccd2:	460c      	mov	r4, r1
 800ccd4:	b913      	cbnz	r3, 800ccdc <_fflush_r+0x10>
 800ccd6:	2500      	movs	r5, #0
 800ccd8:	4628      	mov	r0, r5
 800ccda:	bd38      	pop	{r3, r4, r5, pc}
 800ccdc:	b118      	cbz	r0, 800cce6 <_fflush_r+0x1a>
 800ccde:	6983      	ldr	r3, [r0, #24]
 800cce0:	b90b      	cbnz	r3, 800cce6 <_fflush_r+0x1a>
 800cce2:	f000 f887 	bl	800cdf4 <__sinit>
 800cce6:	4b14      	ldr	r3, [pc, #80]	; (800cd38 <_fflush_r+0x6c>)
 800cce8:	429c      	cmp	r4, r3
 800ccea:	d11b      	bne.n	800cd24 <_fflush_r+0x58>
 800ccec:	686c      	ldr	r4, [r5, #4]
 800ccee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	d0ef      	beq.n	800ccd6 <_fflush_r+0xa>
 800ccf6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ccf8:	07d0      	lsls	r0, r2, #31
 800ccfa:	d404      	bmi.n	800cd06 <_fflush_r+0x3a>
 800ccfc:	0599      	lsls	r1, r3, #22
 800ccfe:	d402      	bmi.n	800cd06 <_fflush_r+0x3a>
 800cd00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cd02:	f000 f915 	bl	800cf30 <__retarget_lock_acquire_recursive>
 800cd06:	4628      	mov	r0, r5
 800cd08:	4621      	mov	r1, r4
 800cd0a:	f7ff ff59 	bl	800cbc0 <__sflush_r>
 800cd0e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cd10:	4605      	mov	r5, r0
 800cd12:	07da      	lsls	r2, r3, #31
 800cd14:	d4e0      	bmi.n	800ccd8 <_fflush_r+0xc>
 800cd16:	89a3      	ldrh	r3, [r4, #12]
 800cd18:	059b      	lsls	r3, r3, #22
 800cd1a:	d4dd      	bmi.n	800ccd8 <_fflush_r+0xc>
 800cd1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cd1e:	f000 f908 	bl	800cf32 <__retarget_lock_release_recursive>
 800cd22:	e7d9      	b.n	800ccd8 <_fflush_r+0xc>
 800cd24:	4b05      	ldr	r3, [pc, #20]	; (800cd3c <_fflush_r+0x70>)
 800cd26:	429c      	cmp	r4, r3
 800cd28:	d101      	bne.n	800cd2e <_fflush_r+0x62>
 800cd2a:	68ac      	ldr	r4, [r5, #8]
 800cd2c:	e7df      	b.n	800ccee <_fflush_r+0x22>
 800cd2e:	4b04      	ldr	r3, [pc, #16]	; (800cd40 <_fflush_r+0x74>)
 800cd30:	429c      	cmp	r4, r3
 800cd32:	bf08      	it	eq
 800cd34:	68ec      	ldreq	r4, [r5, #12]
 800cd36:	e7da      	b.n	800ccee <_fflush_r+0x22>
 800cd38:	0800e19c 	.word	0x0800e19c
 800cd3c:	0800e1bc 	.word	0x0800e1bc
 800cd40:	0800e17c 	.word	0x0800e17c

0800cd44 <std>:
 800cd44:	2300      	movs	r3, #0
 800cd46:	b510      	push	{r4, lr}
 800cd48:	4604      	mov	r4, r0
 800cd4a:	e9c0 3300 	strd	r3, r3, [r0]
 800cd4e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cd52:	6083      	str	r3, [r0, #8]
 800cd54:	8181      	strh	r1, [r0, #12]
 800cd56:	6643      	str	r3, [r0, #100]	; 0x64
 800cd58:	81c2      	strh	r2, [r0, #14]
 800cd5a:	6183      	str	r3, [r0, #24]
 800cd5c:	4619      	mov	r1, r3
 800cd5e:	2208      	movs	r2, #8
 800cd60:	305c      	adds	r0, #92	; 0x5c
 800cd62:	f7fd fb92 	bl	800a48a <memset>
 800cd66:	4b05      	ldr	r3, [pc, #20]	; (800cd7c <std+0x38>)
 800cd68:	6224      	str	r4, [r4, #32]
 800cd6a:	6263      	str	r3, [r4, #36]	; 0x24
 800cd6c:	4b04      	ldr	r3, [pc, #16]	; (800cd80 <std+0x3c>)
 800cd6e:	62a3      	str	r3, [r4, #40]	; 0x28
 800cd70:	4b04      	ldr	r3, [pc, #16]	; (800cd84 <std+0x40>)
 800cd72:	62e3      	str	r3, [r4, #44]	; 0x2c
 800cd74:	4b04      	ldr	r3, [pc, #16]	; (800cd88 <std+0x44>)
 800cd76:	6323      	str	r3, [r4, #48]	; 0x30
 800cd78:	bd10      	pop	{r4, pc}
 800cd7a:	bf00      	nop
 800cd7c:	0800d095 	.word	0x0800d095
 800cd80:	0800d0b7 	.word	0x0800d0b7
 800cd84:	0800d0ef 	.word	0x0800d0ef
 800cd88:	0800d113 	.word	0x0800d113

0800cd8c <_cleanup_r>:
 800cd8c:	4901      	ldr	r1, [pc, #4]	; (800cd94 <_cleanup_r+0x8>)
 800cd8e:	f000 b8af 	b.w	800cef0 <_fwalk_reent>
 800cd92:	bf00      	nop
 800cd94:	0800cccd 	.word	0x0800cccd

0800cd98 <__sfmoreglue>:
 800cd98:	b570      	push	{r4, r5, r6, lr}
 800cd9a:	2568      	movs	r5, #104	; 0x68
 800cd9c:	1e4a      	subs	r2, r1, #1
 800cd9e:	4355      	muls	r5, r2
 800cda0:	460e      	mov	r6, r1
 800cda2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800cda6:	f7ff fa89 	bl	800c2bc <_malloc_r>
 800cdaa:	4604      	mov	r4, r0
 800cdac:	b140      	cbz	r0, 800cdc0 <__sfmoreglue+0x28>
 800cdae:	2100      	movs	r1, #0
 800cdb0:	e9c0 1600 	strd	r1, r6, [r0]
 800cdb4:	300c      	adds	r0, #12
 800cdb6:	60a0      	str	r0, [r4, #8]
 800cdb8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800cdbc:	f7fd fb65 	bl	800a48a <memset>
 800cdc0:	4620      	mov	r0, r4
 800cdc2:	bd70      	pop	{r4, r5, r6, pc}

0800cdc4 <__sfp_lock_acquire>:
 800cdc4:	4801      	ldr	r0, [pc, #4]	; (800cdcc <__sfp_lock_acquire+0x8>)
 800cdc6:	f000 b8b3 	b.w	800cf30 <__retarget_lock_acquire_recursive>
 800cdca:	bf00      	nop
 800cdcc:	200019d8 	.word	0x200019d8

0800cdd0 <__sfp_lock_release>:
 800cdd0:	4801      	ldr	r0, [pc, #4]	; (800cdd8 <__sfp_lock_release+0x8>)
 800cdd2:	f000 b8ae 	b.w	800cf32 <__retarget_lock_release_recursive>
 800cdd6:	bf00      	nop
 800cdd8:	200019d8 	.word	0x200019d8

0800cddc <__sinit_lock_acquire>:
 800cddc:	4801      	ldr	r0, [pc, #4]	; (800cde4 <__sinit_lock_acquire+0x8>)
 800cdde:	f000 b8a7 	b.w	800cf30 <__retarget_lock_acquire_recursive>
 800cde2:	bf00      	nop
 800cde4:	200019d3 	.word	0x200019d3

0800cde8 <__sinit_lock_release>:
 800cde8:	4801      	ldr	r0, [pc, #4]	; (800cdf0 <__sinit_lock_release+0x8>)
 800cdea:	f000 b8a2 	b.w	800cf32 <__retarget_lock_release_recursive>
 800cdee:	bf00      	nop
 800cdf0:	200019d3 	.word	0x200019d3

0800cdf4 <__sinit>:
 800cdf4:	b510      	push	{r4, lr}
 800cdf6:	4604      	mov	r4, r0
 800cdf8:	f7ff fff0 	bl	800cddc <__sinit_lock_acquire>
 800cdfc:	69a3      	ldr	r3, [r4, #24]
 800cdfe:	b11b      	cbz	r3, 800ce08 <__sinit+0x14>
 800ce00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ce04:	f7ff bff0 	b.w	800cde8 <__sinit_lock_release>
 800ce08:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ce0c:	6523      	str	r3, [r4, #80]	; 0x50
 800ce0e:	4b13      	ldr	r3, [pc, #76]	; (800ce5c <__sinit+0x68>)
 800ce10:	4a13      	ldr	r2, [pc, #76]	; (800ce60 <__sinit+0x6c>)
 800ce12:	681b      	ldr	r3, [r3, #0]
 800ce14:	62a2      	str	r2, [r4, #40]	; 0x28
 800ce16:	42a3      	cmp	r3, r4
 800ce18:	bf08      	it	eq
 800ce1a:	2301      	moveq	r3, #1
 800ce1c:	4620      	mov	r0, r4
 800ce1e:	bf08      	it	eq
 800ce20:	61a3      	streq	r3, [r4, #24]
 800ce22:	f000 f81f 	bl	800ce64 <__sfp>
 800ce26:	6060      	str	r0, [r4, #4]
 800ce28:	4620      	mov	r0, r4
 800ce2a:	f000 f81b 	bl	800ce64 <__sfp>
 800ce2e:	60a0      	str	r0, [r4, #8]
 800ce30:	4620      	mov	r0, r4
 800ce32:	f000 f817 	bl	800ce64 <__sfp>
 800ce36:	2200      	movs	r2, #0
 800ce38:	2104      	movs	r1, #4
 800ce3a:	60e0      	str	r0, [r4, #12]
 800ce3c:	6860      	ldr	r0, [r4, #4]
 800ce3e:	f7ff ff81 	bl	800cd44 <std>
 800ce42:	2201      	movs	r2, #1
 800ce44:	2109      	movs	r1, #9
 800ce46:	68a0      	ldr	r0, [r4, #8]
 800ce48:	f7ff ff7c 	bl	800cd44 <std>
 800ce4c:	2202      	movs	r2, #2
 800ce4e:	2112      	movs	r1, #18
 800ce50:	68e0      	ldr	r0, [r4, #12]
 800ce52:	f7ff ff77 	bl	800cd44 <std>
 800ce56:	2301      	movs	r3, #1
 800ce58:	61a3      	str	r3, [r4, #24]
 800ce5a:	e7d1      	b.n	800ce00 <__sinit+0xc>
 800ce5c:	0800ddf8 	.word	0x0800ddf8
 800ce60:	0800cd8d 	.word	0x0800cd8d

0800ce64 <__sfp>:
 800ce64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce66:	4607      	mov	r7, r0
 800ce68:	f7ff ffac 	bl	800cdc4 <__sfp_lock_acquire>
 800ce6c:	4b1e      	ldr	r3, [pc, #120]	; (800cee8 <__sfp+0x84>)
 800ce6e:	681e      	ldr	r6, [r3, #0]
 800ce70:	69b3      	ldr	r3, [r6, #24]
 800ce72:	b913      	cbnz	r3, 800ce7a <__sfp+0x16>
 800ce74:	4630      	mov	r0, r6
 800ce76:	f7ff ffbd 	bl	800cdf4 <__sinit>
 800ce7a:	3648      	adds	r6, #72	; 0x48
 800ce7c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ce80:	3b01      	subs	r3, #1
 800ce82:	d503      	bpl.n	800ce8c <__sfp+0x28>
 800ce84:	6833      	ldr	r3, [r6, #0]
 800ce86:	b30b      	cbz	r3, 800cecc <__sfp+0x68>
 800ce88:	6836      	ldr	r6, [r6, #0]
 800ce8a:	e7f7      	b.n	800ce7c <__sfp+0x18>
 800ce8c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ce90:	b9d5      	cbnz	r5, 800cec8 <__sfp+0x64>
 800ce92:	4b16      	ldr	r3, [pc, #88]	; (800ceec <__sfp+0x88>)
 800ce94:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ce98:	60e3      	str	r3, [r4, #12]
 800ce9a:	6665      	str	r5, [r4, #100]	; 0x64
 800ce9c:	f000 f847 	bl	800cf2e <__retarget_lock_init_recursive>
 800cea0:	f7ff ff96 	bl	800cdd0 <__sfp_lock_release>
 800cea4:	2208      	movs	r2, #8
 800cea6:	4629      	mov	r1, r5
 800cea8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ceac:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ceb0:	6025      	str	r5, [r4, #0]
 800ceb2:	61a5      	str	r5, [r4, #24]
 800ceb4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ceb8:	f7fd fae7 	bl	800a48a <memset>
 800cebc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800cec0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800cec4:	4620      	mov	r0, r4
 800cec6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cec8:	3468      	adds	r4, #104	; 0x68
 800ceca:	e7d9      	b.n	800ce80 <__sfp+0x1c>
 800cecc:	2104      	movs	r1, #4
 800cece:	4638      	mov	r0, r7
 800ced0:	f7ff ff62 	bl	800cd98 <__sfmoreglue>
 800ced4:	4604      	mov	r4, r0
 800ced6:	6030      	str	r0, [r6, #0]
 800ced8:	2800      	cmp	r0, #0
 800ceda:	d1d5      	bne.n	800ce88 <__sfp+0x24>
 800cedc:	f7ff ff78 	bl	800cdd0 <__sfp_lock_release>
 800cee0:	230c      	movs	r3, #12
 800cee2:	603b      	str	r3, [r7, #0]
 800cee4:	e7ee      	b.n	800cec4 <__sfp+0x60>
 800cee6:	bf00      	nop
 800cee8:	0800ddf8 	.word	0x0800ddf8
 800ceec:	ffff0001 	.word	0xffff0001

0800cef0 <_fwalk_reent>:
 800cef0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cef4:	4606      	mov	r6, r0
 800cef6:	4688      	mov	r8, r1
 800cef8:	2700      	movs	r7, #0
 800cefa:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800cefe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cf02:	f1b9 0901 	subs.w	r9, r9, #1
 800cf06:	d505      	bpl.n	800cf14 <_fwalk_reent+0x24>
 800cf08:	6824      	ldr	r4, [r4, #0]
 800cf0a:	2c00      	cmp	r4, #0
 800cf0c:	d1f7      	bne.n	800cefe <_fwalk_reent+0xe>
 800cf0e:	4638      	mov	r0, r7
 800cf10:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cf14:	89ab      	ldrh	r3, [r5, #12]
 800cf16:	2b01      	cmp	r3, #1
 800cf18:	d907      	bls.n	800cf2a <_fwalk_reent+0x3a>
 800cf1a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cf1e:	3301      	adds	r3, #1
 800cf20:	d003      	beq.n	800cf2a <_fwalk_reent+0x3a>
 800cf22:	4629      	mov	r1, r5
 800cf24:	4630      	mov	r0, r6
 800cf26:	47c0      	blx	r8
 800cf28:	4307      	orrs	r7, r0
 800cf2a:	3568      	adds	r5, #104	; 0x68
 800cf2c:	e7e9      	b.n	800cf02 <_fwalk_reent+0x12>

0800cf2e <__retarget_lock_init_recursive>:
 800cf2e:	4770      	bx	lr

0800cf30 <__retarget_lock_acquire_recursive>:
 800cf30:	4770      	bx	lr

0800cf32 <__retarget_lock_release_recursive>:
 800cf32:	4770      	bx	lr

0800cf34 <__swhatbuf_r>:
 800cf34:	b570      	push	{r4, r5, r6, lr}
 800cf36:	460e      	mov	r6, r1
 800cf38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cf3c:	4614      	mov	r4, r2
 800cf3e:	2900      	cmp	r1, #0
 800cf40:	461d      	mov	r5, r3
 800cf42:	b096      	sub	sp, #88	; 0x58
 800cf44:	da07      	bge.n	800cf56 <__swhatbuf_r+0x22>
 800cf46:	2300      	movs	r3, #0
 800cf48:	602b      	str	r3, [r5, #0]
 800cf4a:	89b3      	ldrh	r3, [r6, #12]
 800cf4c:	061a      	lsls	r2, r3, #24
 800cf4e:	d410      	bmi.n	800cf72 <__swhatbuf_r+0x3e>
 800cf50:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cf54:	e00e      	b.n	800cf74 <__swhatbuf_r+0x40>
 800cf56:	466a      	mov	r2, sp
 800cf58:	f000 f902 	bl	800d160 <_fstat_r>
 800cf5c:	2800      	cmp	r0, #0
 800cf5e:	dbf2      	blt.n	800cf46 <__swhatbuf_r+0x12>
 800cf60:	9a01      	ldr	r2, [sp, #4]
 800cf62:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800cf66:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800cf6a:	425a      	negs	r2, r3
 800cf6c:	415a      	adcs	r2, r3
 800cf6e:	602a      	str	r2, [r5, #0]
 800cf70:	e7ee      	b.n	800cf50 <__swhatbuf_r+0x1c>
 800cf72:	2340      	movs	r3, #64	; 0x40
 800cf74:	2000      	movs	r0, #0
 800cf76:	6023      	str	r3, [r4, #0]
 800cf78:	b016      	add	sp, #88	; 0x58
 800cf7a:	bd70      	pop	{r4, r5, r6, pc}

0800cf7c <__smakebuf_r>:
 800cf7c:	898b      	ldrh	r3, [r1, #12]
 800cf7e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cf80:	079d      	lsls	r5, r3, #30
 800cf82:	4606      	mov	r6, r0
 800cf84:	460c      	mov	r4, r1
 800cf86:	d507      	bpl.n	800cf98 <__smakebuf_r+0x1c>
 800cf88:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800cf8c:	6023      	str	r3, [r4, #0]
 800cf8e:	6123      	str	r3, [r4, #16]
 800cf90:	2301      	movs	r3, #1
 800cf92:	6163      	str	r3, [r4, #20]
 800cf94:	b002      	add	sp, #8
 800cf96:	bd70      	pop	{r4, r5, r6, pc}
 800cf98:	466a      	mov	r2, sp
 800cf9a:	ab01      	add	r3, sp, #4
 800cf9c:	f7ff ffca 	bl	800cf34 <__swhatbuf_r>
 800cfa0:	9900      	ldr	r1, [sp, #0]
 800cfa2:	4605      	mov	r5, r0
 800cfa4:	4630      	mov	r0, r6
 800cfa6:	f7ff f989 	bl	800c2bc <_malloc_r>
 800cfaa:	b948      	cbnz	r0, 800cfc0 <__smakebuf_r+0x44>
 800cfac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cfb0:	059a      	lsls	r2, r3, #22
 800cfb2:	d4ef      	bmi.n	800cf94 <__smakebuf_r+0x18>
 800cfb4:	f023 0303 	bic.w	r3, r3, #3
 800cfb8:	f043 0302 	orr.w	r3, r3, #2
 800cfbc:	81a3      	strh	r3, [r4, #12]
 800cfbe:	e7e3      	b.n	800cf88 <__smakebuf_r+0xc>
 800cfc0:	4b0d      	ldr	r3, [pc, #52]	; (800cff8 <__smakebuf_r+0x7c>)
 800cfc2:	62b3      	str	r3, [r6, #40]	; 0x28
 800cfc4:	89a3      	ldrh	r3, [r4, #12]
 800cfc6:	6020      	str	r0, [r4, #0]
 800cfc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cfcc:	81a3      	strh	r3, [r4, #12]
 800cfce:	9b00      	ldr	r3, [sp, #0]
 800cfd0:	6120      	str	r0, [r4, #16]
 800cfd2:	6163      	str	r3, [r4, #20]
 800cfd4:	9b01      	ldr	r3, [sp, #4]
 800cfd6:	b15b      	cbz	r3, 800cff0 <__smakebuf_r+0x74>
 800cfd8:	4630      	mov	r0, r6
 800cfda:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cfde:	f000 f8d1 	bl	800d184 <_isatty_r>
 800cfe2:	b128      	cbz	r0, 800cff0 <__smakebuf_r+0x74>
 800cfe4:	89a3      	ldrh	r3, [r4, #12]
 800cfe6:	f023 0303 	bic.w	r3, r3, #3
 800cfea:	f043 0301 	orr.w	r3, r3, #1
 800cfee:	81a3      	strh	r3, [r4, #12]
 800cff0:	89a0      	ldrh	r0, [r4, #12]
 800cff2:	4305      	orrs	r5, r0
 800cff4:	81a5      	strh	r5, [r4, #12]
 800cff6:	e7cd      	b.n	800cf94 <__smakebuf_r+0x18>
 800cff8:	0800cd8d 	.word	0x0800cd8d

0800cffc <_malloc_usable_size_r>:
 800cffc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d000:	1f18      	subs	r0, r3, #4
 800d002:	2b00      	cmp	r3, #0
 800d004:	bfbc      	itt	lt
 800d006:	580b      	ldrlt	r3, [r1, r0]
 800d008:	18c0      	addlt	r0, r0, r3
 800d00a:	4770      	bx	lr

0800d00c <_raise_r>:
 800d00c:	291f      	cmp	r1, #31
 800d00e:	b538      	push	{r3, r4, r5, lr}
 800d010:	4604      	mov	r4, r0
 800d012:	460d      	mov	r5, r1
 800d014:	d904      	bls.n	800d020 <_raise_r+0x14>
 800d016:	2316      	movs	r3, #22
 800d018:	6003      	str	r3, [r0, #0]
 800d01a:	f04f 30ff 	mov.w	r0, #4294967295
 800d01e:	bd38      	pop	{r3, r4, r5, pc}
 800d020:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d022:	b112      	cbz	r2, 800d02a <_raise_r+0x1e>
 800d024:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d028:	b94b      	cbnz	r3, 800d03e <_raise_r+0x32>
 800d02a:	4620      	mov	r0, r4
 800d02c:	f000 f830 	bl	800d090 <_getpid_r>
 800d030:	462a      	mov	r2, r5
 800d032:	4601      	mov	r1, r0
 800d034:	4620      	mov	r0, r4
 800d036:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d03a:	f000 b817 	b.w	800d06c <_kill_r>
 800d03e:	2b01      	cmp	r3, #1
 800d040:	d00a      	beq.n	800d058 <_raise_r+0x4c>
 800d042:	1c59      	adds	r1, r3, #1
 800d044:	d103      	bne.n	800d04e <_raise_r+0x42>
 800d046:	2316      	movs	r3, #22
 800d048:	6003      	str	r3, [r0, #0]
 800d04a:	2001      	movs	r0, #1
 800d04c:	e7e7      	b.n	800d01e <_raise_r+0x12>
 800d04e:	2400      	movs	r4, #0
 800d050:	4628      	mov	r0, r5
 800d052:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d056:	4798      	blx	r3
 800d058:	2000      	movs	r0, #0
 800d05a:	e7e0      	b.n	800d01e <_raise_r+0x12>

0800d05c <raise>:
 800d05c:	4b02      	ldr	r3, [pc, #8]	; (800d068 <raise+0xc>)
 800d05e:	4601      	mov	r1, r0
 800d060:	6818      	ldr	r0, [r3, #0]
 800d062:	f7ff bfd3 	b.w	800d00c <_raise_r>
 800d066:	bf00      	nop
 800d068:	20000034 	.word	0x20000034

0800d06c <_kill_r>:
 800d06c:	b538      	push	{r3, r4, r5, lr}
 800d06e:	2300      	movs	r3, #0
 800d070:	4d06      	ldr	r5, [pc, #24]	; (800d08c <_kill_r+0x20>)
 800d072:	4604      	mov	r4, r0
 800d074:	4608      	mov	r0, r1
 800d076:	4611      	mov	r1, r2
 800d078:	602b      	str	r3, [r5, #0]
 800d07a:	f7f6 fc5a 	bl	8003932 <_kill>
 800d07e:	1c43      	adds	r3, r0, #1
 800d080:	d102      	bne.n	800d088 <_kill_r+0x1c>
 800d082:	682b      	ldr	r3, [r5, #0]
 800d084:	b103      	cbz	r3, 800d088 <_kill_r+0x1c>
 800d086:	6023      	str	r3, [r4, #0]
 800d088:	bd38      	pop	{r3, r4, r5, pc}
 800d08a:	bf00      	nop
 800d08c:	200019cc 	.word	0x200019cc

0800d090 <_getpid_r>:
 800d090:	f7f6 bc48 	b.w	8003924 <_getpid>

0800d094 <__sread>:
 800d094:	b510      	push	{r4, lr}
 800d096:	460c      	mov	r4, r1
 800d098:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d09c:	f000 f894 	bl	800d1c8 <_read_r>
 800d0a0:	2800      	cmp	r0, #0
 800d0a2:	bfab      	itete	ge
 800d0a4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d0a6:	89a3      	ldrhlt	r3, [r4, #12]
 800d0a8:	181b      	addge	r3, r3, r0
 800d0aa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d0ae:	bfac      	ite	ge
 800d0b0:	6563      	strge	r3, [r4, #84]	; 0x54
 800d0b2:	81a3      	strhlt	r3, [r4, #12]
 800d0b4:	bd10      	pop	{r4, pc}

0800d0b6 <__swrite>:
 800d0b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d0ba:	461f      	mov	r7, r3
 800d0bc:	898b      	ldrh	r3, [r1, #12]
 800d0be:	4605      	mov	r5, r0
 800d0c0:	05db      	lsls	r3, r3, #23
 800d0c2:	460c      	mov	r4, r1
 800d0c4:	4616      	mov	r6, r2
 800d0c6:	d505      	bpl.n	800d0d4 <__swrite+0x1e>
 800d0c8:	2302      	movs	r3, #2
 800d0ca:	2200      	movs	r2, #0
 800d0cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d0d0:	f000 f868 	bl	800d1a4 <_lseek_r>
 800d0d4:	89a3      	ldrh	r3, [r4, #12]
 800d0d6:	4632      	mov	r2, r6
 800d0d8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d0dc:	81a3      	strh	r3, [r4, #12]
 800d0de:	4628      	mov	r0, r5
 800d0e0:	463b      	mov	r3, r7
 800d0e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d0e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d0ea:	f000 b817 	b.w	800d11c <_write_r>

0800d0ee <__sseek>:
 800d0ee:	b510      	push	{r4, lr}
 800d0f0:	460c      	mov	r4, r1
 800d0f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d0f6:	f000 f855 	bl	800d1a4 <_lseek_r>
 800d0fa:	1c43      	adds	r3, r0, #1
 800d0fc:	89a3      	ldrh	r3, [r4, #12]
 800d0fe:	bf15      	itete	ne
 800d100:	6560      	strne	r0, [r4, #84]	; 0x54
 800d102:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d106:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d10a:	81a3      	strheq	r3, [r4, #12]
 800d10c:	bf18      	it	ne
 800d10e:	81a3      	strhne	r3, [r4, #12]
 800d110:	bd10      	pop	{r4, pc}

0800d112 <__sclose>:
 800d112:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d116:	f000 b813 	b.w	800d140 <_close_r>
	...

0800d11c <_write_r>:
 800d11c:	b538      	push	{r3, r4, r5, lr}
 800d11e:	4604      	mov	r4, r0
 800d120:	4608      	mov	r0, r1
 800d122:	4611      	mov	r1, r2
 800d124:	2200      	movs	r2, #0
 800d126:	4d05      	ldr	r5, [pc, #20]	; (800d13c <_write_r+0x20>)
 800d128:	602a      	str	r2, [r5, #0]
 800d12a:	461a      	mov	r2, r3
 800d12c:	f7f6 fc38 	bl	80039a0 <_write>
 800d130:	1c43      	adds	r3, r0, #1
 800d132:	d102      	bne.n	800d13a <_write_r+0x1e>
 800d134:	682b      	ldr	r3, [r5, #0]
 800d136:	b103      	cbz	r3, 800d13a <_write_r+0x1e>
 800d138:	6023      	str	r3, [r4, #0]
 800d13a:	bd38      	pop	{r3, r4, r5, pc}
 800d13c:	200019cc 	.word	0x200019cc

0800d140 <_close_r>:
 800d140:	b538      	push	{r3, r4, r5, lr}
 800d142:	2300      	movs	r3, #0
 800d144:	4d05      	ldr	r5, [pc, #20]	; (800d15c <_close_r+0x1c>)
 800d146:	4604      	mov	r4, r0
 800d148:	4608      	mov	r0, r1
 800d14a:	602b      	str	r3, [r5, #0]
 800d14c:	f7f6 fc44 	bl	80039d8 <_close>
 800d150:	1c43      	adds	r3, r0, #1
 800d152:	d102      	bne.n	800d15a <_close_r+0x1a>
 800d154:	682b      	ldr	r3, [r5, #0]
 800d156:	b103      	cbz	r3, 800d15a <_close_r+0x1a>
 800d158:	6023      	str	r3, [r4, #0]
 800d15a:	bd38      	pop	{r3, r4, r5, pc}
 800d15c:	200019cc 	.word	0x200019cc

0800d160 <_fstat_r>:
 800d160:	b538      	push	{r3, r4, r5, lr}
 800d162:	2300      	movs	r3, #0
 800d164:	4d06      	ldr	r5, [pc, #24]	; (800d180 <_fstat_r+0x20>)
 800d166:	4604      	mov	r4, r0
 800d168:	4608      	mov	r0, r1
 800d16a:	4611      	mov	r1, r2
 800d16c:	602b      	str	r3, [r5, #0]
 800d16e:	f7f6 fc3e 	bl	80039ee <_fstat>
 800d172:	1c43      	adds	r3, r0, #1
 800d174:	d102      	bne.n	800d17c <_fstat_r+0x1c>
 800d176:	682b      	ldr	r3, [r5, #0]
 800d178:	b103      	cbz	r3, 800d17c <_fstat_r+0x1c>
 800d17a:	6023      	str	r3, [r4, #0]
 800d17c:	bd38      	pop	{r3, r4, r5, pc}
 800d17e:	bf00      	nop
 800d180:	200019cc 	.word	0x200019cc

0800d184 <_isatty_r>:
 800d184:	b538      	push	{r3, r4, r5, lr}
 800d186:	2300      	movs	r3, #0
 800d188:	4d05      	ldr	r5, [pc, #20]	; (800d1a0 <_isatty_r+0x1c>)
 800d18a:	4604      	mov	r4, r0
 800d18c:	4608      	mov	r0, r1
 800d18e:	602b      	str	r3, [r5, #0]
 800d190:	f7f6 fc3c 	bl	8003a0c <_isatty>
 800d194:	1c43      	adds	r3, r0, #1
 800d196:	d102      	bne.n	800d19e <_isatty_r+0x1a>
 800d198:	682b      	ldr	r3, [r5, #0]
 800d19a:	b103      	cbz	r3, 800d19e <_isatty_r+0x1a>
 800d19c:	6023      	str	r3, [r4, #0]
 800d19e:	bd38      	pop	{r3, r4, r5, pc}
 800d1a0:	200019cc 	.word	0x200019cc

0800d1a4 <_lseek_r>:
 800d1a4:	b538      	push	{r3, r4, r5, lr}
 800d1a6:	4604      	mov	r4, r0
 800d1a8:	4608      	mov	r0, r1
 800d1aa:	4611      	mov	r1, r2
 800d1ac:	2200      	movs	r2, #0
 800d1ae:	4d05      	ldr	r5, [pc, #20]	; (800d1c4 <_lseek_r+0x20>)
 800d1b0:	602a      	str	r2, [r5, #0]
 800d1b2:	461a      	mov	r2, r3
 800d1b4:	f7f6 fc34 	bl	8003a20 <_lseek>
 800d1b8:	1c43      	adds	r3, r0, #1
 800d1ba:	d102      	bne.n	800d1c2 <_lseek_r+0x1e>
 800d1bc:	682b      	ldr	r3, [r5, #0]
 800d1be:	b103      	cbz	r3, 800d1c2 <_lseek_r+0x1e>
 800d1c0:	6023      	str	r3, [r4, #0]
 800d1c2:	bd38      	pop	{r3, r4, r5, pc}
 800d1c4:	200019cc 	.word	0x200019cc

0800d1c8 <_read_r>:
 800d1c8:	b538      	push	{r3, r4, r5, lr}
 800d1ca:	4604      	mov	r4, r0
 800d1cc:	4608      	mov	r0, r1
 800d1ce:	4611      	mov	r1, r2
 800d1d0:	2200      	movs	r2, #0
 800d1d2:	4d05      	ldr	r5, [pc, #20]	; (800d1e8 <_read_r+0x20>)
 800d1d4:	602a      	str	r2, [r5, #0]
 800d1d6:	461a      	mov	r2, r3
 800d1d8:	f7f6 fbc5 	bl	8003966 <_read>
 800d1dc:	1c43      	adds	r3, r0, #1
 800d1de:	d102      	bne.n	800d1e6 <_read_r+0x1e>
 800d1e0:	682b      	ldr	r3, [r5, #0]
 800d1e2:	b103      	cbz	r3, 800d1e6 <_read_r+0x1e>
 800d1e4:	6023      	str	r3, [r4, #0]
 800d1e6:	bd38      	pop	{r3, r4, r5, pc}
 800d1e8:	200019cc 	.word	0x200019cc

0800d1ec <_init>:
 800d1ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d1ee:	bf00      	nop
 800d1f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d1f2:	bc08      	pop	{r3}
 800d1f4:	469e      	mov	lr, r3
 800d1f6:	4770      	bx	lr

0800d1f8 <_fini>:
 800d1f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d1fa:	bf00      	nop
 800d1fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d1fe:	bc08      	pop	{r3}
 800d200:	469e      	mov	lr, r3
 800d202:	4770      	bx	lr
